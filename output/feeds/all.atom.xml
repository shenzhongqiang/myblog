<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>强哥的世界</title><link href="http://www.shenzhongqiang.com/" rel="alternate"></link><link href="http://www.shenzhongqiang.com/feeds/all.atom.xml" rel="self"></link><id>http://www.shenzhongqiang.com/</id><updated>2019-03-09T00:00:00+08:00</updated><subtitle>技术 | 生活 | 摄影</subtitle><entry><title>Github启用SSH key认证</title><link href="http://www.shenzhongqiang.com/connect-github-with-ssh.html" rel="alternate"></link><published>2019-03-09T00:00:00+08:00</published><updated>2019-03-09T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2019-03-09:/connect-github-with-ssh.html</id><summary type="html">&lt;p&gt;Github的认证方式有两种：HTTPS和SSH key，默认的方式是HTTPS。&lt;/p&gt;
&lt;p&gt;以我自己的 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Github的认证方式有两种：HTTPS和SSH key，默认的方式是HTTPS。&lt;/p&gt;
&lt;p&gt;以我自己的&lt;a href="https://github.com/shenzhongqiang/myblog"&gt;博客项目&lt;/a&gt;为例，在repo里面运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote show origin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到这样的输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* remote origin
  Fetch URL: https://github.com/shenzhongqiang/myblog.git
  Push  URL: https://github.com/shenzhongqiang/myblog.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里URL里面是个https的链接，这个表示的就是，我们用的是HTTPS的认证方式。&lt;/p&gt;
&lt;p&gt;使用HTTPS的方式有个不方便的地方，就是每次push代码的时候都要输入用户名密码。而启用SSH key认证的方式可以省去这个麻烦。&lt;/p&gt;
&lt;p&gt;接下来我们就来看下怎么样启用SSH key认证。&lt;/p&gt;
&lt;p&gt;配置的过程包括这样几个步骤
* 生成密钥对
* 将公钥上传到Github
* 将本地repo的remote改成SSH&lt;/p&gt;
&lt;h1&gt;1. 生成密钥对&lt;/h1&gt;
&lt;p&gt;运行下面的命令生成一组密钥对&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen -t rsa -b &lt;span class="m"&gt;4096&lt;/span&gt; -C &lt;span class="s2"&gt;&amp;quot;&amp;lt;username@domain.com&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;username@domain.com&amp;gt;替换为自己的邮箱&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在提示&lt;code&gt;Enter passphrase&lt;/code&gt;的那一步，我们直接回车。这样不输入任何passphrase，push的时候就不需要密码。
这行命令会在&lt;code&gt;~/.ssh/&lt;/code&gt;下生成两个文件：&lt;code&gt;id_rsa&lt;/code&gt;和&lt;code&gt;id_rsa.pub&lt;/code&gt;。&lt;code&gt;id_rsa&lt;/code&gt;是我们的私钥，&lt;code&gt;id_rsa.pub&lt;/code&gt;是我们的公钥，后面我们会将公钥上传到Github。&lt;/p&gt;
&lt;p&gt;接下来我们把私钥添加到&lt;code&gt;ssh-agent&lt;/code&gt;。运行下面的命令确保ssh-agent在运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ssh-agent -s&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果输出类似&lt;code&gt;Agent pid 13370&lt;/code&gt;，表示ssh-agent在正常工作。&lt;/p&gt;
&lt;p&gt;运行下面的命令将私钥添加到&lt;code&gt;ssh-agent&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-add ~/.ssh/id_rsa
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;2. 将公钥上传到Github&lt;/h1&gt;
&lt;p&gt;登录Github，点击右上角自己的头像，选择Settings
&lt;img alt="" src="http://www.shenzhongqiang.com/images/userbar-account-settings.png"&gt;&lt;/p&gt;
&lt;p&gt;在新打开的页面中，选择SSH and GPG keys
&lt;img alt="" src="http://www.shenzhongqiang.com/images/settings-sidebar-ssh-keys.png"&gt;&lt;/p&gt;
&lt;p&gt;点击New SSH key
&lt;img alt="" src="http://www.shenzhongqiang.com/images/ssh-add-ssh-key.png"&gt;&lt;/p&gt;
&lt;p&gt;输入key的Title，并且将刚刚生成的&lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;里的内容复制粘贴进去，保存即可。&lt;/p&gt;
&lt;p&gt;上传公钥后，我们来测一下Github的SSH，运行下面的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -T git@github.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果返回&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hi shenzhongqiang! You&amp;#39;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;恭喜你，配置已生效。&lt;/p&gt;
&lt;h1&gt;3. 将本地repo的remote改成SSH&lt;/h1&gt;
&lt;p&gt;如果本地的repo原先是HTTPS的认证方式，最后我们需要将它改成SSH key的认证方式。设置方式非常简单，只需要重新设置remote的URL即可。&lt;/p&gt;
&lt;p&gt;运行下面的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote set-url origin git@github.com:&amp;lt;username&amp;gt;/&amp;lt;reponame&amp;gt;.git &lt;span class="c1"&gt;# 将username和reponame替换成自己的用户名、repo名字&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;好了，这样我们的配置就全部完成了。现在我们再push看看，是不是不需要密码了？&lt;/p&gt;</content><category term="github"></category></entry><entry><title>年终奖多发一元，少得千元？Python告诉你为什么</title><link href="http://www.shenzhongqiang.com/annual-bonus-tax.html" rel="alternate"></link><published>2019-01-18T00:00:00+08:00</published><updated>2019-01-18T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2019-01-18:/annual-bonus-tax.html</id><summary type="html">&lt;p&gt;年终奖多发一元，到手却会少一千元，甚至更多。听到这个消息的时候，大家是不是和我一样 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;年终奖多发一元，到手却会少一千元，甚至更多。听到这个消息的时候，大家是不是和我一样，觉得很难过？&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-93705d574116cb79418b2d01462f8b88_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;上了这么多年班，我也是最近才搞清楚年终奖的税是怎么算的。年终奖的税和工资税的最大区别就是，年终奖&lt;strong&gt;没有阶梯税率，没有阶梯税率，没有阶梯税率&lt;/strong&gt;，重要的事情说三遍。&lt;/p&gt;
&lt;p&gt;具体怎么算，我们来看下面的公式&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.zhihu.com/equation?tex=%E5%B9%B4%E7%BB%88%E5%A5%96%E7%A8%8E+%3D+%E5%B9%B4%E7%BB%88%E5%A5%96+%5Ctimes+%E7%A8%8E%E7%8E%87+-+%E9%80%9F%E7%AE%97%E6%89%A3%E9%99%A4%E6%95%B0"&gt; &lt;/p&gt;
&lt;p&gt;税率和速算扣除数按照税率表，最新的税率表如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-7aec470a0d883849088aff69bcb8f971_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我们假设一个人的年终奖是30000元，因为没超过36000元，查上表得到税率3%，速算扣除数是0，因此他要交的税是&lt;img alt="" src="https://www.zhihu.com/equation?tex=30000+%5Ctimes+3%5C%25+-+0+%3D+900%E5%85%83"&gt; 。&lt;/p&gt;
&lt;p&gt;如果一个人的年终奖是120000元，因为在36000元~144000元的区间内，查上表得到税率10%，速算扣除数210，所以他要交的税是 &lt;img alt="" src="https://www.zhihu.com/equation?tex=120000+%5Ctimes+10%5C%25+-+210+%3D+11790%E5%85%83"&gt; 。&lt;/p&gt;
&lt;p&gt;基于年终奖税的计算方式，我们用Python实现了一个算税的函数。代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bisect&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bonus_tax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bonus&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ranges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;144000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;420000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;660000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;960000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;deducts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;210&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1410&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2660&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4410&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15160&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.03&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.45&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bisect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bisect_left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ranges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bonus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bonus&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;deducts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tax&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的bonus_tax函数就是算税的函数，它接受一个参数bonus，就是我们的年终奖。&lt;/p&gt;
&lt;p&gt;我们用这个函数来算一下，从1000元到1000000元区间内所有年终奖的税各是多少。具体代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;bonuses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;taxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;net_incomes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bonus&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bonuses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bonus_tax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bonus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;taxes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;net_incomes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bonus&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bonuses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;net_incomes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段程序的末尾会将税后年终奖和税前年终奖的关系制作成一张折线图，展现出来，如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-6a5dc17cda5d9a8c572b30b2beacd7d8_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;横轴是税前的年终奖，纵轴是税后拿到手的收入。可以看到上图中税后到手的收入和税前年终奖并不是呈现单调递增的关系，在几个节点上会出现突然的下跌，也就是说税前年终奖虽然增加了，但税后到手的收入却减少了。&lt;/p&gt;
&lt;p&gt;这是为什么呢？&lt;/p&gt;
&lt;p&gt;我们注意到这些突然的下跌都是出现在跨税档的边界上。比如36000元的年终奖，需要交的税是 &lt;img alt="" src="https://www.zhihu.com/equation?tex=36000+%5Ctimes+3%5C%25+-+0+%3D+1080%E5%85%83"&gt; ，但36001元的年终奖，就需要交 &lt;img alt="" src="https://www.zhihu.com/equation?tex=36001+%5Ctimes+10%5C%25+-+210+%3D+3390%E5%85%83"&gt; 的税，年终奖增加一元，收入反而减少了。同样的问题也出现在144000元、300000元、420000元、660000元、960000元这些年终奖上。在这些跨税档的边界上，年终奖虽然增加了，但因为跨了税档，税率提高了，导致税后所得反而减少了。&lt;/p&gt;
&lt;p&gt;出现这个问题的根本原因，还是在于年终奖的计税存在一个漏洞。年终奖计税的税率是基于工资税的税率表，工资税的税率表上收入额这一栏是月收入，而上面的表格里的收入额是年收入，收入额乘以了12，但速算扣除数没有，这就导致跨税档的时候会出现收入突然下跌。&lt;/p&gt;
&lt;p&gt;如果我们把上面表格中的速算扣除数都乘以12，再画一下税后年终奖和税前年终奖的关系图，可以得到下面的图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-15460c017b74acf4ac7d9fff7e35792b_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这张图就正常多了，图上没有突然下跌的断层，税后年终奖和税前年终奖呈现单调递增的关系。&lt;/p&gt;
&lt;p&gt;看到这里，大家是不是理解了年终奖的计税方式了呢？祝大家都能避开跨税档的陷阱~&lt;/p&gt;
&lt;p&gt;完整代码已上传网盘，公众号【Python与数据分析】后台回复“&lt;strong&gt;年终奖&lt;/strong&gt;”可获取地址。&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>从豆瓣的反爬说说自建代理池</title><link href="http://www.shenzhongqiang.com/douban-anticrawl-proxypool.html" rel="alternate"></link><published>2019-01-13T00:00:00+08:00</published><updated>2019-01-13T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2019-01-13:/douban-anticrawl-proxypool.html</id><summary type="html">&lt;p&gt;爬过豆瓣的同学应该都有过这样的经历，一开始爬取的过程挺正常的，但爬着爬着就不能获取到数据了。这是因为豆瓣对IP作了限制，如果短时间内来自同一个IP的请求太多 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;爬过豆瓣的同学应该都有过这样的经历，一开始爬取的过程挺正常的，但爬着爬着就不能获取到数据了。这是因为豆瓣对IP作了限制，如果短时间内来自同一个IP的请求太多，就会禁止来自这个IP的访问，我们的爬虫也就无法继续获取到数据了。&lt;/p&gt;
&lt;h4&gt;豆瓣的反爬&lt;/h4&gt;
&lt;p&gt;我们先来真实地感受一下豆瓣的反爬。假如我们有这样一个豆瓣的爬虫，这个爬虫是要爬取豆瓣上某几个标签页下的图书的数据（像下面这样的页面里的数据）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-b8da186e8cd483330b0811a52bf5b73f_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;爬虫的代码如下（这里只是为了展示豆瓣的反爬机制，代码作了简化）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_books_by_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page_no&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page_no&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://book.douban.com/tag/{}?start={}&amp;amp;type=T&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;#r = requests.get(url, headers=headers, verify=False, proxies={&amp;quot;https&amp;quot;: proxy})&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//li[@class=&amp;quot;subject-item&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;title_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//div[@class=&amp;quot;info&amp;quot;]/h2/a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SQL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;数据分析&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;计算机&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;page_no&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_books_by_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page_no&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;page_no&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的爬虫会爬取SQL、数据分析和计算机这三个标签下的所有图书。每爬取一页数据，我们都会打印出HTTP返回码 r.status_code 和爬取到的图书的数量 len(items) 。&lt;/p&gt;
&lt;p&gt;我们在命令行窗口运行这个爬虫，可以看到这样的结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的输出表明爬取的页面都返回了HTTP 200，并且获取到了每一页里面的20条图书信息。&lt;/p&gt;
&lt;p&gt;但如果我们多运行几次程序后，结果就变成了下面这样了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;200 0
200 0
200 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HTTP还是返回200的响应，但我们获取不到页面里的图书信息了，因为我们的爬虫被禁了。&lt;/p&gt;
&lt;p&gt;要解决爬虫被禁的问题，一个直观的思路就是使用代理池，每次爬取页面我们都使用不同的IP发出请求，这样就可以避免同一个IP频繁发出请求被禁的情况。&lt;/p&gt;
&lt;p&gt;代理按照是否匿名，大致可分成这样几类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透明代理&lt;/li&gt;
&lt;li&gt;匿名代理&lt;/li&gt;
&lt;li&gt;高匿代理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;透明代理在HTTP头里设置了你的真实IP，服务器可以通过HTTP头知晓你真实的IP。&lt;/p&gt;
&lt;p&gt;匿名代理虽然隐藏了你的真实IP，但服务器还是知道你使用了代理。&lt;/p&gt;
&lt;p&gt;高匿代理不仅隐藏了你的真实IP，而且让服务器无法发现你在使用代理，这是我们自建代理池的最佳的选择，我们下一步自建代理池的步骤中用到的也是高匿代理。&lt;/p&gt;
&lt;h4&gt;自建代理池&lt;/h4&gt;
&lt;p&gt;西刺代理（[]https://www.xicidaili.com/)）是一个提供免费代理的网站，他的首页是下面这样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-6ba145b7268323ff078be33b28149d95_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我们通过爬取西刺上可用的免费高匿代理，来建立我们的代理池。&lt;/p&gt;
&lt;p&gt;爬取西刺高匿代理的代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_xici_proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_no&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://www.xicidaili.com/nn/{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_no&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tr_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//table[@id=&amp;quot;ip_list&amp;quot;]/tr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tr_node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tr_nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;td_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tr_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./td&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;td_nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;td_nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;proxy_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;td_nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;proto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;td_nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{}://{}:{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;uptime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;td_nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;proxy_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;高匿&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;proto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的get_xici_proxy函数每次获取一个页面的代理。因为豆瓣图书的URL都是HTTPS的，所以我们这里只关心HTTPS的代理，上面的代码中我们筛选出高匿的并且是HTTPS的代理。&lt;/p&gt;
&lt;p&gt;爬下了免费代理以后，接下来，我们来验证一下这些代理是不是可用。我们通过代理去访问豆瓣的网页，测试代理的有效性。代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;https_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://book.douban.com/tag/SQL?start=20&amp;amp;type=T&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;proxies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;https_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proxies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;proxies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//li[@class=&amp;quot;subject-item&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们获取到这样几个有效的代理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# proxy文件内容&lt;/span&gt;
https://110.52.235.11:9999
https://119.101.114.44:9999
https://119.101.117.59:9999
https://112.85.129.162:9999
https://119.101.112.66:9999
https://119.101.117.72:9999
https://125.123.136.156:9999
https://119.101.112.210:9999
https://119.101.114.72:9999
https://119.101.112.202:9999
https://119.101.112.173:9999
https://119.101.112.251:9999
https://119.101.112.64:9999
https://119.101.114.103:9999
https://119.101.112.172:9999
https://119.177.210.163:9999
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们把上面测试有效的代理存入到一个叫proxy的文件中。&lt;/p&gt;
&lt;p&gt;接下来，我们实现一个Proxy类来获取这个列表中的代理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proxyfile&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proxyfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_proxies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_instance&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_curr&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_proxies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_proxies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_curr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的Proxy是一个Singleton的类。get_proxy方法用于从代理列表中获取代理，每次使用一个代理，如果所有的代理都用过了，我们回到第一个代理，重新开始选择。&lt;/p&gt;
&lt;p&gt;好，到这里我们就建立我们自己的代理池，并且创建了一个获取代理的类Proxy。&lt;/p&gt;
&lt;p&gt;接下来我们修改我们之前豆瓣爬虫的代码，我们使用代理池中的代理来发出请求。我们将get_books_by_page函数修改成如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_books_by_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page_no&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page_no&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://book.douban.com/tag/{}?start={}&amp;amp;type=T&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;inst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;proxy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_proxy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proxies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//li[@class=&amp;quot;subject-item&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;title_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//div[@class=&amp;quot;info&amp;quot;]/h2/a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们再次运行我们的豆瓣爬虫，可以看到如下的输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在爬虫又重新开始工作，可以获取到图书的信息了。&lt;/p&gt;
&lt;p&gt;通过这样的自建代理池，我们破解了豆瓣的反爬。不过需要注意的是，很多免费代理有效时间比较短，毕竟是免费的，稳定性没保障。大家获取免费代理后，还是要趁热尽快使用。如果要追求稳定性，建议大家还是使用付费代理。&lt;/p&gt;</content><category term="爬虫"></category><category term="Python"></category><category term="爬虫"></category></entry><entry><title>爬了下Unsplash上的高赞壁纸，总有一款适合你</title><link href="http://www.shenzhongqiang.com/unsplash-hd-wallpaper.html" rel="alternate"></link><published>2018-12-28T00:00:00+08:00</published><updated>2018-12-28T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-12-28:/unsplash-hd-wallpaper.html</id><summary type="html">&lt;p&gt;Unsplash是个高清摄影图片的网站，里面的照片非常精美，分辨率也很高，最重要的是，所有的照片都没有版权 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Unsplash是个高清摄影图片的网站，里面的照片非常精美，分辨率也很高，最重要的是，所有的照片都没有版权，无须向原作者申请授权，即可任意使用。&lt;/p&gt;
&lt;p&gt;最近闲暇的时候写了个爬虫爬了下Unsplash上的那些高赞的壁纸。爬虫原理非常简单，就是爬取所有的壁纸，然后筛选那些赞数最高的图片。代码比较简单，这里不作介绍，后面有获取方式。&lt;/p&gt;
&lt;p&gt;这里整理了80张赞数最高的壁纸。大家最喜欢哪一张呢，欢迎在评论里告诉我~&lt;/p&gt;
&lt;p&gt;所有原图已上传百度网盘，代码已上传github，可在公众号【Python与数据分析】后台回复unsplash获取。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-2dbc8e87513975bc740a16809d7c9b68_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-b3f7520ab44a3c243cebd0da4f9dfb15_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-6a846643e8e7725c12004a59f73eb161_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-85bbf7ca411f6c036f916ee0a899c13e_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;5.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-38d00f700d1f844200948a96bbf5bab4_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;6.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-09e280831ce622279766f563b52660b9_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;7.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5bb81b8b5f5fd23f33b490ed1ef7c2d4_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;8.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-9320713933b42a48fa38e39371c77465_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;9.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-ef12d0d7fae98e6c65b62d9920f4270e_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;10.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-bfbc096d7a87be44c2e78138b2ac1bc5_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;11.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5ac578e275ddfc8f35fa76d418e97d9a_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;12.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-d1085ecde8cd27b89dfafe5090a5c921_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;13.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c73165f39bf6ac9e013912a5fc65d4be_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;14.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-8fb7bc373121891d0a07a256dc4670b8_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;15.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-03695f7eba70fbdc4717492cb10547f1_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;16.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-7a8801834386a6e19096784ca4a9863e_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;17.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-f1be59ec6bbcfd07cc2483d751a3d2a4_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;18.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-660216e0a14fedb4e8fabbf34643e95b_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;19.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-b5e745331441d820b4fa5e5d54485783_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;20.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5748010ab90d122ada8ced2bd86e5320_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;21.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-67accea4a8569cb60cd1287d863b6dc4_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;22.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-3ef2063a1572a613b15b0273ed0eb6b8_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;23.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-846b2c1c5ffd98d33b2559e11f3cc680_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;24.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-08f36e382c705974d4ad00010bf274fe_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;25.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e1a332c3412d6257173e60166b77211e_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;26.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-f7883800bcf244c877fa5ad671831f8e_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;27.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-00670248b6205aa926c401d55e123f96_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;28.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5b78c0cf3205e5e7d6152c601416aa44_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;29.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c486f843a35191041325b4d9dc6a1b5c_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;30.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-01e66bd7d34a620158edd212dc7380ec_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;31.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-71941913b9e9f2f2bafc73266e23ab90_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;32.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-551860e0f9d80ed192eef5e9b45c4d93_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;33.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-6709d9a05ff5b2f6661041275768ef12_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;34.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-517c91ff0c401e9da427efb111669047_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;35.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-890d27662838e35d20ac9b94d15f49c9_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;36.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-9fb25ab6b2da1aff0df444f92ccb9a37_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;37.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-0d5b7a7054b7334765e77436683a7097_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;38.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-92f95eeff9c8ed0ad8265083eb00606a_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;39.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-b75b63adb6270df2031a445ef0b65a18_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;40.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-3565137eaf45291b38de8a2624af4ac8_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;41.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-04d77a00d032dd29a44ee038b158362a_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;42.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-aceec4646c6bc14e93af82a9fec44af3_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;43.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-155015b20d5e713f214985b41146d33e_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;44.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-2f57300ccd813b7707d85dde588ec4e4_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;45.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-45247128238bcc26bedcc8858a59597c_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;46.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e467a2cae16a3183da556742a44eeda1_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;47.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-2a199bb0ddf071bd9d5299bbbc2f33a7_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;48.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-f26422259e66d07edd139474b2c32358_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;49.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-b909a7f1f6e8beaedeb4d788f8d4257d_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;50.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-6fe1be3b51606382f8208ce7b05021f2_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;51.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-6e461434b355bb3ed19c31c715393c0a_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;52.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-df063b05c7067cffd8283d2a88f64757_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;53.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-f990f36392a589ffa0e7b64c390c13c9_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;54.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-7ef27e24988c2c589682d22b865fd21a_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;55.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-643a7f4dee01f23078f5cebba685180f_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;56.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-b96c4d07c0e0befad70ece95c91c59f4_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;57.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-f3824268bdd46428f280fe15c363de10_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;58.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a93a06f9787df52becee20e350719783_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;59.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-1dbb7cf821220e25b24a18a6e696c45f_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;60.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5de55a4339a3ec902ff3a62ea878e260_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;61.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-aa5810b4e5af2e53d0150fe0c5f35e7d_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;62.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e24251722c9b52f194c20dc7e9e6bc2b_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;63.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-d3674b1a3c5b697441fb37201cc85713_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;64.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a903f1b705d8605d0bff3350abf92c06_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;65.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-ee3e0c6424d2da3e24f6065ab4cb6aac_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;66.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-28e120d22da076c207d3f48aaa05a228_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;67.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-6cd555bf222daa65df4016d12e235793_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;68.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-34327cb07b0a301a1243289ef94dd87b_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;69.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-da0cc2cfbd936053cabed2d6753d2b5f_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;70.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-9b910dedd764e32a800d605f9a0ec55f_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;71.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-72b1e9d33e3498d0993aa2d51896212d_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;72.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-db2b3a0b916b1abf15b1621585199775_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;73.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5177e9315e8b2edbed7824554fcbb1f8_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;74.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e3597b2e337adfaee849247780214b6a_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;75.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-75d82c2e960f4205af8df3d57539dc16_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;76.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-81541aad6b9db777647f01e60a5eb780_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;77.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-36573a7d942582bb6882952d5adbd008_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;78.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-ea3a98d67f3f1ce158fed17a73d22bd6_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;79.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-65c82e47c11562cd16682a226870281a_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;80.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-748cdc99477cd8c8b3dfc346531713b7_r.jpg"&gt;&lt;/p&gt;</content><category term="爬虫"></category></entry><entry><title>Windows上做Python开发太痛苦？Docker了解一下</title><link href="http://www.shenzhongqiang.com/windows-py-on-docker.html" rel="alternate"></link><published>2018-11-26T10:20:00+08:00</published><updated>2018-11-26T10:20:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-11-26:/windows-py-on-docker.html</id><summary type="html">&lt;p&gt;用Windows的朋友应该都体会过，Windows上做Python开发有多痛苦。用pip装库各种报错，然后每次都要花很多时间找解决办法，每次的心情都像这样 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;用Windows的朋友应该都体会过，Windows上做Python开发有多痛苦。用pip装库各种报错，然后每次都要花很多时间找解决办法，每次的心情都像这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-402a08b55cd89812b83bb3848c33cbc0_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;之前我的解决方法是在Windows上装VMWare，VMWare上运行Ubuntu，然后在Ubuntu里面做开发。但这样也不太方便，每次进入开发环境都要先启动VMWare，再启动Ubuntu，然后打开命令行窗口开始开发，而且有时候需要在宿主机和虚拟机之间来回切换，也很麻烦。&lt;/p&gt;
&lt;p&gt;最近了解到Docker也有Windows的版本，于是就想到在windows上利用Docker运行一个Ubuntu镜像，在容器里搭建Python开发环境，这 样既解决了安装库的问题，也解决了VMWare虚拟机的不方便之处。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5e97f157eb2f8660c60672b440cdd4f0_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;关于容器的基本使用，可以参考我之前的一篇文章 &lt;a href="https://zhuanlan.zhihu.com/p/31436920"&gt;Docker初体验&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;需要注意的是，Windows上安装Docker对系统有以下的要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要支持Hyper-V的windows版本，Hyper-V目前仅在Windows 10之后的版本支持&lt;/li&gt;
&lt;li&gt;BIOS里需要启用Virtualization（虚拟化）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你的系统满足上面的要求，接下来，我们来一步一步搭建环境。&lt;/p&gt;
&lt;h4&gt;安装Docker for Windows&lt;/h4&gt;
&lt;p&gt;安装程序可以从这里下载 &lt;a href="http://link.zhihu.com/?target=https%3A//download.docker.com/win/stable/Docker%2520for%2520Windows%2520Installer.exe"&gt;Docker for Windows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装完之后，运行Docker for Windows。&lt;/p&gt;
&lt;p&gt;Docker运行后可以在状态栏里看到有一个小鲸鱼的图标，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-2dc9098e780c3bb757fd5e94957768d7_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;打开命令行窗口，运行下面的命令查看Docker版本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker --version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Docker version &lt;span class="m"&gt;18&lt;/span&gt;.09.0, build 4d60db4
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;下载镜像&lt;/h4&gt;
&lt;p&gt;docker hub上提供了很多docker镜像，我们以ubuntu:18.04为基础，打造我们的python开发环境。运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker pull ubuntu:18.04
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下载完后，我们来查看一下本地的镜像，运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker images
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到如下的输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE
ubuntu                      &lt;span class="m"&gt;18&lt;/span&gt;.04               93fd78260bd1        &lt;span class="m"&gt;6&lt;/span&gt; days ago          &lt;span class="m"&gt;86&lt;/span&gt;.2MB
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安装常用工具和Python&lt;/h4&gt;
&lt;p&gt;我们启动一个容器，并进到容器内的bash，运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -it ubuntu:18.04 bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们的这个镜像现在只是一个最基本的ubuntu的系统，里面很多工具都没有，如ping、ifconfig、wget、vim等，也没有python。接下来我们把这些一个一个都装上。&lt;/p&gt;
&lt;p&gt;由于镜像默认用的是ubuntu官方的源，从国内连官方的源很慢，我们先把源改成163的源。修改/etc/apt/sources.list的内容为下面 的内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来，安装ping，wget，ifconfig，vim等工具&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install iputils-ping wget net-tools vim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装python3.6&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install python3.6
ln -s /usr/bin/python3.6 /usr/bin/python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装pip&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install python3-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;配置VIM&lt;/h4&gt;
&lt;p&gt;安装完工具后，我们来配置一下vim。打开~/.vimrc文件，输入vim的配置。比如我的配置是这样的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set ru
syntax on
set background=dark
set sw=4
set ts=4
set tabstop=4
set shiftwidth=4
set expandtab
filetype plugin on
set autoindent
set smartindent
set number
set viminfo=&amp;#39;10,\&amp;quot;100,:20,%,n~/.viminfo
function! ResCur()
    if line(&amp;quot;&amp;#39;\&amp;quot;&amp;quot;) &amp;lt;= line(&amp;quot;$&amp;quot;)
        normal! g`&amp;quot;
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END

highlight WhiteSpaces ctermbg=green guibg=#55aa55
match WhiteSpaces /\s\+$/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;好了，至此，我们的开发环境配置好了。&lt;/p&gt;
&lt;h4&gt;提交镜像&lt;/h4&gt;
&lt;p&gt;为方便以后的使用，我们把这个配置好的容器打成一个新的镜像。在容器中执行exit退出，我们现在来到了windows的命令行窗口。我们查看一下我们刚刚配置好的容器，运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker ps -a
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CONTAINER ID        IMAGE                       COMMAND             CREATED             STATUS                      PORTS               NAMES
39ca895c725e        ubuntu:18.04                &amp;quot;bash&amp;quot;              3 hours ago         Exited (0) 19 seconds ago                       relaxed_wiles
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行下面的命令，提交更改，将容器打包成一个新的镜像&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker commit 39ca895c725e shenzhongqiang/python-dev:version1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们再来查看一下本地的镜像&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker images
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE
shenzhongqiang/python-dev   version1            fbf0ce58d00d        2 minutes ago       542MB
ubuntu                      18.04               93fd78260bd1        6 days ago          86.2MB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，现在我们本地有2个镜像了。下面一个是原始的docker hub上的ubuntu镜像，上面一个就是我们自己定制的镜像。&lt;/p&gt;
&lt;p&gt;之后我们就可以基于我们定制的镜像，启动容器做开发了。启动容器很简单，只要运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -it fbf0ce58d00d bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意的是，容器如果被删除了，其中的更改也会丢失。要保存容器中的更改，需要像上面这样把更改commit到镜像中。&lt;/p&gt;
&lt;p&gt;好，以上就是定制的所有步骤。这两天我逐渐把项目迁移到容器里了，在容器里开发感觉比在虚拟机里开发顺滑多了。&lt;/p&gt;
&lt;p&gt;为方便起见，上面这个镜像放在了我的docker hub上，大家可以通过下面的命令获取&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker pull shenzhongqiang/python-dev:version1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果大家有更好的Windows上配置Python开发环境的建议，也欢迎在评论里告诉我~&lt;/p&gt;
&lt;p&gt;本文已同步更新到公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;</content><category term="Python"></category></entry><entry><title>破解点评网的反爬</title><link href="http://www.shenzhongqiang.com/dianping-anti-crawler.html" rel="alternate"></link><published>2018-11-24T10:20:00+08:00</published><updated>2018-11-24T10:20:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-11-24:/dianping-anti-crawler.html</id><summary type="html">&lt;p&gt;点评网的反爬设置在我们爬取点评网页的时候给我们造成了不小的障碍。在网页上我们看到的是这样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-713839a83e9e16e65dc9f76feb23ab90_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;网页上可以看到这家餐厅有1405条评论，人均387。但在分析页面源码的时候 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;点评网的反爬设置在我们爬取点评网页的时候给我们造成了不小的障碍。在网页上我们看到的是这样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-713839a83e9e16e65dc9f76feb23ab90_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;网页上可以看到这家餐厅有1405条评论，人均387。但在分析页面源码的时候，我们却看不到网页上的数字，看到是这样的代码&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-4fec3b668135f3e7d3c9418d5baed6db_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;点评网对数字做了处理，一些数字的信息像评论条数、人均、评分等都做了反爬保护。上面的网页中评论条数是1405条，但在页面源 码中，除了第一个数字1以外，后面的数字我们看不到，都是一些像随机编码一样的css class。&lt;/p&gt;
&lt;p&gt;如果我们仔细分析这个css class，其实是不难发现背后的原理的。&lt;/p&gt;
&lt;p&gt;通过开发者工具，我们找到这个css的定义，可以看到是下面这样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-99963314a3cb5aec9f80ecb9adb22311_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;background-image属性里面是一个url，我们在浏览器里打开它，看到它的内容是&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c1080556faba624a1d434bbdbe84e1e6_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;lc-mY1i 这个css class里面是一个background属性，定义了背景图片偏移的位置。&lt;/p&gt;
&lt;p&gt;所以点评网上显示数字的原理就是通过设置不同的偏移位置，显示背景图片相应位置上的数字。我们可以想象背景图片的前面有一个 窗口，窗口的大小刚好够显示一个数字。窗口是固定不动的，背景图片在后面移动，移动到不同的位置就能显示这个位置上的数字。&lt;/p&gt;
&lt;p&gt;进一步分析背景图片，我们可以发现，这是一个SVG图片，图片中的数字可以在svg的源码中看到，如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-677f504d989747ef91fb5bc9de80a136_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;理解了原理后，我们用代码来实现一下解析的过程。&lt;/p&gt;
&lt;p&gt;首先我们从点评的网页上找出css文件的url，代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_css&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.dianping.com/shanghai/ch10&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;matched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href=&amp;quot;([^&amp;quot;]+svgtextcss[^&amp;quot;]+)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cannot find svgtextcss file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;css_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;css_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fix_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;css_url&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;随后我们从css里找到背景图片的路径，并获取SVG图片中的每个数字&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_svg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;matched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span\[class\^=&amp;quot;lc\-&amp;quot;\].*?background\-image: url\((.*?)\);&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cannot find svg file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;svg_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;svg_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fix_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;svg_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;svg_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;matched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class=&amp;quot;textStyle&amp;quot;&amp;gt;(\d+)&amp;lt;/text&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cannot find digits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个函数返回一个数组，数组的内容是SVG图片中的所有数字。&lt;/p&gt;
&lt;p&gt;对于点评网页中的用css class表示的数字，我们来解析一下css class和数字之间的对应关系&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_class_offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;matched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(\.[a-zA-Z0-9-]+)\{background:(\-\d+\.\d+)px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;css_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;css_class&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个函数返回的是一个字典，它的key是css class的名字，value是css class对应的数字在背景图片中的偏移量。&lt;/p&gt;
&lt;p&gt;接下来，我们以评论条数为例，来获取点评上一个页面里每家餐厅的评论条数。先定义函数，用于获取评论条数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_review_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;shop_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//div[@id=&amp;quot;shop-all-list&amp;quot;]/ul/li&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;shop_node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;shop_nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shop_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//div[@class=&amp;quot;tit&amp;quot;]/a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;review_num_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shop_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//div[@class=&amp;quot;comment&amp;quot;]/a[@class=&amp;quot;review-num&amp;quot;]/b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;review_num_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;review_num_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;digit_node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;review_num_node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;css_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digit_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_offset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;css_class&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt;
        &lt;span class="n"&gt;last_digit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;review_num_node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_digit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_digit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;restaurant: {}, review num: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后调用函数，爬一下页面中每家餐厅的评论条数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;css_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_css&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_svg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;class_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_class_offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.dianping.com/shanghai/ch10/g116&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;get_review_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行代码后，得到如下的结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;restaurant: 1886汽车主题德国餐厅&lt;span class="o"&gt;(&lt;/span&gt;环宇荟店&lt;span class="o"&gt;)&lt;/span&gt;, review num: &lt;span class="m"&gt;1021&lt;/span&gt;
restaurant: Mia Fringe迷芬奇餐厅&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;酒吧, review num: &lt;span class="m"&gt;152&lt;/span&gt;
restaurant: Oyster EXPO江月蚝庭西餐生蚝吧&lt;span class="o"&gt;(&lt;/span&gt;世博源店&lt;span class="o"&gt;)&lt;/span&gt;, review num: &lt;span class="m"&gt;1405&lt;/span&gt;
restaurant: 宝莱纳餐厅&lt;span class="o"&gt;(&lt;/span&gt;陆家嘴店&lt;span class="o"&gt;)&lt;/span&gt;, review num: &lt;span class="m"&gt;7854&lt;/span&gt;
restaurant: Pizza Marzano玛尚诺&lt;span class="o"&gt;(&lt;/span&gt;港汇店&lt;span class="o"&gt;)&lt;/span&gt;, review num: &lt;span class="m"&gt;7527&lt;/span&gt;
restaurant: love&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;salt牛排馆, review num: &lt;span class="m"&gt;86&lt;/span&gt;
restaurant: Da Ivo 意大利魔镜餐厅, review num: &lt;span class="m"&gt;3497&lt;/span&gt;
restaurant: Mr Nice好好先生餐厅&lt;span class="o"&gt;(&lt;/span&gt;月星环球港店&lt;span class="o"&gt;)&lt;/span&gt;, review num: &lt;span class="m"&gt;9052&lt;/span&gt;
restaurant: L&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;ATELIER de Joël Robuchon, review num: &lt;span class="m"&gt;2821&lt;/span&gt;
restaurant: Stone Sal 言盐西餐厅, review num: &lt;span class="m"&gt;62&lt;/span&gt;
restaurant: 夏朵花园, review num: &lt;span class="m"&gt;3031&lt;/span&gt;
restaurant: 壳里西餐厅Coquille Seafood Bistro, review num: &lt;span class="m"&gt;322&lt;/span&gt;
restaurant: ICHA Chateau Bar &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; Restaurant&lt;span class="o"&gt;(&lt;/span&gt;酒吧创意料理&lt;span class="o"&gt;)&lt;/span&gt;, review num: &lt;span class="m"&gt;496&lt;/span&gt;
restaurant: 菲斯特花园西餐厅, review num: &lt;span class="m"&gt;655&lt;/span&gt;
restaurant: 宝丽嘉酒店Cafe Bellagio&lt;span class="o"&gt;(&lt;/span&gt;宝丽嘉西餐厅&lt;span class="o"&gt;)&lt;/span&gt;, review num: &lt;span class="m"&gt;598&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对照网页上的数据，可以看到，餐厅的评论条数都被正确的解析出来了。&lt;/p&gt;
&lt;p&gt;本文已同步更新到公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;</content><category term="爬虫"></category><category term="Python"></category><category term="爬虫"></category></entry><entry><title>60行代码爬取知乎神回复</title><link href="http://www.shenzhongqiang.com/crawler-zhihu-funny-answers.html" rel="alternate"></link><published>2018-11-05T10:20:00+08:00</published><updated>2018-11-05T10:20:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-11-05:/crawler-zhihu-funny-answers.html</id><summary type="html">&lt;p&gt;之前的一篇文章 &lt;a href="https://zhuanlan.zhihu.com/p/46132179"&gt;爬虫爬了下知乎上的神回复，已笑趴～&lt;/a&gt; 在公众号发布后，引发了大家热烈的反响 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;之前的一篇文章 &lt;a href="https://zhuanlan.zhihu.com/p/46132179"&gt;爬虫爬了下知乎上的神回复，已笑趴～&lt;/a&gt; 在公众号发布后，引发了大家热烈的反响。很多朋友觉得很神奇，在后台问强哥是怎么做到的，有的朋友还表示不太相信。其实爬取知乎神回复很简单，这篇文章 我们就来揭晓一下背后的原理。&lt;/p&gt;
&lt;p&gt;知乎神回复都有些什么特点呢？我们先来观察一下。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-57f6debdb9cf67c21ef0b544f4d8373d_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5b2beaeaeed1d6141e6b9fceb69f8b6b_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;大家看出什么规律了么？短小精辟有没有？赞同很多有没有？所以爬取知乎神回复我们只要爬取那些赞同多又字数少的回答就可以。 简单的两个步骤就能实现，第一步爬取知乎回答，第二部筛选回答。是不是很easy？&lt;/p&gt;
&lt;h4&gt;爬取知乎回答&lt;/h4&gt;
&lt;p&gt;第一步我们爬取知乎上的回答。知乎上的回答太多了，一下子爬取所有的回答会很费时，我们可以选定几个话题，爬取这几个话题里 的内容。&lt;/p&gt;
&lt;p&gt;下面的函数用于爬取某一个指定话题的内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_answers_by_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topic_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page_no&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page_no&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;topic_url&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# topic_url是这个话题对应的url&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;is_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;paging&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;is_end&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zhihu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;answers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert_many&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;saved_topics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;topic_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;topic_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;page_no&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page_no&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;is_end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;get_answers_by_page函数有两个参数，第一个参数是话题的id，第二个参数表示爬的是第几页的内容。&lt;/p&gt;
&lt;p&gt;爬下来的内容当中有几个需要注意的字段，下图中用黄框高亮出来了&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-45fd9f3c05a0ecd3544969c6068aa4f7_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这几个字段的含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;question.title - 问题的标题&lt;/li&gt;
&lt;li&gt;content - 回答的内容&lt;/li&gt;
&lt;li&gt;voteup_count - 赞同的数量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些字段在下一步筛选回答的时候会用到。&lt;/p&gt;
&lt;h4&gt;筛选回答&lt;/h4&gt;
&lt;p&gt;爬完数据后，我们来筛选一下结果。&lt;/p&gt;
&lt;p&gt;我们用MongoDB中的聚合管道对回答做筛选（关于MongoDB的聚合管道的用法可以参考&lt;a href="http://link.zhihu.com/?target=https%3A//docs.mongodb.com/manual/meta/aggregation-quick-reference/"&gt;Aggregation Pipeline Quick Reference&lt;/a&gt;），代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zhihu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;answers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$match&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;target.type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;answer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$match&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;target.voteup_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$gte&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;}}},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$addFields&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;answer_len&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$strLenCP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$target.content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$match&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;answer_len&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$lte&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;}}},&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码会筛选所有赞同大于1000、字数小于50的回答，筛选出来的结果就是短小精辟的神回复。&lt;/p&gt;
&lt;p&gt;以上是核心代码，完整代码已上传github，大家可以在【Python与数据分析】公众号后台回复“&lt;strong&gt;知乎神回复&lt;/strong&gt;”获取地址。&lt;/p&gt;
&lt;h4&gt;知乎神回复&lt;/h4&gt;
&lt;p&gt;代码写完了，我们来运行下看看。恰好昨天是程序员节，我们就来筛选一下和程序员有关的神回复。结果如下，一共75条搞笑段子。&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;作者: 夏梓耀&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/47606748/answer/106901253"&gt;码农们最常说的「谎言」有哪些？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 码农们最常说的「谎言」有哪些？
A: //TODO&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;作者: 匿名用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/34043434/answer/57826281"&gt;在 GitHub 上保持 365 天全绿是怎样一种体验？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 在 GitHub 上保持 365 天全绿是怎样一种体验？
A: 曾经保持了200多天全绿，但是冷落了女朋友，一直绿到现在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;作者: 叛逆者&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/48894278/answer/113185239"&gt;如何反驳「程序员离开电脑就是废物」这个观点？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 如何反驳「程序员离开电脑就是废物」这个观点？
A: 不不不，很多程序员在电脑前也是废物。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;作者: xlzd&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/38748367/answer/148126016"&gt;假如有一天所有的人都使用计算机语言说话，会是怎样的场景？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 假如有一天所有的人都使用计算机语言说话，会是怎样的场景？
A: hello, world.烫烫烫烫烫烫烫�d}��R�0:�v�?.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;作者: 知乎用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/48690700/answer/112221009"&gt;突然想开一家程序员主题的餐馆，名字就叫程序员的菜，菜名就叫各种语言中的关键字，各位指点一哈，有前途没？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 突然想开一家程序员主题的餐馆，名字就叫程序员的菜，菜名就叫各种语言中的关键字，各位指点一哈，有前途没？
A: 进门一个大大的 hello world 招牌菜叫“红烧产品经理” 一定会爆满的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;作者: 匿名用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/59445070/answer/345045044"&gt;编程最基本的术语 “bug” 该怎么翻译？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 编程最基本的术语 “bug” 该怎么翻译？
A: 幺蛾子，你的程序又出幺蛾子了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;作者: neksusk&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/20029839/answer/13732329"&gt;编程的乐趣是什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 编程的乐趣是什么？
A: 人的成就感来源于两样东西，创造和毁灭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;作者: 麦克灵伟&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/48894278/answer/113193764"&gt;如何反驳「程序员离开电脑就是废物」这个观点？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 如何反驳「程序员离开电脑就是废物」这个观点？
A: 老实说 跟这种女人都能聊下去 你是不是想上她？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;作者: Amb BAI&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/28056906/answer/39217410"&gt;作为程序员，你在编程时吃了哪些数学的亏？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 作为程序员，你在编程时吃了哪些数学的亏？
A: 看论文时候一个"显然"推了我一下午&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;p&gt;作者: 知乎用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/26089279/answer/32091743"&gt;土豪程序员的设备都有啥？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 土豪程序员的设备都有啥？
A: 女朋友。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;作者: 兔二&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/30313169/answer/47580934"&gt;祈求代码不出 bug 该拜哪个神仙？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 祈求代码不出 bug 该拜哪个神仙？
A: 拜雍正，专治八阿哥。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;作者: 知乎用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/37989425/answer/74424369"&gt;考上好大学学 IT 是不是当今中国穷人家孩子晋级中产唯一的出路？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 考上好大学学 IT 是不是当今中国穷人家孩子晋级中产唯一的出路？
A: 对，就4条路 写代码 搞金融 在代码圈搞金融 在金融圈写代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;p&gt;作者: Cascade&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/21400402/answer/18111520"&gt;为什么程序员无论到哪儿都喜欢背电脑包，哪怕里面没有装电脑？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么程序员无论到哪儿都喜欢背电脑包，哪怕里面没有装电脑？
A: 因为他们没有别的包。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;p&gt;作者: SErHo&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/23090743/answer/23581453"&gt;「Talk is cheap. Show me the code」怎么翻译比较好？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 「Talk is cheap. Show me the code」怎么翻译比较好？
A: 屁话少说，放码过来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;16&lt;/p&gt;
&lt;p&gt;作者: An0th3r&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/63765274/answer/214281927"&gt;为什么程序员的女朋友或老婆颜值普遍要高于男方很多？还是说程序员已经算是婚恋市场的优质股了？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么程序员的女朋友或老婆颜值普遍要高于男方很多？还是说程序员已经算是婚恋市场的优质股了？
A: 程序员女朋友颜值高，我是服的，因为随便问十个程序员他的女朋友是谁，有九个回答是新垣结衣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;17&lt;/p&gt;
&lt;p&gt;作者: fullsail&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/266816276/answer/320996324"&gt;为什么一部分人宁可买几个机械键盘换着用，也不愿意给自己敷一下面膜？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么一部分人宁可买几个机械键盘换着用，也不愿意给自己敷一下面膜？
A: 老子不靠脸吃饭。 老子的辛辛苦苦挣来的钞票。老子想怎么花就怎么花。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;p&gt;作者: 苏予&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/23396163/answer/24457537"&gt;程序员夫妻结婚戒指刻什么字好？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 程序员夫妻结婚戒指刻什么字好？
A: 0 error 0 warning&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;19&lt;/p&gt;
&lt;p&gt;作者: 苏莉安&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/25153900/answer/30206460"&gt;IT 工程师被叫「码农」时是否会不舒服？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: IT 工程师被叫「码农」时是否会不舒服？
A: 我们好歹还是人，产品和设计已经是狗了……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;20&lt;/p&gt;
&lt;p&gt;作者: 白如冰&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/23386954/answer/24420889"&gt;为什么一个销售男（30岁）会约我一个男程序员（24岁）去小区附近的星巴克？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么一个销售男（30岁）会约我一个男程序员（24岁）去小区附近的星巴克？
A: 根据哥多年的经验，他应该是有巨牛逼的idea然后只差程序员去实现了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;p&gt;作者: 随喜&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/66249920/answer/300623623"&gt;怎么找到喜欢程序员的妹子做女友？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 怎么找到喜欢程序员的妹子做女友？
A: 看缘分，知乎上这么多用户，你关注到我就是缘分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;22&lt;/p&gt;
&lt;p&gt;作者: 知乎用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/19921151/answer/13550240"&gt;程序员女朋友如何给程序员男朋友过生日？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 程序员女朋友如何给程序员男朋友过生日？
A: 告诉他，接口已经准备好了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;23&lt;/p&gt;
&lt;p&gt;作者: 程序员大叔&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/38200429/answer/75361639"&gt;作为程序员，你是如何在工作以后找到女朋友的？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 作为程序员，你是如何在工作以后找到女朋友的？
A: 题主作了这么久的程序员，还喜欢女孩子已经难能可贵了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;24&lt;/p&gt;
&lt;p&gt;作者: 某个小超&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/21333711/answer/17953891"&gt;程序员转行烧烤需要做哪些准备，有哪些优势和劣势？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 程序员转行烧烤需要做哪些准备，有哪些优势和劣势？
A: 你看，你连自己做烧烤都不知道优势劣势在哪里，所以，你还是需要一名产品经理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;25&lt;/p&gt;
&lt;p&gt;作者: Jack Ma&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/37017953/answer/70032115"&gt;哪些话可以惹火程序员？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 哪些话可以惹火程序员？
A: 路过他电脑前时说一句，呦，又在写bug呢!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;26&lt;/p&gt;
&lt;p&gt;作者: 姚冬&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/27511902/answer/36931243"&gt;我的一位老师说，Java 适用于大型软件而 C# 适用中小型软件。这是真的么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 我的一位老师说，Java 适用于大型软件而 C# 适用中小型软件。这是真的么？
A: Java有项天赋，就是能把中小型软件写成大型的。
27&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者: 大猫 链接: &lt;a href="https://www.zhihu.com/question/26025387/answer/31873025"&gt;为什么 2014 年程序员薪资那么高？&lt;/a&gt; 来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么 2014 年程序员薪资那么高？ A: 时薪又不高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;28&lt;/p&gt;
&lt;p&gt;作者: 廖雪峰&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/20082607/answer/356841938"&gt;是不是大部分程序员都在抱怨工资低？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 是不是大部分程序员都在抱怨工资低？
A: 谁、谁在抱怨工资高？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;29&lt;/p&gt;
&lt;p&gt;作者: ze ran&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/28987904/answer/42805814"&gt;单身程序狗解决了一个技术难题后没有妹子可以炫耀或夸一下自己怎么办？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 单身程序狗解决了一个技术难题后没有妹子可以炫耀或夸一下自己怎么办？
A: 现在你明白了吧，为什么那么多程序员要写技术博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;30&lt;/p&gt;
&lt;p&gt;作者: 知乎用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/23344932/answer/24308022"&gt;中国程序员是否偏爱「冲锋衣+牛仔裤+运动鞋」的衣着？如果是，为何会形成这样的潮流？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 中国程序员是否偏爱「冲锋衣+牛仔裤+运动鞋」的衣着？如果是，为何会形成这样的潮流？
A: 穿那么好看给程序看吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;31&lt;/p&gt;
&lt;p&gt;作者: 匿名用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/24429345/answer/27761796"&gt;作为 IT 从业人员，你觉得有什么工具大大提高了你的工作效率？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 作为 IT 从业人员，你觉得有什么工具大大提高了你的工作效率？
A: 单身&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;32&lt;/p&gt;
&lt;p&gt;作者: 温酒&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/267094042/answer/319107651"&gt;为什么我认为程序员似乎大多不善言辞？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么我认为程序员似乎大多不善言辞？
A: 你就当是我们情商低就好了， 这样你开心， 我们也开心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;33&lt;/p&gt;
&lt;p&gt;作者: vczh&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/19920560/answer/363981684"&gt;在中国，年龄最大的程序员不过40岁左右，请问中国的程序员未来还可以做什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 在中国，年龄最大的程序员不过40岁左右，请问中国的程序员未来还可以做什么？
A: 这跟为什么90后没人活过30岁是同一个原理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;34&lt;/p&gt;
&lt;p&gt;作者: ze ran&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/25655170/answer/31328622"&gt;如何回复程序员发来的短信：「Hello world」？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 如何回复程序员发来的短信：「Hello world」？
A: hello nerd.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;35&lt;/p&gt;
&lt;p&gt;作者: 李继刚&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/19892427/answer/13286326"&gt;怎么看出 IT 男喜欢一个女生？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 怎么看出 IT 男喜欢一个女生？
A: 当他拼着自己早已养成的寡言少语的习惯去死命的跟你套近乎的时候&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;36&lt;/p&gt;
&lt;p&gt;作者: 叛逆者&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/20662631/answer/43395016"&gt;为什么程序员不应该会修电脑？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么程序员不应该会修电脑？
A: 范冰冰需要会修电视机吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;37&lt;/p&gt;
&lt;p&gt;作者: 匿名用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/42115074/answer/93621264"&gt;同事说自己 C++ 水平全中国第一，怎么让他意识到自己没那么厉害？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 同事说自己 C++ 水平全中国第一，怎么让他意识到自己没那么厉害？
A: 实不相瞒，我也不是装逼：我的 C++ 水平全国第 0。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;38&lt;/p&gt;
&lt;p&gt;作者: 刘小脑袋&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/26470075/answer/32898565"&gt;为什么 iPhone 删软件时，所有图标都要抖？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么 iPhone 删软件时，所有图标都要抖？
A: 第三方软件是吓得，系统自带软件是嘚瑟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;39&lt;/p&gt;
&lt;p&gt;作者: AcFun弹幕视频网&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/67576286/answer/254405561"&gt;左轮手枪装有一颗子弹，对着自己头开一枪奖励10万元，两枪1亿，三枪2亿，四枪4亿，5枪16亿，值得吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 左轮手枪装有一颗子弹，对着自己头开一枪奖励10万元，两枪1亿，三枪2亿，四枪4亿，5枪16亿，值得吗？
A: 只要不打要害，我告诉你，我能打到我们A站上市！！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;40&lt;/p&gt;
&lt;p&gt;作者: 张小贱&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/25145861/answer/30202727"&gt;iPhone 处理器的性能按照现在每年翻一倍的节奏，是不是很快就能赶上甚至超过台式电脑的处理器？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: iPhone 处理器的性能按照现在每年翻一倍的节奏，是不是很快就能赶上甚至超过台式电脑的处理器？
A: 小时候我总觉得过两年我就能和大我两岁的哥哥一样大了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;41&lt;/p&gt;
&lt;p&gt;作者: 解磊&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/19631509/answer/25393717"&gt;知乎给你带来的最小限度的好处是什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 知乎给你带来的最小限度的好处是什么？
A: 消磨时间还不觉得罪恶。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;42&lt;/p&gt;
&lt;p&gt;作者: Derek Chan&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/22331607/answer/24951350"&gt;有哪些反人类的科技发明或设计？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 有哪些反人类的科技发明或设计？
A: 电脑连不上网，诊断以后它提示我要联网解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;43&lt;/p&gt;
&lt;p&gt;作者: 汪惟&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/21584213/answer/18861007"&gt;为什么设计师不愿意被称为美工？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么设计师不愿意被称为美工？
A: 只要工资开的高，叫我阿姨都行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;44&lt;/p&gt;
&lt;p&gt;作者: Mr.Robot&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/24495947/answer/28076585"&gt;为什么有人认为网易云音乐是业界良心？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么有人认为网易云音乐是业界良心？
A: 有一天突然给我推送一条消息说我要的歌词找到了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;45&lt;/p&gt;
&lt;p&gt;作者: 知乎用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/33279324/answer/56191019"&gt;为什么没有出现无人机自毁式攻击武器呢？恐怖分子用过吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么没有出现无人机自毁式攻击武器呢？恐怖分子用过吗？
A: 你是说导弹么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;46&lt;/p&gt;
&lt;p&gt;作者: 安雅&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/20051430/answer/23065827"&gt;既然思想是我的，那么为什么有时候我控制不了我的负面情绪？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 既然思想是我的，那么为什么有时候我控制不了我的负面情绪？
A: 操作系统不会允许用户访问、修改及删除核心系统文件，因为这会损坏系统，导致运行异常。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;47&lt;/p&gt;
&lt;p&gt;作者: isotone&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/40942442/answer/89479641"&gt;鲁迅虽然很牛，但在这世界十大文豪里是不是凑数的？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 鲁迅虽然很牛，但在这世界十大文豪里是不是凑数的？
A: 为什么文豪要为文盲排的榜买单？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;48&lt;/p&gt;
&lt;p&gt;作者: 念缺一Miracle&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/67992675/answer/259398868"&gt;人类的哪些科技已经接近瓶颈，很久没有重大突破了？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 人类的哪些科技已经接近瓶颈，很久没有重大突破了？
A: 烧开水&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;49&lt;/p&gt;
&lt;p&gt;作者: vczh&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/30985440/answer/50188231"&gt;如何看待某些人下载软件喜欢到官网的偏好？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 如何看待某些人下载软件喜欢到官网的偏好？
A: 同学你没中过百度全家桶吧？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;50&lt;/p&gt;
&lt;p&gt;作者: 知乎用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/29717932/answer/45915429"&gt;为什么很多人买笔记本打游戏，而不用性能更好的台式机？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么很多人买笔记本打游戏，而不用性能更好的台式机？
A: 因为买不起房子。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;51&lt;/p&gt;
&lt;p&gt;作者: DillyLiu&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/27755657/answer/37953999"&gt;第一次听好耳机对你带来的震撼有多大？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 第一次听好耳机对你带来的震撼有多大？
A: 第一次听好耳机不会给人多大震撼，但是当换回普通耳机的时候，震撼就来了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;52&lt;/p&gt;
&lt;p&gt;作者: 林灿斌&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/24503682/answer/37979707"&gt;Chrome 真的很费电吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: Chrome 真的很费电吗？
A: 不费电，我现在就在用Chrome，用到现在这么久，笔记本电量还有50%，我估讠&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;53&lt;/p&gt;
&lt;p&gt;作者: 王文瀚&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/24884517/answer/29320483"&gt;MacBook 上安装 Windows 后的使用体验如何？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: MacBook 上安装 Windows 后的使用体验如何？
A: 像突然间有了软肋，并且还失去了铠甲。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;54&lt;/p&gt;
&lt;p&gt;作者: suchsu&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/27573401/answer/37173454"&gt;家里所有有关产品都用苹果产品是一种什么体验？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 家里所有有关产品都用苹果产品是一种什么体验？
A: 来个电话全家都响了起来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;55&lt;/p&gt;
&lt;p&gt;作者: 蛋黄酱摧毁停车场&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/67264455/answer/251124814"&gt;你为什么不买 iPhone X？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 你为什么不买 iPhone X？
A: 日益增长的美好生活需要和贫穷的现实之间的矛盾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;56&lt;/p&gt;
&lt;p&gt;作者: 张鑫&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/21971889/answer/19895502"&gt;为什么有人愿意花几千元买 iPhone ，却不愿意花几十元买正版 iPhone 软件和游戏？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 为什么有人愿意花几千元买 iPhone ，却不愿意花几十元买正版 iPhone 软件和游戏？
A: 因为他们下载不到iphone&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;57&lt;/p&gt;
&lt;p&gt;作者: 苦瓜&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/29739045/answer/46795719"&gt;有什么 App 取的名字特别惊艳？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 有什么 App 取的名字特别惊艳？
A: 水表助手…是查快递的…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;58&lt;/p&gt;
&lt;p&gt;作者: 王斯塔&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/20418839/answer/88198576"&gt;你为什么要买移动硬盘？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 你为什么要买移动硬盘？
A: 条件好了也要给自己的女人们住舒适点啊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;59&lt;/p&gt;
&lt;p&gt;作者: 叛逆者&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/35339495/answer/62324107"&gt;如何用 iPad 遥控 PC 关机？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 如何用 iPad 遥控 PC 关机？
A: 瞄准pc电源键扔过去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;60&lt;/p&gt;
&lt;p&gt;作者: 知乎用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/50391841/answer/120978712"&gt;如何评价 2016 年 9 月 7 日的苹果发布会？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 如何评价 2016 年 9 月 7 日的苹果发布会？
A: 为了新MacBook Pro，半年看了三场发布会……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;61&lt;/p&gt;
&lt;p&gt;作者: 陈肖恩&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/21416623/answer/18162511"&gt;如何评价 Internet Explorer？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 如何评价 Internet Explorer？
A: 下载其他浏览器的浏览器 -----一年后----- IE8以下好烂，做前端想哭的节奏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;62&lt;/p&gt;
&lt;p&gt;作者: 知乎用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/31338218/answer/51509136"&gt;爸妈让我攒钱买房，我却想买苹果电脑怎么办？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 爸妈让我攒钱买房，我却想买苹果电脑怎么办？
A: 你要真能3年攒50万的房子,差这1万7买个电脑么,大哥?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;63&lt;/p&gt;
&lt;p&gt;作者: 温馨&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/21083505/answer/27100834"&gt;有哪些垃圾手机软件？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 有哪些垃圾手机软件？
A: 短信拦截软件！ 拦截后告诉你它拦截了一条短信。 我相信99%的人会再去点进去看一下被拦截的短信！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;64&lt;/p&gt;
&lt;p&gt;作者: Simon阿文&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/27804105/answer/38329967"&gt;一个完整的 PPT 做下来，最让你头疼的是什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 一个完整的 PPT 做下来，最让你头疼的是什么？
A: 怎样向领导隐藏自己的实力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;65&lt;/p&gt;
&lt;p&gt;作者: 孙经东&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/22093333/answer/20296027"&gt;什么是 Vim 可以做而 Emacs 做不到的？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 什么是 Vim 可以做而 Emacs 做不到的？
A: 帮助乌干达的可怜儿童……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;66&lt;/p&gt;
&lt;p&gt;作者: 王二小&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/31839209/answer/53522654"&gt;苹果用户为什么选择苹果？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 苹果用户为什么选择苹果？
A: 因为不用苹果的用户不是苹果用户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;67&lt;/p&gt;
&lt;p&gt;作者: 唐缺&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/22933777/answer/23172556"&gt;计算机世界里有哪些经典谣言？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 计算机世界里有哪些经典谣言？
A: windows正在联机寻找解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;68&lt;/p&gt;
&lt;p&gt;作者: 羽扇纶巾2010&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/20977602/answer/17242303"&gt;有线鼠标会被无线鼠标取代吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 有线鼠标会被无线鼠标取代吗？
A: 我觉得在网吧有线鼠标就不会被取代&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;69&lt;/p&gt;
&lt;p&gt;作者: 北上&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/22933777/answer/23113353"&gt;计算机世界里有哪些经典谣言？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 计算机世界里有哪些经典谣言？
A: 我已阅读并同意该条款&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;70&lt;/p&gt;
&lt;p&gt;作者: 有时右逝&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/23524157/answer/90207540"&gt;魔兽圈中有哪些搞笑的事件？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 魔兽圈中有哪些搞笑的事件？
A: 你好，我觉得我就是魔兽世界里最大的笑话……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;71&lt;/p&gt;
&lt;p&gt;作者: CCafe&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/52551550/answer/131149935"&gt;计算机系的学生都有哪些口头禅？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 计算机系的学生都有哪些口头禅？
A: 我电脑上运行的好好的啊⋯⋯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;72&lt;/p&gt;
&lt;p&gt;作者: 贝尔&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/38482487/answer/76714182"&gt;在飞机上遇到了马云该怎么聊天？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 在飞机上遇到了马云该怎么聊天？
A: Hello Jack, my name is Jackson.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;73&lt;/p&gt;
&lt;p&gt;作者: 匿名用户&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/264163101/answer/279437857"&gt;如何理解马云说八年后房如葱？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 如何理解马云说八年后房如葱？
A: 赶紧买葱啊，葱要涨价了！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;74&lt;/p&gt;
&lt;p&gt;作者: Colliot&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/26759276/answer/156706164"&gt;如何理解马云说的「把地主杀了，不等于你能富起来」这句话？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 如何理解马云说的「把地主杀了，不等于你能富起来」这句话？
A: 他的意思是「别杀我」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;75&lt;/p&gt;
&lt;p&gt;作者: justjavac&lt;/p&gt;
&lt;p&gt;链接: &lt;a href="https://www.zhihu.com/question/48491508/answer/111391437"&gt;如何看待百度在魏则西事件过去之后又悄悄的把承诺整改的广告提示颜色调淡了？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源: 知乎&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 如何看待百度在魏则西事件过去之后又悄悄的把承诺整改的广告提示颜色调淡了？
A: 请大家不要黑百度，我是做前端开发的，这是时间久了，网页CSS掉色了&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="数据分析"></category><category term="Python"></category><category term="爬虫"></category><category term="数据分析"></category></entry><entry><title>一款超酷的Linux终端工具</title><link href="http://www.shenzhongqiang.com/cool-linux-colorful-util" rel="alternate"></link><published>2018-10-28T10:20:00+08:00</published><updated>2018-10-28T10:20:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-10-28:/cool-linux-colorful-util</id><summary type="html">&lt;p&gt;今天偶然发现一款超酷的终端工具，可以让你的终端变得像彩虹一样五彩斑斓。这款工具的名字叫做lolcat，类似于&lt;code&gt;cat …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;今天偶然发现一款超酷的终端工具，可以让你的终端变得像彩虹一样五彩斑斓。这款工具的名字叫做lolcat，类似于&lt;code&gt;cat&lt;/code&gt;命令，但为&lt;code&gt;cat&lt;/code&gt;的输出添加彩虹般的效果。封面就是这个工具的help输出。&lt;/p&gt;
&lt;p&gt;mac上面安装这款工具非常简单，只需要运行下面的一行命令就行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install lolcat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ubuntu上面需要首先安装ruby，然后下载项目代码，安装gem&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install ruby
wget https://github.com/busyloop/lolcat/archive/master.zip
unzip master.zip
&lt;span class="nb"&gt;cd&lt;/span&gt; lolcat-master/bin
gem install lolcat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装完之后，我们就可以使用它了。我们来感受一下这款工具有多酷~&lt;/p&gt;
&lt;p&gt;打印帮助，运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lolcat -h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-772a2d4a17b1afb677fab3fba1b1bca5_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;显示文件内容，运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lolcat app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5d1b2b609584b3d537293e6507fcb975_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;结合figlet输出艺术字，运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;figlet I Love You &lt;span class="p"&gt;|&lt;/span&gt; lolcat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-fc05ba6cfa61d37b726f0b7c9887e8b7_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;画爱心，将下面的代码保存成heart.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Love&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 heart.py  | lolcat -p 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-21d474186e1bbf1f49662b518333acf2_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;原本黑底白字冷冰冰的爱心也变得有温度起来了。&lt;/p&gt;
&lt;p&gt;是不是很酷呢？是不是想赶紧在心仪的女生面前秀一下呢？&lt;/p&gt;
&lt;p&gt;听说转发的人都找到妹子了哦&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-12dda8504671a0d68a538551f7879026_b.jpg"&gt;&lt;/p&gt;</content><category term="Linux"></category></entry><entry><title>用数据分析选购手机</title><link href="http://www.shenzhongqiang.com/data-analysis-for-cellphone-purchase.html" rel="alternate"></link><published>2018-10-03T00:00:00+08:00</published><updated>2018-10-03T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-10-03:/data-analysis-for-cellphone-purchase.html</id><summary type="html">&lt;p&gt;9月13日发布的iPhone Xs算是手机界的大新闻了，新款iPhone的价格也再度刷新了手机定价的记录。看完发布会，相信很多人的心情是这样的 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;9月13日发布的iPhone Xs算是手机界的大新闻了，新款iPhone的价格也再度刷新了手机定价的记录。看完发布会，相信很多人的心情是这样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-1dd05a440d6c28b92e4c1c9a71d38bcb_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;强哥之前用的iPhone 6，最近准备换手机。经济形势严峻，换iPhone是换不起了，只能消费降级，投奔安卓阵营。&lt;/p&gt;
&lt;p&gt;1500元的预算，连个二手的iPhone都买不了，但是在安卓机里却有不少选择。本文我们就来看看怎样用数据分析选购手机。&lt;/p&gt;
&lt;h4&gt;分析思路&lt;/h4&gt;
&lt;p&gt;思路很简单，上京东商城把所有手机的数据爬下来，然后根据配置、价格过滤出符合条件的手机，在过滤出来的手机里选择一部性价比最高的。画成流程图，大致是这样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-ba3498aaf932d94719cc8a1fdca92c31_b.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;爬取数据&lt;/h4&gt;
&lt;p&gt;第一步，我们先从京东商城爬取所有在售的手机数据。这里我们关心的主要是价格和配置信息，商品页面上的价格和配置信息像下面两张图所示&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-10cd0c6a1a477d6aee0efa887eef2f59_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c03ba922bb48675d36c77f2ce5f3a491_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我们编写代码爬取所有手机的价格和配置信息，爬虫的核心代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 获取手机单品的价格&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skuid&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://c0.3.cn/stock?skuId=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;amp;area=1_72_4137_0&amp;amp;venderId=1000004123&amp;amp;cat=9987,653,655&amp;amp;buyNum=1&amp;amp;choseSuitSkuIds=&amp;amp;extraParam={&lt;/span&gt;&lt;span class="si"&gt;%22o&lt;/span&gt;&lt;span class="s2"&gt;riginid%22:&lt;/span&gt;&lt;span class="si"&gt;%221%&lt;/span&gt;&lt;span class="s2"&gt;22}&amp;amp;ch=1&amp;amp;fqsp=0&amp;amp;pduid=15379228074621272760279&amp;amp;pdpin=&amp;amp;detailedAdd=null&amp;amp;callback=jQuery3285040&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GBK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;matched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jQuery\d+\((.*)\)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jdPrice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# 获取手机的配置信息&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//div[@class=&amp;quot;Ptable&amp;quot;]/div[@class=&amp;quot;Ptable-item&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;skuid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;skuid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./dl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;text_node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text_nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;text_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;text_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dd&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
                &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;

&lt;span class="c1"&gt;# 获取一个页面中的所有手机信息&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_cellphone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://list.jd.com/list.html?cat=9987,653,655&amp;amp;page={}&amp;amp;sort=sort_rank_asc&amp;amp;trans=1&amp;amp;JL=6_0_0&amp;amp;ms=4#J_main&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cell_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//div[@class=&amp;quot;p-img&amp;quot;]/a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cell_nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;item_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fix_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;matched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;item.jd.com/(\d+)\.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;skuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;skuid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;skuid&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;saved&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 结果存入MongoDB&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意的是，上面的get_price和get_item函数分别从两个url获取数据，这是因为配置信息可以直接从商品页面中解析得到，而价格信息需要从另外一个ajax请求里获得。爬下来的所有数据存入MongoDB。&lt;/p&gt;
&lt;h4&gt;过滤数据&lt;/h4&gt;
&lt;p&gt;爬下来的手机数据当中，信息完整的共有4700多条数据，这4700多部手机属于70个手机品牌。 这些品牌画成词云图是这样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-cf40a63ec3cd7015fa3c1f62ac40eda7_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;手机的配置主要有以下这些参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否双卡双待&lt;/li&gt;
&lt;li&gt;机身材质&lt;/li&gt;
&lt;li&gt;CPU型号&lt;/li&gt;
&lt;li&gt;内存大小&lt;/li&gt;
&lt;li&gt;存储容量&lt;/li&gt;
&lt;li&gt;电池容量&lt;/li&gt;
&lt;li&gt;屏幕材质&lt;/li&gt;
&lt;li&gt;屏幕大小&lt;/li&gt;
&lt;li&gt;分辨率&lt;/li&gt;
&lt;li&gt;摄像头&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强哥平时用手机主要是看看书、刷刷知乎微信、买买东西，所以选购新手机的时候最关心的就是速度、容量、待机时间这几项，对摄像头、屏幕材质倒不是特别在乎。考虑以上因素，在对数据做过滤的时候，我设定了以下几个条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU的品牌是高通&lt;/li&gt;
&lt;li&gt;内存大小大于等于6GB&lt;/li&gt;
&lt;li&gt;存储容量大于等于64GB &lt;/li&gt;
&lt;li&gt;电池容量大于3000mAh&lt;/li&gt;
&lt;li&gt;必须是双卡双待&lt;/li&gt;
&lt;li&gt;价格在1500元以内&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;过滤数据的代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preprocess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df_res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu_brand&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;骁龙（Snapdragon)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;battery_cap&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rom&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ram&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dual_sim&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;1500&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_res&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;brand&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;model&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cpu_brand&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cpu_freq&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cpu_core&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cpu_model&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ram&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;battery_cap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先从MongoDB里读取数据，然后创建DataFrame，对DataFrame里的数据按照上面的条件作选择。代码的最后一行将筛选出来的手机打印出来，并按价格从低到高排序。&lt;/p&gt;
&lt;p&gt;经过了这样一轮筛选后，我们得到了下面的38款手机&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-713e2ad330ddab5afac16f4485729842_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;上面的几部手机配置都比较接近，但是网上对小米的评价普遍比较高，于是又在上面的列表里筛选出了所有的小米手机，得到下面7款&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-22c121e96e6fac877fd939534850636f_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这里就变成了红米Note5和小米6X的PK了。价格上，两者不差上下。配置方面，网上查到红米Note5的cpu是骁龙636的（上面的表格里缺少红米Note5的cpu型号），相比小米6X的骁龙660，636虽然性能上不如660，但更省电，而且考虑到红米Note5 4000毫安的超大容量电池，最后决定了购买红米Note 5这一款。作为一款千元机，骁龙636八核CPU、6G大内存、64G大存储、5.99英寸大视野全面屏、前置相机+后置双摄、超长的待机时间，这款手机大概算是千元机中的机皇了。&lt;/p&gt;
&lt;p&gt;所有代码已上传github，公众号【Python与数据分析】后台回复“选购手机”可获取地址。&lt;/p&gt;</content><category term="数据分析"></category><category term="Python"></category><category term="数据分析"></category></entry><entry><title>用Python生成马赛克画</title><link href="http://www.shenzhongqiang.com/python-create-mosaic-painting.html" rel="alternate"></link><published>2018-09-12T00:00:00+08:00</published><updated>2018-09-12T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-09-12:/python-create-mosaic-painting.html</id><summary type="html">&lt;p&gt;大家知道马赛克画是什么吗？不是动作片里的马赛克哦~~&lt;/p&gt;
&lt;p&gt;马赛克画是一张由小图拼成的大图，本文的封面就是我们的效果图，放大看细节 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;大家知道马赛克画是什么吗？不是动作片里的马赛克哦~~&lt;/p&gt;
&lt;p&gt;马赛克画是一张由小图拼成的大图，本文的封面就是我们的效果图，放大看细节，每一块都是一张独立的图片，拼在一起组成一张大图，感觉像是用马赛克拼出来的画，所以叫马赛克画。看到网上的一些马赛克画觉得很酷，于是自己用Python实现了一下将一张原图转换成马赛克画。&lt;/p&gt;
&lt;p&gt;封面的原图是这样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-02d2a072293c25d903646202c30e8410_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;实现的具体思路是这样&lt;/p&gt;
&lt;p&gt;第一步：首先收集一组图片，这些图片会作为大图中的小方格图片。图片越多，最后生成的图片颜色越接近。&lt;/p&gt;
&lt;p&gt;第二步：将要转换的图片分割成一个一个小方格图片，像下面这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-13616576364baef8063e962f9cb8ae6e_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;第三步：对于每一个小方格图片，取图片集里面最接近的图片替换。所有小方格都替换后，就生成了我们最终的马赛克画。&lt;/p&gt;
&lt;p&gt;听上去是不是很简单？&lt;/p&gt;
&lt;p&gt;我们来看一下具体的实现步骤，下面是一些核心代码。完整代码可在公众号【Python与数据分析】后台回复“mosaic”获取。&lt;/p&gt;
&lt;p&gt;我们的图片集存在images目录下，下面的代码加载目录下所有的图片，并缩放成统一的尺寸&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tqdm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;

&lt;span class="n"&gt;IMG_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;images&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_all_images&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile_row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tile_col&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;img_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IMG_DIR&lt;/span&gt;
    &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tile_row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tile_col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;error with {} - {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里load_all_images函数的参数就是统一后的尺寸，tile_row和tile_col分别对应高和宽。&lt;/p&gt;
&lt;p&gt;下面的代码对要转换的图片进行分割&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tile_row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tile_col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_tile_row_col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img_shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;tile_row&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img_shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;tile_col&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;roi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;tile_row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;tile_col&lt;/span&gt;&lt;span class="p"&gt;,:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们将要转换的图片分割成一个个小方格，tile_row和tile_col是小方格的高和宽，roi存取小方格中的图片数据。&lt;/p&gt;
&lt;p&gt;下面是计算两张图片相似度的函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.spatial.distance&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;euclidean&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;img_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;im2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;im1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;im2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shapes are different {} {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;im2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;euclidean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;array2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;im1和im2是两张图片的数据，图片数据是一个三维的numpy数组，这里我们将三维数组转换成一维数组后，比较两者的欧式距离。之后要找出最相似的图片，只需遍历图片集中所有的图片，找到距离最短的那张图片，去替换原图中的小方格就可以了。&lt;/p&gt;
&lt;p&gt;我们再来看一下最终实现的效果&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-97cb4cfc307a40b0121560e6f1de3dcd_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;放大图中局部的细节如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c4506d984d721fb8cfbd9f502911d36d_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;如果对图片的画质不满意，想要更精细的画质，可以考虑在分割的时候把图片分割成更小的方格，不过这样也会增加程序运行的时间。&lt;/p&gt;
&lt;p&gt;生成图片的过程比较耗时，考虑到性能原因，原程序中使用多进程的方式并行处理。&lt;/p&gt;
&lt;p&gt;完整代码已上传github，公众号【Python与数据分析】后台回复“mosaic”可获取地址。&lt;/p&gt;</content><category term="图像处理"></category><category term="Python"></category><category term="图像处理"></category></entry><entry><title>Python告诉你上海有哪些高性价比的西餐厅</title><link href="http://www.shenzhongqiang.com/python-shanghai-best-western-restaurants.html" rel="alternate"></link><published>2018-08-29T00:00:00+08:00</published><updated>2018-08-29T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-08-29:/python-shanghai-best-western-restaurants.html</id><summary type="html">&lt;p&gt;七夕节就要到了，我们用Python爬了下点评上所有上海的西餐厅，看看上海都有哪些高性价比的西餐厅。&lt;/p&gt;
&lt;p&gt;爬虫的原理不多说了，很简单 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;七夕节就要到了，我们用Python爬了下点评上所有上海的西餐厅，看看上海都有哪些高性价比的西餐厅。&lt;/p&gt;
&lt;p&gt;爬虫的原理不多说了，很简单，按行政区爬取每个区的西餐厅，存入数据库。需要代码的同学可以在公众号【&lt;strong&gt;Python与数据分析&lt;/strong&gt;】后台回复“西餐厅”获取代码地址。&lt;/p&gt;
&lt;h4&gt;餐厅综合评分&lt;/h4&gt;
&lt;p&gt;在展现数据前，我们先介绍一下我们的餐厅综合评分。&lt;/p&gt;
&lt;p&gt;点评上对每家餐厅的评分有口味、环境和服务三项，如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c5274378fae66e576bdce8c7187d16d5_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我们综合这三项算出一个评分，作为对这家餐厅的综合评分，计算公式如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.zhihu.com/equation?tex=%E7%BB%BC%E5%90%88%E8%AF%84%E5%88%86+%3D+3+%5Cdiv+%281%5Cdiv%E5%8F%A3%E5%91%B3%E8%AF%84%E5%88%86%2B1%5Cdiv%E7%8E%AF%E5%A2%83%E8%AF%84%E5%88%86%2B1%5Cdiv%E6%9C%8D%E5%8A%A1%E8%AF%84%E5%88%86%29"&gt; &lt;/p&gt;
&lt;h4&gt;餐厅数据分析&lt;/h4&gt;
&lt;p&gt;我们共爬取了5000多家西餐厅，西餐厅的人均消费从10元到5000+不等，下图是不同价位的餐厅数量分布情况&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-97f7263fdec129ae4179aee8767157bd_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到，人均消费越低的餐厅数量越多，越是贵的餐厅数量越少。&lt;/p&gt;
&lt;p&gt;餐厅综合评分的分布情况如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-362b6ec98fd0812a5a91d07514caf13a_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;上图呈现偏态分布。放大图片可以看到，大部分餐厅的评分在7.8~8.6之间。&lt;/p&gt;
&lt;p&gt;我们来看看土豪们都去哪些餐厅。下图是上海最贵的10家西餐厅&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-26a689af464583bf26e806da1a054ec3_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;每一家的人均消费都在1000以上，最贵的一家更是超过了5000，果然贫穷限制了我的想象，土豪去的餐厅我们普通工薪阶层消费不起啊~&lt;/p&gt;
&lt;p&gt;上面的餐厅我们就过过眼瘾吧，我们来看看有哪些综合评分高，但价位又适中的餐厅。我们选取了综合评分8.8分以上，人均消费在200-300之间的餐厅，如下（排名按综合评分从高到低）&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/98286435"&gt; 双立人美食学院 ZWILLING GOURMET SCHOOL &lt;/a&gt;, 人均: 258, 综合评分: 9.30&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/67138913"&gt; Sky Restaurant &amp;amp; Lounge &lt;/a&gt;, 人均: 251, 综合评分: 9.20&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/103629748"&gt; TR TERRA ROSSA(中海环宇荟店) &lt;/a&gt;, 人均: 285, 综合评分: 9.20&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/73553342"&gt; esee LOUNGE &amp;amp; BAR &lt;/a&gt;, 人均: 291, 综合评分: 9.20&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/102282960"&gt; MOSSO音乐酒吧（live house）(长乐路店) &lt;/a&gt;, 人均: 220, 综合评分: 9.13&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/4227815"&gt; SISTERS BAR &amp;amp; RESTAURANT &lt;/a&gt;, 人均: 241, 综合评分: 9.10&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/76854134"&gt; DATING达庭西餐厅 &lt;/a&gt;, 人均: 202, 综合评分: 9.10&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/18982841"&gt; Crazy Oyster House &lt;/a&gt;, 人均: 281, 综合评分: 9.10&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/67556261"&gt; 碳匠音乐餐厅酒吧 &lt;/a&gt;, 人均: 275, 综合评分: 9.06&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/93473032"&gt; 泥土的味道Gout de Terroir &lt;/a&gt;, 人均: 211, 综合评分: 9.06&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/21341829"&gt; La casetta意式私家厨房(南京西路店) &lt;/a&gt;, 人均: 269, 综合评分: 9.03&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/97732766"&gt; C&amp;amp;R &lt;/a&gt;, 人均: 242, 综合评分: 9.03&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/37942497"&gt; JSTONE.ITALIAN KITCHEN&amp;amp;BAR(襄阳公园店) &lt;/a&gt;, 人均: 240, 综合评分: 9.03&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/96401331"&gt; Entrecôte法国牛扒馆 &lt;/a&gt;, 人均: 234, 综合评分: 9.03&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/8866486"&gt; Efes Turkish &amp;amp; Mediterranean Cuisine 艾菲斯餐厅 &lt;/a&gt;, 人均: 211, 综合评分: 9.00&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/9071330"&gt; Babbo &lt;/a&gt;, 人均: 204, 综合评分: 9.00&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/1926859"&gt; 夏朵花园 &lt;/a&gt;, 人均: 262, 综合评分: 9.00&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/95931702"&gt; 远方北纬30度餐厅Horizone Restaurant &lt;/a&gt;, 人均: 224, 综合评分: 9.00&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/17683780"&gt; Porto Matto意大利餐厅 &lt;/a&gt;, 人均: 259, 综合评分: 8.97&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/69448371"&gt; CHEF PAPA(协信星光店) &lt;/a&gt;, 人均: 211, 综合评分: 8.97&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/21343952"&gt; DIONNE红酒西餐厅(天钥桥路店) &lt;/a&gt;, 人均: 293, 综合评分: 8.96&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/77218611"&gt; Brownstone Tapas &amp;amp; Lounge布朗石西班牙餐厅酒吧(陆家嘴店) &lt;/a&gt;, 人均: 258, 综合评分: 8.96&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/93747240"&gt; DE CARBON BAR烤肉匠 &lt;/a&gt;, 人均: 213, 综合评分: 8.96&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/18338823"&gt; 凤凰西餐吧Phoenix Restaurant&amp;amp;Bar &lt;/a&gt;, 人均: 208, 综合评分: 8.96&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/22303119"&gt; Ermans Kitchen 珥玛厨房 &lt;/a&gt;, 人均: 233, 综合评分: 8.96&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/18021257"&gt; Mayita小玛雅墨西哥餐厅 &lt;/a&gt;, 人均: 217, 综合评分: 8.96&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/94309318"&gt; CommBiz康睦社 &lt;/a&gt;, 人均: 220, 综合评分: 8.96&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/72556891"&gt; 衡山99 Francis &lt;/a&gt;, 人均: 274, 综合评分: 8.95&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/69482454"&gt; 弗兰克牛排馆 Ribone steakhouse(外滩店) &lt;/a&gt;, 人均: 284, 综合评分: 8.93&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/20877970"&gt; husk restaurant &lt;/a&gt;, 人均: 255, 综合评分: 8.93&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/4599475"&gt; Brownstone Tapas &amp;amp; Lounge布朗石西班牙餐厅酒吧(永嘉庭店) &lt;/a&gt;, 人均: 246, 综合评分: 8.93&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/2713810"&gt; MAYA玛雅墨西哥餐厅(四方新城店) &lt;/a&gt;, 人均: 231, 综合评分: 8.93&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/3994102"&gt; 阿尔贝鲁西班牙餐厅 &lt;/a&gt;, 人均: 298, 综合评分: 8.93&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/97297788"&gt; loving Vincent-创意西餐(尚悦湾店) &lt;/a&gt;, 人均: 208, 综合评分: 8.89&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/96027466"&gt; Light &amp;amp; Salt Backstage 光与盐(南京东路店) &lt;/a&gt;, 人均: 292, 综合评分: 8.89&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/69623000"&gt; SILEX &lt;/a&gt;, 人均: 265, 综合评分: 8.89&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/22415791"&gt; La Cabane &lt;/a&gt;, 人均: 221, 综合评分: 8.87&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/21725401"&gt; Host Wine&amp;amp;Kitchen(Antoni) &lt;/a&gt;, 人均: 234, 综合评分: 8.87&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/91599682"&gt; LETS BURGER&amp;amp;LOBSTER(兴业太古汇店) &lt;/a&gt;, 人均: 201, 综合评分: 8.86&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/66866544"&gt; 味可思精品肉类体验馆 &lt;/a&gt;, 人均: 260, 综合评分: 8.86&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/19428889"&gt; 拉蒂娜Latina巴西烧烤音乐餐厅(铜仁路店) &lt;/a&gt;, 人均: 208, 综合评分: 8.86&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/27525052"&gt; Yasmine's 茉莉西餐厅(襄阳店) &lt;/a&gt;, 人均: 202, 综合评分: 8.83&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//www.dianping.com/shop/95914018"&gt; 煌庭LAVIDA &lt;/a&gt;, 人均: 206, 综合评分: 8.82&lt;/p&gt;
&lt;p&gt;上面共43家餐厅。点开链接可以跳转到点评的餐厅主页，可以看到，点评上这几家在口味、环境、服务方面的评价都不错，性价比很高。上海性价比最高的适合约会的餐厅基本都在这里了。&lt;/p&gt;
&lt;p&gt;明天就是七夕了，七夕节还没有安排的，妹子还没追到手的，强哥只能帮你到这儿了~&lt;/p&gt;
&lt;p&gt;最后祝大家七夕节快乐：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-07dac14a2279972e16cda140648e4cb9_r.jpg"&gt;&lt;/p&gt;</content><category term="数据分析"></category><category term="Python"></category><category term="数据分析"></category><category term="爬虫"></category></entry><entry><title>用Python识别验证码</title><link href="http://www.shenzhongqiang.com/python-captcha-recognition.html" rel="alternate"></link><published>2018-08-28T00:00:00+08:00</published><updated>2018-08-28T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-08-28:/python-captcha-recognition.html</id><summary type="html">&lt;p&gt;很多网站登录都需要输入验证码，如果要实现自动登录就不可避免的要识别验证码。最近学习了一下图像处理相关的知识，并用Python实现了基于KNN的验证码识别。&lt;/p&gt;
&lt;h4&gt;准备工作 …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;很多网站登录都需要输入验证码，如果要实现自动登录就不可避免的要识别验证码。最近学习了一下图像处理相关的知识，并用Python实现了基于KNN的验证码识别。&lt;/p&gt;
&lt;h4&gt;准备工作&lt;/h4&gt;
&lt;p&gt;这里我们使用opencv做图像处理，所以需要安装下面两个库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install opencv-python
pip3 install numpy
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;识别原理&lt;/h4&gt;
&lt;p&gt;我们采取一种有监督式学习的方法来识别验证码，包含以下几个步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;图片处理 - 对图片进行降噪、二值化处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;切割图片 - 将图片切割成单个字符并保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;人工标注 - 对切割的字符图片进行人工标注，作为训练集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;训练数据 - 用KNN算法训练数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;检测结果 - 用上一步的训练结果识别新的验证码 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面我们来逐一介绍一下每一步的过程，并给出具体的代码实现。&lt;/p&gt;
&lt;h4&gt;图片处理&lt;/h4&gt;
&lt;p&gt;先来看一下我们要识别的验证码是长什么样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-31446645e951c0e68abd7d7d14fa430d_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到，字符做了一些扭曲变换。仔细观察，还可以发现图片中间的部分添加了一些颗粒化的噪声。&lt;/p&gt;
&lt;p&gt;我们先读入图片，并将图片转成灰度图，代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt;

&lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;im_gray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cvtColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COLOR_BGR2GRAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;经过上面的处理，我们的彩色图片变成了下面这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-6d3eddb56a9bc41f46c94d94b01260a8_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;将图片做二值化处理，代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;im_inv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im_gray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;THRESH_BINARY_INV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;127是我们设定的阈值，像素值大于127被置成了0，小于127的被置成了255。处理后的图片变成了这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-751db8147c0fa40b3b84952a95259e28_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们应用高斯模糊对图片进行降噪。高斯模糊的本质是用高斯核和图像做卷积，代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;im_blur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im_inv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;降噪后的图片如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5c7452974f157b5ac236881585ac7c1d_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到一些颗粒化的噪声被平滑掉了。&lt;/p&gt;
&lt;p&gt;降噪后，我们对图片再做一轮二值化处理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;im_res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im_blur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;THRESH_BINARY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在图片变成了这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-f999fac3774088ffa885e04195e0a454_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;好了，接下来，我们要开始切割图片了。&lt;/p&gt;
&lt;h4&gt;切割图片&lt;/h4&gt;
&lt;p&gt;这一步是所有步骤里最复杂的一步。我们的目标是把最开始的图片切割成单个字符，并把每个字符保存成如下的灰度图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-d0cdb5294de1759d683eeedb622f6b7a_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;首先我们用opencv的findContours来提取轮廓&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;im2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hierarchy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findContours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im_res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETR_EXTERNAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHAIN_APPROX_SIMPLE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们把提取的轮廓用矩形框起来，画出来是这样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-7f07b7d2aa8d803471f52664dd05fbab_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到，每个字符都被检测出来了。&lt;/p&gt;
&lt;p&gt;但这只是理想情况，很多时候，相邻字符有粘连的会被识别成同一个字符，比如像下面的情况&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-cd3b9e91630784bba2ef3157b08e0cac_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;要处理这种情况，我们就要对上面的图片做进一步的分割。字符粘连会有下面几种情况，我们逐一来看下该怎么处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4个字符被识别成3个字符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-cd3b9e91630784bba2ef3157b08e0cac_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这种情况，对粘连的字符轮廓，从中间进行分割，代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;contour&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boundingRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;w_max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# w_max是所有contonur的宽度中最宽的值&lt;/span&gt;
        &lt;span class="n"&gt;box_left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="n"&gt;box_right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box_left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box_right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分割后，图片变成了这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-babc84a88f37da47da7159ae22e34f31_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4个字符被识别成2个字符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4个字符被识别成2个字符有下面两种情况&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-187e74d0a8d8b5414aaa934fd7054284_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-15879049649299892e61f0971a28a38b_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;对第一种情况，对于左右两个轮廓，从中间分割即可。对第二种情况，将包含了3个字符的轮廓在水平方向上三等分。具体代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;contour&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boundingRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;w_max&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;w_max&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;w_min&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# 如果两个轮廓一个是另一个的宽度的2倍以上，我们认为这个轮廓就是包含3个字符的轮廓&lt;/span&gt;
        &lt;span class="n"&gt;box_left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="n"&gt;box_mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="n"&gt;box_right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box_left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box_mid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box_right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;w_max&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;w_min&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# 如果两个轮廓，较宽的宽度小于较窄的2倍，我们认为这是两个包含2个字符的轮廓&lt;/span&gt;
        &lt;span class="n"&gt;box_left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="n"&gt;box_right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box_left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box_right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分割后的图片如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-578701cc257689d14fe84f6fb9df2d62_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5e04eea87da684bf2481e50d7fb6e048_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4个字符被识别成1个字符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-271af704e06dc806b026d985d080c5c1_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这种情况对轮廓在水平方向上做4等分即可，代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;contour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boundingRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;box0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;box1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;box2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;box3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int0&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;box0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;box1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;box2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;box3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分割后的图片如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-15ff4149212238374a65663cc43a6c0d_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;对图片分割完成后，我们将分割后的单个字符的图片存成不同的图片文件，以便下一步做人工标注。存取字符图片的代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawContours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;roi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im_res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="n"&gt;roistd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 将字符图片统一调整为30x30的图片大小&lt;/span&gt;
    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1e6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 为防止文件重名，使用时间戳命名文件名&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{}.jpg&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;char&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;roistd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;字符图片保存在名为char的目录下面，这个目录里的文件大致是长这样的（文件名用时间戳命名，确保不会重名）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-afa4bb501db945b1277d14accde00ed7_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们开始标注数据。&lt;/p&gt;
&lt;h4&gt;人工标注&lt;/h4&gt;
&lt;p&gt;这一步是所有步骤里最耗费体力的一步了。为节省时间，我们在程序里依次打开char目录中的每张图片，键盘输入字符名，程序读取键盘输入并将字符名保存在文件名里。代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;char&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;filename_ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;patt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;label/{}_*&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename_ts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;saved_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;saved_num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{} done&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;char&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filename_ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;outfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{}_{}.jpg&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename_ts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;outpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里一共标注了大概800张字符图片，标注的结果存在名为label的目录下，目录下的文件是这样的（文件名由原文件名+标注名组成）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-10d64f3d3f320fdf79896efa4a30a85d_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们开始训练数据。&lt;/p&gt;
&lt;h4&gt;训练数据&lt;/h4&gt;
&lt;p&gt;首先，我们从label目录中加载已标注的数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;samples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IMREAD_GRAYSCALE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;samples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;samples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;unique_labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;unique_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique_labels&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;label_id_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique_labels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique_ids&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;id_label_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique_ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique_labels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;label_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;label_id_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;label_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来，训练我们的模型&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KNearest_create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ROW_SAMPLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;训练完，我们用这个模型来识别一下新的验证码。&lt;/p&gt;
&lt;h4&gt;检测结果&lt;/h4&gt;
&lt;p&gt;下面是我们要识别的验证码&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-bc9650c5fa46140d9a8eb1661e07ccc7_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;对于每一个要识别的验证码，我们都需要对图片做降噪、二值化、分割的处理（代码和上面的一样，这里不再重复）。假设处理后的图片存在变量im_res中，分割后的字符的轮廓信息存在变量boxes中，识别验证码的代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;boxes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;roi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im_res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="n"&gt;roistd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;roistd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neighbours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findNearest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;label_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id_label_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;label_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行上面的代码，可以看到程序输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;y
y
4
e
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;图片中的验证码被成功地识别出来。&lt;/p&gt;
&lt;p&gt;我们测试了下识别的准确率，取100张验证码图片（存在test目录下）进行识别，识别的准确率约为82%。看到有人说用神经网络识别验证码，准确率可以达到90%以上，下次有机会可以尝试一下。&lt;/p&gt;
&lt;p&gt;完整代码已上传github：&lt;a href="http://link.zhihu.com/?target=https%3A//github.com/pythonml/captacha"&gt;pythonml/captacha&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;所有训练数据、测试数据、已标注图片都已上传百度网盘，公众号【&lt;strong&gt;Python与数据分析&lt;/strong&gt;】后台回复“验证码”可获取网盘地址。&lt;/p&gt;</content><category term="图像处理"></category><category term="Python"></category><category term="图像处理"></category></entry><entry><title>Python爬虫告诉你北京房价有多高</title><link href="http://www.shenzhongqiang.com/python-beijing-house-price.html" rel="alternate"></link><published>2018-08-16T00:00:00+08:00</published><updated>2018-08-16T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-08-16:/python-beijing-house-price.html</id><summary type="html">&lt;p&gt;这篇是之前一篇&lt;a href="https://zhuanlan.zhihu.com/p/40293278"&gt;Python爬虫告诉你上海房价有多高&lt;/a&gt;的姐弟篇，这一篇我们来分析分析首都北京的房价。&lt;/p&gt;
&lt;p&gt;贝壳上北京的在售房源共有 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;这篇是之前一篇&lt;a href="https://zhuanlan.zhihu.com/p/40293278"&gt;Python爬虫告诉你上海房价有多高&lt;/a&gt;的姐弟篇，这一篇我们来分析分析首都北京的房价。&lt;/p&gt;
&lt;p&gt;贝壳上北京的在售房源共有&lt;strong&gt;54107&lt;/strong&gt;套，平均售价&lt;strong&gt;677万&lt;/strong&gt;/套，平均单价&lt;strong&gt;66568元&lt;/strong&gt;/平方，平均房龄&lt;strong&gt;16.6&lt;/strong&gt;年。&lt;/p&gt;
&lt;p&gt;北京各区的房源分布如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-1592e5ee5a424cf9a3123d434e634342_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;每个区的均价如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-335fa6fcecc1f84f419877a2c65f050f_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;东城、西城、海淀、朝阳、石景山、丰台六区属于北京的主城区，其他属于远郊。主城区里以西城的房价最贵，单价超过了10万/平米。西城区内有很多风景名胜，有著名的月坛公园、恭王府、什刹海、北海公园等，被誉为中国华尔街的金融街也位于西城区内。&lt;/p&gt;
&lt;p&gt;北京最贵的10个板块的单价如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-35591a617a36039e1e538deec23d45d4_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;北京单价最高的十大小区如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e583210429734140c69b5fdf0a778797_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到，单价最贵的板块和小区大多位于西城和东城两区内。十大单价最高的小区中，排名前三的都在金融街，金融街也成了黄金城区中的黄金地块。&lt;/p&gt;
&lt;p&gt;北京面积最大的在售房源如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e4633b22881b1bf54d49583314517854_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;比较有意思的是，北京的豪宅都出奇的大，最大的一套面积居然有2500多平米，相当于6个篮球场的大小，大家想象一下~&lt;/p&gt;
&lt;p&gt;北京最贵的十大豪宅如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-d58f64fdaf98c01bbff25171a19d12db_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;最贵的豪宅售价1.25亿，相比上海最贵的豪宅便宜了不少。上面的表格里可以看到，北京的顶级豪宅很多都位于海淀区内，海淀区历来为皇家风水宝地，自然环境优越，人文氛围浓厚，古代一直作为中国皇家行宫之所在，著名的圆明园、颐和园都位于海淀区内。豪宅开发商选址海淀区也是看中这里人文、历史、环境俱佳的居住区域。&lt;/p&gt;
&lt;p&gt;我们选取十大豪宅中的一套，来欣赏一下豪宅的内部结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5a4543158ff90e4cbbb1a45b57f3ddb8_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-3846d0b431acbab6e43ad491f53e20b7_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-313d1c38402cad2959216c98be26eee7_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-92167f7ce4f16d355750928f90adbd99_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c2c55173961664c016ad76b5efef978f_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a7270387d9fd44e654476afb93fbda39_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-9705b974356f93669532818b203e8c04_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-66305b704daf1d5b26f3f16f4a125102_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-b295f3a21819cf3e3eea7c4f76609885_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-394dc9c45758ac2cc62936082864aee0_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-1c8c7ee7e4fad7cafd88969b72a9c1c6_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;以上只是部分照片，这套面积接近900平米，有乒乓桌、儿童乐园、储存室、麻将室、办公室、会议室、各种大大小小的卧室，功能齐全，应有尽有。大家感受一下~&lt;/p&gt;
&lt;p&gt;前面两篇分别介绍了上海和深圳的房价，两篇的地址在这里：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zhuanlan.zhihu.com/p/40293278"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zhuanlan.zhihu.com/p/41694635"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比较北上深的房价，可以发现&lt;strong&gt;北京不论在平均单价还是套均总价上都比上海深圳高出了不少&lt;/strong&gt;。豪宅方面，每个城市都有每个城市的特点，&lt;strong&gt;上海的特点在于贵，深圳的特点在于精致，北京的特点在于大&lt;/strong&gt;。&lt;/p&gt;</content><category term="数据分析"></category><category term="Python"></category><category term="爬虫"></category><category term="数据分析"></category></entry><entry><title>Python爬虫告诉你深圳房价有多高</title><link href="http://www.shenzhongqiang.com/python-shenzhen-house-price.html" rel="alternate"></link><published>2018-08-10T00:00:00+08:00</published><updated>2018-08-10T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-08-10:/python-shenzhen-house-price.html</id><summary type="html">&lt;p&gt;这一篇是前一篇&lt;a href="https://zhuanlan.zhihu.com/p/40293278"&gt;Python爬虫告诉你上海房价有多高&lt;/a&gt;的姐妹篇，这一篇我们来看一看中国最具活力的城市&lt;strong&gt;深圳 …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;这一篇是前一篇&lt;a href="https://zhuanlan.zhihu.com/p/40293278"&gt;Python爬虫告诉你上海房价有多高&lt;/a&gt;的姐妹篇，这一篇我们来看一看中国最具活力的城市&lt;strong&gt;深圳&lt;/strong&gt;的房价。爬虫原理类似，我们直接分享数据。&lt;/p&gt;
&lt;p&gt;贝壳上，深圳的在售房源共有&lt;strong&gt;26822&lt;/strong&gt;套，在售房源的平均售价是&lt;strong&gt;530万&lt;/strong&gt;/套，平均单价是&lt;strong&gt;57436元&lt;/strong&gt;/平米，平均房龄&lt;strong&gt;12.7&lt;/strong&gt;年。&lt;/p&gt;
&lt;p&gt;深圳各区县的房源数量分布如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-3574bcd44d86d6408649846aa4a3c559_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;每个区的均价如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-aa4656316001151975bcf4f504f450d3_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;所有的区里，南山和福田的单价最高。福田、南山、罗湖、盐田四个区俗称关内，我们所说的深圳经济特区就是指关内，其余的六个区是关外，不属于深圳经济特区。可以看到，关内的整体房价明显高于关外。&lt;/p&gt;
&lt;p&gt;下面是深圳最贵的十大板块&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-97998be02fb0bfb289dcf3ff1a1be0c8_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;下面是深圳最贵的10大小区&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-83bf764f96b5d584cfa0aafb03a2c2fe_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到，最贵的板块和最贵的小区大多集中在关内的南山和福田两个区，这两个区也是深圳单价最高的两个区。&lt;/p&gt;
&lt;p&gt;下面是深圳10大面积最大的在售房源&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-4347b51216b7a144743dbc915a897923_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这些豪宅的面积都在400平米以上，房型都在6室以上。&lt;/p&gt;
&lt;p&gt;下面是总价前10的顶级豪宅&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a984e5e39b05645d2dd89045969425ee_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;豪宅也大多簇拥在南山和福田两区，最贵的豪宅达到1个亿。&lt;/p&gt;
&lt;p&gt;我们来看一下排名第二的豪宅所在的中信红树湾的小区环境&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a0373bedfa707b4ad0d5a98d6d0eae6c_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e105bf3a57a286ac97ae565d7bd4908f_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-432a0fefed722a0d41ab0e0b95de7aaa_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-1dd05d139abfdb16ab59e9dd35d7bfa7_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;绿化覆盖率很高，小区环境看着很舒适，房子也很气派，很有豪宅的气质。&lt;/p&gt;
&lt;p&gt;比较一下深圳和上海两地的房价（上一篇&lt;a href="https://zhuanlan.zhihu.com/p/40293278"&gt;Python爬虫告诉你上海房价有多高&lt;/a&gt;），可以发现，深圳和上海的平均单价和套均总价均相差不大。豪宅方面，上海的顶级豪宅要比深圳的顶级豪宅贵不少，上海排名前10的豪宅最便宜的也在1亿以上，而这里的数据里深圳最贵的豪宅也就1个亿，这有点令人难以置信。比较贝壳上这两个城市的房源数量，可以发现深圳的房源远少于上海的房源，可能深圳一些更贵的豪宅没有在贝壳上挂牌吧。&lt;/p&gt;
&lt;p&gt;本文我们分析了一下深圳的房价数据，下一篇我们来看一下北京的房价。敬请期待~&lt;/p&gt;</content><category term="数据分析"></category><category term="Python"></category><category term="爬虫"></category><category term="数据分析"></category></entry><entry><title>Python爬虫告诉你上海房价有多高</title><link href="http://www.shenzhongqiang.com/python-shanghai-house-price.html" rel="alternate"></link><published>2018-07-22T00:00:00+08:00</published><updated>2018-07-22T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-07-22:/python-shanghai-house-price.html</id><summary type="html">&lt;p&gt;最近用Python爬取了贝壳上7万多套上海的在售房源，7万多套房源是目前贝壳上正在挂牌出售的房源，覆盖了上海各个区县。我们对这7万多套房源做一下分析，来真实地感受一下上海的房价到底有多高 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近用Python爬取了贝壳上7万多套上海的在售房源，7万多套房源是目前贝壳上正在挂牌出售的房源，覆盖了上海各个区县。我们对这7万多套房源做一下分析，来真实地感受一下上海的房价到底有多高。&lt;/p&gt;
&lt;h4&gt;爬虫思路&lt;/h4&gt;
&lt;p&gt;首先介绍一下我们这个爬虫的思路。贝壳网上的房源按照区县、版块做了划分，如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-1307e0c656cf57acc59555209580fe64_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我们首先获取所有的区和版块数据。&lt;/p&gt;
&lt;p&gt;然后对于每一个版块，爬取版块内的所有房源数据。每一套房源的数据除了单价总价外还包括小区名字、户型、面积、朝向、装修、电梯、楼层等，如下图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-1eeeb797f38246be02bece5720bab050_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;爬取的数据存入MongoDB。爬取完所有的数据后，我们从MongoDB读取数据并做分析。&lt;/p&gt;
&lt;p&gt;代码这里不详细展开，文末会给出获取方式。&lt;/p&gt;
&lt;h4&gt;房源数据分析&lt;/h4&gt;
&lt;p&gt;爬取完所有房源数据后，我们来对数据做一下分析。&lt;/p&gt;
&lt;p&gt;本次共爬取挂牌在售的房源总数&lt;strong&gt;72994&lt;/strong&gt;套，在售房源的平均售价是&lt;strong&gt;531万&lt;/strong&gt;/套，平均单价是&lt;strong&gt;56000元&lt;/strong&gt;/平米。&lt;/p&gt;
&lt;p&gt;按照区县划分，每个区的在售房源的分布如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-157601f58b30eeedbd0c5a2d55a10e29_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到浦东新区作为上海第一大区，挂牌在售的房源数量也是最多的。&lt;/p&gt;
&lt;p&gt;上海各个区县的均价如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-fbbe1bc619e01b679c0a5ed81fc795c2_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;静安、黄浦两个区位于上海的市中心，房价也最高，都超过了9万/平米，长宁、徐汇紧随其后，单价也超过了7万/平米。这4个区也是上海高端商业区、高端写字楼密集的地方，商场上档次，生活有品位，在这里拥有一套住房也成为了身份的象征。房价最低的是金山区，地处上海偏远的郊县，虽然也属于上海，但每次去金山都有一种出差的感觉。&lt;/p&gt;
&lt;p&gt;下面是上海单价最贵的十大小区&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-106b42d23d7e36fa5fe3664fa8b1d4c3_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到大多数都集中在静安、黄浦、徐汇、长宁这4个区。浦东有一个小区入围，那是曾经全上海最贵的汤臣一品，如今在最贵的名单里也只能排在第7了。&lt;/p&gt;
&lt;p&gt;最后我们来欣赏一下上海的那些最贵的顶级豪宅的房价&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-2dfb09cbeb1add8077442ab2015217e5_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;总价里的零是不是数不过来了？每一套都在1亿以上。豪宅的名字也很有趣，都是什么庄园、什么山庄之类的。&lt;/p&gt;
&lt;p&gt;我们来欣赏一下豪宅庄园的图片&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-b2a23a1686ca01fff9166336e0275cfe_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-778833988ee565a5c805cb4adff8ca5d_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-05e0fdde5f4d02dc9e1658405032ad5f_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-d30113ca527aa908e5166d9a07ff10ee_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;看了是不是很喜欢？是不是很动心？&lt;/p&gt;
&lt;p&gt;那么月薪1万，如何才能买得起这样的豪宅呢？&lt;/p&gt;
&lt;p&gt;不要急，一步步来。先设定一个小目标，比如：先活他个500年。&lt;/p&gt;
&lt;p&gt;爬虫代码已上传github，如需代码，可在公众号【&lt;strong&gt;Python与数据分析&lt;/strong&gt;】后台回复“房价”获取代码地址。&lt;/p&gt;</content><category term="数据分析"></category><category term="Python"></category><category term="爬虫"></category><category term="数据分析"></category></entry><entry><title>用Python算一算n阶乘的末尾有几个零</title><link href="http://www.shenzhongqiang.com/algorithms-tailing-zeros-for-factorial" rel="alternate"></link><published>2018-07-04T00:00:00+08:00</published><updated>2018-07-04T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-07-04:/algorithms-tailing-zeros-for-factorial</id><summary type="html">&lt;p&gt;这是Lintcode第二题，原题在此 &lt;a href="http://link.zhihu.com/?target=https%3A//www.lintcode.com/zh-cn/old/problem/trailing-zeros/"&gt;尾部的零&lt;/a&gt;。题目虽然标为“简单 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;这是Lintcode第二题，原题在此 &lt;a href="http://link.zhihu.com/?target=https%3A//www.lintcode.com/zh-cn/old/problem/trailing-zeros/"&gt;尾部的零&lt;/a&gt;。题目虽然标为“简单”，但答对率却不高。&lt;/p&gt;
&lt;p&gt;看到这一题，比较直观的想法是计算从1到n的连乘，但这样很容易溢出，因为乘起来的数字太大。&lt;/p&gt;
&lt;p&gt;换一个思路，我们将n阶乘做质因数分解，将n阶乘表示成&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.zhihu.com/equation?tex=n%21+%3D+a+%5Ctimes+2%5E%7Bm%7D+%5Ctimes+5%5E%7Bk%7D"&gt; &lt;/p&gt;
&lt;p&gt;其中a, m, n都是非负整数，且a不能被2和5整除。&lt;/p&gt;
&lt;p&gt;上面的表达式中，每一对2和5都贡献了一个末尾的零，所以我们只要知道n的阶乘中有多少个因子2，有多少个因子5，求两者的最小值 &lt;img alt="" src="http://www.zhihu.com/equation?tex=min%28m%2C+k%29"&gt; 就是末尾零的个数了。&lt;/p&gt;
&lt;p&gt;我们先来看一下n的阶乘有多少个因子5。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.zhihu.com/equation?tex=n%21+%3D+1+%5Ctimes+2+%5Ctimes+3+%5Ctimes+...+%5Ctimes+n"&gt; &lt;/p&gt;
&lt;p&gt;从1到n中，每一个5的倍数都至少贡献了一个5，比如数字5，10，15，都贡献了一个5。每个 &lt;img alt="" src="http://www.zhihu.com/equation?tex=5%5E%7B2%7D"&gt; 的倍数都至少贡献了两个5，比如数字25，50。所以n的阶乘中包含的5的因子的个数，可以用下面的表达式来计算&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.zhihu.com/equation?tex=k+%3D+%5Cleft%5B+n%2F5+%5Cright%5D+%2B+%5Cleft%5B+n%2F5%5E%7B2%7D+%5Cright%5D+%2B+%5Cleft%5B+n%2F5%5E%7B3%7D+%5Cright%5D+%2B+..."&gt; &lt;/p&gt;
&lt;p&gt;同样的，n的阶乘包含的2的因子的个数可以用下面的表达式计算&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.zhihu.com/equation?tex=m+%3D+%5Cleft%5B+n%2F2+%5Cright%5D+%2B+%5Cleft%5B+n%2F2%5E%7B2%7D+%5Cright%5D+%2B+%5Cleft%5B+n%2F2%5E%7B3%7D+%5Cright%5D+%2B+..."&gt; &lt;/p&gt;
&lt;p&gt;很显然 m &amp;gt; k。前面说过，末尾零的个数是 &lt;img alt="" src="http://www.zhihu.com/equation?tex=min%28m%2C+k%29"&gt; 也就是k了。&lt;/p&gt;
&lt;p&gt;理解了上面的步骤，接下来就可以用代码来实现算法了，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;trailing_zero_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码其实很简单。我们来思考两个问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;上面的代码的算法复杂度是多少？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;上面的代码中用到了这样一个假设： &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Pyton"></category><category term="Python"></category></entry><entry><title>10行代码识别二维码</title><link href="http://www.shenzhongqiang.com/recognize-qr-code.html" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-23:/recognize-qr-code.html</id><summary type="html">&lt;p&gt;二维码现在已深入到我们生活的方方面面了，手机支付、微信加好友、app下载、电子票务等方方面面都有它的身影 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;二维码现在已深入到我们生活的方方面面了，手机支付、微信加好友、app下载、电子票务等方方面面都有它的身影。最近坐地铁又推出了扫二维码进出站。&lt;/p&gt;
&lt;p&gt;最近一段时间，上海的很多地铁检票机器都装上了像下面这样的二维码扫描器&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-acebb23eaff588dc3f0844726d0605c0_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;只需打开手机app上的二维码，对准扫描窗口扫一扫，就可以进站，到站后再扫一扫，就可以出站并自动扣款。&lt;/p&gt;
&lt;p&gt;今天我们就来用Python实现一个简单的识别二维码的程序。&lt;/p&gt;
&lt;h4&gt;准备工作&lt;/h4&gt;
&lt;p&gt;识别二维码需要用到zbar，首先安装libzbar0，以Ubuntu为例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libzbar0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着安装pyzbar和opencv&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pyzbar
pip install opencv-python
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;代码实现&lt;/h4&gt;
&lt;p&gt;接下来是我们的代码实现部分了，可以看到代码非常简单。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# filename: read_qrcode.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyzbar.pyzbar&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;decode&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt; 

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usage: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;image file&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 读入图片&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 解码二维码&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="c1"&gt;# 打印解码的数据&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;测试&lt;/h4&gt;
&lt;p&gt;我们拿下面的二维码来测试一下（因为知乎会自动转换二维码，这里不得已把图片作了下分割）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-6c12c28182327fd821763cda91ed22a9_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-40192faa7a28708c254571598c3f9961_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;运行上面的read_qrcode.py，可以看到如下的结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;QRCODE 欢迎关注“Python与数据分析”专栏
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;：）&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>50行代码实现人脸检测</title><link href="http://www.shenzhongqiang.com/python-face-detection.html" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-23:/python-face-detection.html</id><summary type="html">&lt;p&gt;现在的人脸识别技术已经得到了非常广泛的应用，支付领域、身份验证、美颜相机里都有它的应用。用iPhone的同学们应该对下面的功能比较熟悉 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;现在的人脸识别技术已经得到了非常广泛的应用，支付领域、身份验证、美颜相机里都有它的应用。用iPhone的同学们应该对下面的功能比较熟悉&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-ccf07fb5689f8b6037eb619a5a5ce11a_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;iPhone的照片中有一个“人物”的功能，能够将照片里的人脸识别出来并分类，背后的原理也是人脸识别技术。&lt;/p&gt;
&lt;p&gt;这篇文章主要介绍怎样用Python实现人脸检测。人脸检测是人脸识别的基础。人脸检测的目的是识别出照片里的人脸并定位面部特征点，人脸识别是在人脸检测的基础上进一步告诉你这个人是谁。&lt;/p&gt;
&lt;p&gt;好了，介绍就到这里。接下来，开始准备我们的环境。&lt;/p&gt;
&lt;h4&gt;准备工作&lt;/h4&gt;
&lt;p&gt;本文的人脸检测基于dlib，dlib依赖Boost和cmake，所以首先需要安装这些包，以Ubuntu为例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install build-essential cmake
$ sudo apt-get install libgtk-3-dev
$ sudo apt-get install libboost-all-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们的程序中还用到numpy，opencv，所以也需要安装这些库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install numpy
$ pip install scipy
$ pip install opencv-python
$ pip install dlib
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;人脸检测基于事先训练好的模型数据，从这里可以下到模型数据&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2"&gt;http://&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载到本地路径后解压，记下解压后的文件路径，程序中会用到。&lt;/p&gt;
&lt;h4&gt;dlib的人脸特征点&lt;/h4&gt;
&lt;p&gt;上面下载的模型数据是用来估计人脸上68个特征点(x, y)的坐标位置，这68个坐标点的位置如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-b67561b84f543b5d3138c8fcdb580f91_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我们的程序将包含两个步骤：&lt;/p&gt;
&lt;p&gt;第一步，在照片中检测人脸的区域&lt;/p&gt;
&lt;p&gt;第二部，在检测到的人脸区域中，进一步检测器官（眼睛、鼻子、嘴巴、下巴、眉毛）&lt;/p&gt;
&lt;h4&gt;人脸检测代码&lt;/h4&gt;
&lt;p&gt;我们先来定义几个工具函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rect_to_bb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; 
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个函数里的rect是dlib脸部区域检测的输出。这里将rect转换成一个序列，序列的内容是矩形区域的边界信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shape_to_np&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;int&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;coords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;coords&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个函数里的shape是dlib脸部特征检测的输出，一个shape里包含了前面说到的脸部特征的68个点。这个函数将shape转换成Numpy array，为方便后续处理。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
    &lt;span class="n"&gt;resized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interpolation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INTER_AREA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;resized&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个函数里的image就是我们要检测的图片。在人脸检测程序的最后，我们会显示检测的结果图片来验证，这里做resize是为了避免图片过大，超出屏幕范围。&lt;/p&gt;
&lt;p&gt;接下来，开始我们的主程序部分&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt; 

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usage: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;image file&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;image_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;detector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_frontal_face_detector&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;predictor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape_predictor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;shape_predictor_68_face_landmarks.dat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们从sys.argv[1]参数中读取要检测人脸的图片，接下来初始化人脸区域检测的detector和人脸特征检测的predictor。shape_predictor中的参数就是我们之前解压后的文件的路径。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cvtColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COLOR_BGR2GRAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;detector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在检测特征区域前，我们先要检测人脸区域。这段代码调用opencv加载图片，resize到合适的大小，转成灰度图，最后用detector检测脸部区域。因为一张照片可能包含多张脸，所以这里得到的是一个包含多张脸的信息的数组rects。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rects&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;predictor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape_to_np&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rect_to_bb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Face #{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FONT_HERSHEY_SIMPLEX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于每一张检测到的脸，我们进一步检测脸部的特征（鼻子、眼睛、眉毛等）。对于脸部区域，我们用绿色的框在照片上标出；对于脸部特征，我们用红色的点标出来。&lt;/p&gt;
&lt;p&gt;最后我们把加了检测标识的照片显示出来，waitKey(0)表示按任意键可退出程序。&lt;/p&gt;
&lt;p&gt;以上是我们程序的全部&lt;/p&gt;
&lt;h4&gt;测试&lt;/h4&gt;
&lt;p&gt;接下来是令人兴奋的时刻，检验我们结果的时刻到来了。&lt;/p&gt;
&lt;p&gt;下面是原图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-30d21aba6fe402350b11ffe0176ad435_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;下面是程序识别的结果&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-1d6ea38d9b087abb9cb84f76573014b6_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到脸部区域被绿色的长方形框起来了，脸上的特征（鼻子，眼睛等）被红色点点标识出来了。&lt;/p&gt;
&lt;p&gt;是不是很简单？&lt;/p&gt;
&lt;p&gt;欢迎点赞~ &lt;/p&gt;
&lt;p&gt;视点赞情况，后续再另开一篇写写怎样实现人脸识别，告诉你照片里的人是谁。&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="图像处理"></category><category term="Python"></category><category term="图像处理"></category></entry><entry><title>基于face_recognition实现人脸识别</title><link href="http://www.shenzhongqiang.com/recognize-face.html" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-23:/recognize-face.html</id><summary type="html">&lt;p&gt;上一篇文章&lt;a href="https://zhuanlan.zhihu.com/p/32781218"&gt;50行代码实现人脸检测&lt;/a&gt;收到了很多朋友的点赞，非常感谢大家的鼓励。上一篇中我们实现了检测照片中的人脸并标出人脸特征点 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;上一篇文章&lt;a href="https://zhuanlan.zhihu.com/p/32781218"&gt;50行代码实现人脸检测&lt;/a&gt;收到了很多朋友的点赞，非常感谢大家的鼓励。上一篇中我们实现了检测照片中的人脸并标出人脸特征点（鼻子，眼睛，眉毛等），这一篇我们将在上一篇的基础上，进一步实现人脸识别，告诉你照片里的人是谁。&lt;/p&gt;
&lt;h4&gt;准备工作&lt;/h4&gt;
&lt;p&gt;我们的人脸识别基于face_recognition库。face_recognition基于dlib实现，用深度学习训练数据，模型准确率高达99.38%。在开始我们的工作前，我们先安装face_recognition&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install face_recognition
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;人脸数字化&lt;/h4&gt;
&lt;p&gt;人脸识别的第一步是检测照片中的人脸区域，然后将人脸的图像数据转换成一个长度为128的向量，这128个数据代表了人脸的128个特征指标，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a6dd4b87f6ea6085a466958300295095_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;对于每一张已知人脸，生成这样的一个128位的向量。对于一张未知人脸，将它的128位向量和所有已知人脸的128位向量一一比对，找到相似度最高的那一个，即找出了未知人脸对应的人。&lt;/p&gt;
&lt;h4&gt;图片数据&lt;/h4&gt;
&lt;p&gt;我们准备了两张照片，分别是凯特王妃和威廉王子的单人照，分别存成catherine.jpg和william.jpg，这两张照片中的人脸作为我们的已知人脸&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5ceafbb24e04f2c23bb1c883f7fb1120_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我们的目标是在下面的合影中识别出两人的脸并在图中标出各自的名字。下图存成unknown.jpg&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-d565c85c26e4111316493249b378778c_r.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;代码实现&lt;/h4&gt;
&lt;p&gt;接下来开始我们的编程工作&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;face_recognition&lt;/span&gt;

&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;catherine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;william&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先我们定义了标签集，存在names数组中。&lt;/p&gt;
&lt;p&gt;标签名字也是我们图片的文件名。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.jpg&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;face_recognition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_image_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;unknown_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;face_recognition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_image_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unknown.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用face_recognition.load_image_file从图片中读取数据。&lt;/p&gt;
&lt;p&gt;这里读取了包含已知人脸和未知人脸的图片的数据，未知人脸的图片就是上面的合影图片unknown.jpg。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;face_encodings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;face_recognition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_encodings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;face_encodings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;unknown_face_encodings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;face_recognition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_encodings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unknown_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将人脸的图像数据转换成128位向量，已知人脸的向量存入face_encodings数组，未知人脸的图像数据存入unknown_face_encodings数组。&lt;/p&gt;
&lt;p&gt;face_recognition.face_encodings会返回图片中的所有的人脸的128位向量。单人照片只有一张人脸，所以face_recognition.face_encodings(image)[0]只取第一个元素。合影图片中包含了2张人脸，所以unknown_face_encodings包含2个128位向量。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;face_locations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;face_recognition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;face_locations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unknown_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unknown_face_encodings&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;unknown_encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unknown_face_encodings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;face_location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;face_locations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;face_location&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unknown_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;face_recognition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare_faces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;face_encodings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unknown_encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unknown_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FONT_HERSHEY_SIMPLEX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;unknown_image_rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cvtColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unknown_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COLOR_BGR2RGB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unknown_image_rgb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;face_locations存了每张脸的位置信息。&lt;/p&gt;
&lt;p&gt;在循环中我们调用cv2.rectangle框出了检测到的每张脸。&lt;/p&gt;
&lt;p&gt;face_recognition.compare_faces将已知人脸的128位向量和每张未知人脸的128位向量做比较，结果存入results数组中。results数组中的每一个元素都是True或者False，长度和人脸个数相等。results中的每个元素都和已知人脸一一对应，在某一个位置处的元素为True，表示未知人脸被识别成这张已知人脸。&lt;/p&gt;
&lt;p&gt;对识别出来的每张人脸，我们调用cv2.putText在图上标注标签。&lt;/p&gt;
&lt;p&gt;以上是代码的全部。&lt;/p&gt;
&lt;h4&gt;测试&lt;/h4&gt;
&lt;p&gt;令人兴奋的时刻又来到了！ 我们来检验一下我们的成果。&lt;/p&gt;
&lt;p&gt;运行上面的程序，可以看到下面的结果&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-4093c883e5231a7ae1ac3c5eb58752dd_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;威廉王子和凯特王妃的人脸都被准确地识别出来。绿色的框框出了人脸区域，框的上方标注了识别到的人的名字。&lt;/p&gt;
&lt;p&gt;至此，我们成功地实现了人脸识别。&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="图像处理"></category><category term="Python"></category><category term="图像处理"></category></entry><entry><title>Python 2与Python 3的区别</title><link href="http://www.shenzhongqiang.com/diff-between-python2-and-python3.html" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-23:/diff-between-python2-and-python3.html</id><summary type="html">&lt;p&gt;越来越多的库要放弃Python 2了，强哥也开始转向Python 3了。最近的项目开始用Python3写了 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;越来越多的库要放弃Python 2了，强哥也开始转向Python 3了。最近的项目开始用Python3写了，也体会了一下2和3的区别。主要的一些区别在以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;print函数&lt;/li&gt;
&lt;li&gt;整数相除&lt;/li&gt;
&lt;li&gt;Unicode&lt;/li&gt;
&lt;li&gt;异常处理&lt;/li&gt;
&lt;li&gt;xrange&lt;/li&gt;
&lt;li&gt;map函数&lt;/li&gt;
&lt;li&gt;不支持has_key&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;print函数&lt;/h4&gt;
&lt;p&gt;Python 2中print是语句（statement），Python 3中print则变成了函数。在Python 3中调用print需要加上括号，不加括号会报SyntaxError&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1
    print &amp;quot;hello world&amp;quot;
                      ^
SyntaxError: Missing parentheses in call to &amp;#39;print&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;整数相除&lt;/h4&gt;
&lt;p&gt;在Python 2中，3/2的结果是整数，在Python 3中，结果则是浮点数&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3 / 2 =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3 / 2.0 =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;3 / 2 = 1
3 / 2.0 = 1.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3 / 2 =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3 / 2.0 =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;3 / 2 = 1.5
3 / 2.0 = 1.5
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Unicode&lt;/h4&gt;
&lt;p&gt;Python 2有两种字符串类型：str和unicode，Python 3中的字符串默认就是Unicode，Python 3中的str相当于Python 2中的unicode。&lt;/p&gt;
&lt;p&gt;在Python 2中，如果代码中包含非英文字符，需要在代码文件的最开始声明编码，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在Python 3中，默认的字符串就是Unicode，就省去了这个麻烦，下面的代码在Python 3可以正常地运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;异常处理&lt;/h4&gt;
&lt;p&gt;Python 2中捕获异常一般用下面的语法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; 
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ZeroDivisionError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; 
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ZeroDivisionError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 3中不再支持前一种语法，必须使用as关键字。&lt;/p&gt;
&lt;h4&gt;xrange&lt;/h4&gt;
&lt;p&gt;Python 2中有 range 和 xrange 两个方法。其区别在于，range返回一个list，在被调用的时候即返回整个序列；xrange返回一个iterator，在每次循环中生成序列的下一个数字。Python 3中不再支持 xrange 方法，Python 3中的 range 方法就相当于 Python 2中的 xrange 方法。&lt;/p&gt;
&lt;h4&gt;map函数&lt;/h4&gt;
&lt;p&gt;在Python 2中，map函数返回list，而在Python 3中，map函数返回iterator。&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1, 2, 3, 4, 5]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;map object at 0x7ff5b103d2b0&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1, 2, 3, 4, 5]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;filter函数在Python 2和Python 3中也是同样的区别。&lt;/p&gt;
&lt;h4&gt;不支持has_key&lt;/h4&gt;
&lt;p&gt;Python 3中的字典不再支持has_key方法&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Xiao Wang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;person has key &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;age&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;person has key &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;age&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;person has key &amp;quot;age&amp;quot;:  True
person has key &amp;quot;age&amp;quot;:  True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Xiao Wang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;person has key &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;age&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;person has key &amp;quot;age&amp;quot;:  True
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;person has key &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;age&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
AttributeError: &amp;#39;dict&amp;#39; object has no attribute &amp;#39;has_key&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上是最近整理的一些，后续会继续更新，也欢迎大家补充。&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>Python面试之 is 和 == 的区别</title><link href="http://www.shenzhongqiang.com/diff-between-is-and-doubleequal.html" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-23:/diff-between-is-and-doubleequal.html</id><summary type="html">&lt;p&gt;面试实习生的时候，当问到 is 和 == 的区别时 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;面试实习生的时候，当问到 is 和 == 的区别时，很多同学都答不上来，搞不清两者什么时候返回一致，什么时候返回不一致。本文我们来看一下这两者的区别。&lt;/p&gt;
&lt;p&gt;我们先来看几个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 False&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True &lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 False&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True &lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的输出结果中为什么有的 is 和 == 的结果相同，有的不相同呢？我们来看下官方文档中对于 is 和 == 的解释。&lt;/p&gt;
&lt;p&gt;官方文档中说 is 表示的是对象标示符（object identity），而 == 表示的是相等（equality）。is 的作用是用来检查对象的标示符是否一致，也就是比较两个对象在内存中的地址是否一样，而 == 是用来检查两个对象是否相等。&lt;/p&gt;
&lt;p&gt;我们在检查 a is b 的时候，其实相当于检查 id(a) == id(b)。而检查 a == b 的时候，实际是调用了对象 a 的 __eq()__ 方法，a == b 相当于 a.__eq__(b)。&lt;/p&gt;
&lt;p&gt;一般情况下，如果 a is b 返回True的话，即 a 和 b 指向同一块内存地址的话，a == b 也返回True，即 a 和 b 的值也相等。&lt;/p&gt;
&lt;p&gt;好了，看明白上面的解释后，我们来看下前面的几个例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;# 输出 140506224367496&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;# 输出 140506224367496&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;# 输出 140506208811952&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;# 输出 140506208812208&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 False&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True &lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;# 输出 140506224299464&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;# 输出 140506224309576&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 False&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True &lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;# 输出 140506224305672&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;# 输出 140506224305672&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打印出 id(a) 和 id(b) 后就很清楚了。只要 a 和 b 的值相等，a == b 就会返回True，而只有 id(a) 和 id(b) 相等时，a is b 才返回 True。&lt;/p&gt;
&lt;p&gt;这里还有一个问题，为什么 a 和 b 都是 "hello" 的时候，a is b 返回True，而 a 和 b都是 "hello world" 的时候，a is b 返回False呢？&lt;/p&gt;
&lt;p&gt;这是因为前一种情况下Python的字符串驻留机制起了作用。对于较小的字符串，为了提高系统性能Python会保留其值的一个副本，当创建新的字符串的时候直接指向该副本即可。所以 "hello" 在内存中只有一个副本，a 和 b 的 id 值相同，而 "hello world" 是长字符串，不驻留内存，Python中各自创建了对象来表示 a 和 b，所以他们的值相同但 id 值不同。（这段解释有误，非常感谢 &lt;a href="http://www.zhihu.com/people/421ae9014cf4b66993c52d390e505440"&gt;@冒泡&lt;/a&gt; 同学指正。 &lt;a href="http://www.zhihu.com/people/421ae9014cf4b66993c52d390e505440"&gt;@冒泡&lt;/a&gt; 同学指出：intern机制和字符串长短无关，在交互模式下，每行字符串字面量都会申请一个新字符串，但是只含大小写字母、数字和下划线的会被intern，也就是维护了一张dict来使得这些字符串全局唯一）&lt;/p&gt;
&lt;p&gt;总结一下，is 是检查两个对象是否指向同一块内存空间，而 == 是检查他们的值是否相等。可以看出，is 是比 == 更严格的检查，is 返回True表明这两个对象指向同一块内存，值也一定相同。&lt;/p&gt;
&lt;p&gt;看到这里，大家是不是搞懂了 is 和 == 的区别呢？&lt;/p&gt;
&lt;p&gt;那我们深入一步来思考一下下面这个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python里和None比较时，为什么是 is None 而不是 == None 呢？*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;欢迎回答在评论区~&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>Python面试之可变对象和不可变对象</title><link href="http://www.shenzhongqiang.com/mutable-and-immutable.html" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-23:/mutable-and-immutable.html</id><summary type="html">&lt;p&gt;上一篇&lt;a href="https://zhuanlan.zhihu.com/p/35219174"&gt;Python面试之 is 和 == 的区别 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;上一篇&lt;a href="https://zhuanlan.zhihu.com/p/35219174"&gt;Python面试之 is 和 == 的区别&lt;/a&gt;的最后留了一个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python里和None比较时，为什么是 is None 而不是 == None 呢？*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是因为None在Python里是个单例对象，一个变量如果是None，它一定和None指向同一个内存地址。而 == None背后调用的是__eq__，而__eq__可以被重载，下面是一个 is not None但 == None的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 True&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;好了，解答就到这里，我们开始本篇的正题。&lt;/p&gt;
&lt;p&gt;Python中有可变对象和不可变对象之分。可变对象创建后可改变但地址不会改变，即变量指向的还是原来的变量；不可变对象创建之后便不能改变，如果改变则会指向一个新的对象。&lt;/p&gt;
&lt;p&gt;Python中dict、list是可变对象，str、int、tuple、float是不可变对象。&lt;/p&gt;
&lt;p&gt;来看一个字符串的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 140022851974560&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# 抛出异常：TypeError: &amp;#39;str&amp;#39; object does not support item assignment&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; world&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 140022850763824&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的例子里，修改a指向的对象的值会导致抛出异常。&lt;/p&gt;
&lt;p&gt;执行 a = a + " world"时，先计算等号右边的表达式，生成一个新的对象赋值到变量a，因此a指向的对象发生了改变，id(a) 的值也与原先不同。&lt;/p&gt;
&lt;p&gt;再来看一个列表的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 140022851303976&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# 输出 [5, 2, 3]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 140022851303976&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# 输出 [5, 2, 3, 5]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 140022851303976&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 140022851303976&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# 输出 [6, 2, 3, 5]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# 输出 [6, 2, 3, 5]&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 140022851006760&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 140022851303976&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# 输出 [6, 2, 3, 5, 7]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# 输出 [6, 2, 3, 5]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面对a修改元素、添加元素，变量a还是指向原来的对象。&lt;/p&gt;
&lt;p&gt;将a赋值给b后，变量b和a都指向同一个对象，因此修改b的元素值也会影响a。&lt;/p&gt;
&lt;p&gt;变量c是对b的切片操作的返回值，切片操作相当于浅拷贝，会生成一个新的对象，因此c指向的对象不再是b所指向的对象，对c的操作不会改变b的值。&lt;/p&gt;
&lt;p&gt;理解了上面不可变对象和可变对象的区别后，我们再来看一个有趣的问题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;group_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;group_id&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;group1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;group1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;group1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;        &lt;span class="c1"&gt;# 输出 140280211197776&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 输出 [&amp;#39;Wang&amp;#39;, &amp;#39;Sun&amp;#39;]&lt;/span&gt;

&lt;span class="n"&gt;group2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;group2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Zhang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;group2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Li&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;        &lt;span class="c1"&gt;# 输出 140280211197840 &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 输出 [&amp;#39;Wang&amp;#39;, &amp;#39;Sun&amp;#39;, &amp;#39;Zhang&amp;#39;, &amp;#39;Li&amp;#39;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 输出 [&amp;#39;Wang&amp;#39;, &amp;#39;Sun&amp;#39;, &amp;#39;Zhang&amp;#39;, &amp;#39;Li&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;明明group1和group2是不同的对象（id值不同），为什么调用group2的add_member方法会影响group1的members？&lt;/p&gt;
&lt;p&gt;其中的奥妙就在于__init__函数的第二个参数是默认参数，默认参数的默认值在函数创建的时候就生成了，每次调用都是用了这个对象的缓存。我们检查id(group1.mebers)和id(group2.members)，可以发现他们是相同的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 140127132522040&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 140127132522040&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以，group1.members和group2.members指向了同一个对象，对group2.members的修改也会影响group1.members。&lt;/p&gt;
&lt;p&gt;那么问题来了，怎样修改代码才能解决上面默认参数的问题呢？&lt;/p&gt;
&lt;p&gt;答案下期揭晓，欢迎关注~&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>Python面试之理解__new__和__init__的区别</title><link href="http://www.shenzhongqiang.com/diff-between-new-and-init" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-23:/diff-between-new-and-init</id><summary type="html">&lt;p&gt;很多同学都以为Python中的__init__是构造方法，但其实不然，Python中真正的构造方法是__new__。__init__和__new__有什么区别？本文就来探讨一下 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;很多同学都以为Python中的__init__是构造方法，但其实不然，Python中真正的构造方法是__new__。__init__和__new__有什么区别？本文就来探讨一下。&lt;/p&gt;
&lt;p&gt;我们先来看一下__init__的用法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;in __init__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; 

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码会输出如下的结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;in __init__
&amp;lt;__main__.Person object at 0x7fb2e0936450&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么我们思考一个问题，Python中要实现Singleton怎么实现，要实现工厂模式怎么实现？&lt;/p&gt;
&lt;p&gt;用__init__函数似乎没法做到呢~&lt;/p&gt;
&lt;p&gt;实际上，__init__函数并不是真正意义上的构造函数，__init__方法做的事情是在对象创建好之后初始化变量。真正创建实例的是__new__方法。&lt;/p&gt;
&lt;p&gt;我们来看下面的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;in __new__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;in __init__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码输出如下的结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;in __new__
in __init__
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码中实例化了一个Person对象，可以看到__new__和__init__都被调用了。__new__方法用于创建对象并返回对象，当返回对象时会自动调用__init__方法进行初始化。__new__方法是静态方法，而__init__是实例方法。&lt;/p&gt;
&lt;p&gt;好了，理解__new__和__init__的区别后，我们再来看一下前面提出的问题，用Python怎么实现Singleton，怎么实现工厂模式？&lt;/p&gt;
&lt;p&gt;先来看Singleton&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_instance&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_instance&lt;/span&gt;

&lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;__main__.Singleton object at 0x7fdef58b1190&amp;gt;
&amp;lt;__main__.Singleton object at 0x7fdef58b1190&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到s1和s2都指向同一个对象，实现了单例模式。&lt;/p&gt;
&lt;p&gt;再来看下工厂模式的实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Apple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple is in red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Orange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;orange is in orange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FruitFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Apple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Orange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;fruit1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FruitFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fruit2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FruitFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fruit1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_color&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    
&lt;span class="n"&gt;fruit2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_color&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;apple&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;
&lt;span class="n"&gt;orange&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;orange&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看完上面两个例子，大家是不是对__new__和__init__的区别有了更深入的理解？&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>Python面试之连接字符串用join还是+</title><link href="http://www.shenzhongqiang.com/diff-between-join-and-plus.html" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-23:/diff-between-join-and-plus.html</id><summary type="html">&lt;p&gt;上一篇&lt;a href="https://zhuanlan.zhihu.com/p/35389687"&gt;Python面试之可变对象和不可变对象&lt;/a&gt;的最后留了一个问题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Group …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;上一篇&lt;a href="https://zhuanlan.zhihu.com/p/35389687"&gt;Python面试之可变对象和不可变对象&lt;/a&gt;的最后留了一个问题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;group_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;group_id&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述代码中默认参数值对象会被缓存，造成Group类型的对象共享同一个members列表，怎样才能解决这个问题呢？&lt;/p&gt;
&lt;p&gt;其实很简单，只要传入None作为默认参数，在创建对象的时候动态生成列表，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;group_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;group_id&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样对于不同的group对象，它们的members也是不同的对象，所以不会再出现更新一个group对象的members也会更新另外一个group对象的members了。&lt;/p&gt;
&lt;p&gt;本篇要讲的是，连接字符串的时候可以用join也可以用+，但这两者有没有区别呢？&lt;/p&gt;
&lt;p&gt;我们先来看一下用join和+连接字符串的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 “hello world&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 输出 “hello world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;两者的结果是一样，那么考虑这样一个问题，这两者在性能上有区别吗？&lt;/p&gt;
&lt;p&gt;我们来做个实验，比较下join和+的性能&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;timeit&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strlist&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strlist&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;strlist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;strlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a very very very very very very very long string&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;timer1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test1(strlist)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;from __main__ import strlist, test1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;timer2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test2(strlist)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;from __main__ import strlist, test2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timer1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timer2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;join: &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s2"&gt;, plus: &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的程序有如下的输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;join: 0.116944, plus: 0.394379
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，join的性能明显好于+。这是为什么呢？&lt;/p&gt;
&lt;p&gt;原因是这样的，上一篇&lt;a href="https://zhuanlan.zhihu.com/p/35389687"&gt;Python面试之可变对象和不可变对象&lt;/a&gt;中讲过字符串是不可变对象，当用操作符+连接字符串的时候，每执行一次+都会申请一块新的内存，然后复制上一个+操作的结果和本次操作的右操作符到这块内存空间，因此用+连接字符串的时候会涉及好几次内存申请和复制。而join在连接字符串的时候，会先计算需要多大的内存存放结果，然后一次性申请所需内存并将字符串复制过去，这是为什么join的性能优于+的原因。所以在连接字符串数组的时候，我们应考虑优先使用join。&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>Python也能聊微信</title><link href="http://www.shenzhongqiang.com/python-wechat.html" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-23:/python-wechat.html</id><summary type="html">&lt;p&gt;最近研究微信API，发现个非常好用的python库：wxpy。wxpy基于itchat，使用了 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近研究微信API，发现个非常好用的python库：wxpy。wxpy基于itchat，使用了 Web 微信的通讯协议，实现了微信登录、收发消息、搜索好友、数据统计等功能。&lt;/p&gt;
&lt;p&gt;这里我们就来介绍一下这个库，并在最后实现一个聊天机器人。&lt;/p&gt;
&lt;h4&gt;准备工作&lt;/h4&gt;
&lt;p&gt;安装非常简单，从官方源下载安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -U wxpy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者从豆瓣源安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -U wxpy -i &lt;span class="s2"&gt;&amp;quot;https://pypi.doubanio.com/simple/&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;模块初探&lt;/h4&gt;
&lt;p&gt;安装完成后，我们来试下几个基本的功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;扫码登录微信&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wxpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行上面的程序，会弹出二维码，用手机微信扫一扫即可实现登录。&lt;/p&gt;
&lt;p&gt;但上面的程序有一个缺点，每次运行都要扫二维码。不过wxpy非常贴心地提供了缓存的选项，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样把登录信息保存下来，就不用每次都扫二维码了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送消息&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file_helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的file_helper就是微信的文件传输助手，我们给文件传输助手发送一条消息，可以在手机端收到如下的消息&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-609a81939031969ebf3414ae12b14b75_r.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接受消息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们实现一个收到消息自动回复的功能。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@bot.register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="c1"&gt;# 进入Python命令行，让程序保持运行&lt;/span&gt;
&lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;强哥打开自己的公众号管理平台，在后端向自己发送消息，就可以收到如下的消息回复&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-624c0149e4d1082a42422eb119da0c74_r.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;搜索好友及微信群&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们来实现一个搜索公司群、定位老板并转发老板消息的功能&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wxpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 定位公司群&lt;/span&gt;
&lt;span class="n"&gt;company_group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;公司微信群&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 定位老板&lt;/span&gt;
&lt;span class="n"&gt;boss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;company_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;老板大名&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 将老板的消息转发到文件传输助手&lt;/span&gt;
&lt;span class="nd"&gt;@bot.register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;company_group&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward_boss_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;boss&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file_helper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;老板发言&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 堵塞线程&lt;/span&gt;
&lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于老板喜欢在群里面喊话的同学来说，这是一个福音，以后再也不用担心错失老板的重要信息了~~&lt;/p&gt;
&lt;h4&gt;数据统计&lt;/h4&gt;
&lt;p&gt;wxpy的好友统计功能非常好用，可以很方便地统计好友的地理位置分布和性别分布。&lt;/p&gt;
&lt;p&gt;下面的代码中，强哥统计了下自己的好友的分布情况，并打印出人数最多的10个地区。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wxpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;friends_stat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;friend_loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# 每一个元素是一个二元列表，分别存储地区和人数信息&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;province&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;friends_stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;province&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;province&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="n"&gt;friend_loc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;province&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# 对人数倒序排序&lt;/span&gt;
&lt;span class="n"&gt;friend_loc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 打印人数最多的10个地区&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;friend_loc&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;统计出来的地区分布数据画成图表如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-b3df2a0409cddb145b03f25a7f48b054_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;强哥身在上海，大多数的好友也来自上海，上面的图表也如实地反应了这一情况。&lt;/p&gt;
&lt;p&gt;统计性别分布的代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;friends_stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 1代表MALE, 2代表FEMALE&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sex&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;MALE &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;sex&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FEMALE &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把性别分布的数据生成图表如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-3750ef9714cd9871ca1b930c6d64fc17_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到好友中男性占了大多数。男性朋友多多，老婆放心多多，嗯~~&lt;/p&gt;
&lt;h4&gt;聊天机器人&lt;/h4&gt;
&lt;p&gt;有了上面功能简介部分的基础，我们来实现一个聊天机器人。&lt;/p&gt;
&lt;p&gt;聊天机器人基于图灵机器人。图灵机器人可以在&lt;a href="http://link.zhihu.com/?target=http%3A//www.tuling123.com/"&gt;图灵机器人－中文语境下智能度最高的机器人大脑&lt;/a&gt;注册账号，并创建机器人。需记下api key，调用图灵API的时候会用到。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wxpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="c1"&gt;# 调用图灵机器人API，发送消息并获得机器人的回复&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;auto_reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.tuling123.com/openapi/api&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;api_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;你的api key&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;userid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[tuling] &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;console_qr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@bot.register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;auto_reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行上面的程序，发送消息给自己，可以看到如下的对话&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-211031326c8768547f2cddc6e0d6cdfd_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;机器人太逗了，上来就要红包，还把我当男朋友了~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-ace102a35ee4a3e8fbccdbdf7fdabf8e_r.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;附录&lt;/h4&gt;
&lt;p&gt;wxpy文档：&lt;a href="http://link.zhihu.com/?target=http%3A//wxpy.readthedocs.io/zh/latest/"&gt;wxpy: 用 Python 玩微信&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github地址：&lt;a href="http://link.zhihu.com/?target=https%3A//github.com/youfou/wxpy/blob/master/docs/index.rst"&gt;youfou/wxpy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>一款超酷的Chrome插件</title><link href="http://www.shenzhongqiang.com/cool-chrome-extensions-momentum.html" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-23:/cool-chrome-extensions-momentum.html</id><summary type="html">&lt;p&gt;最近发现一款超酷的Chrome插件，名叫Momentum。每次打开一个新的Tab页面，看着Chrome单调的默认页面，难免让人觉得乏味 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近发现一款超酷的Chrome插件，名叫Momentum。每次打开一个新的Tab页面，看着Chrome单调的默认页面，难免让人觉得乏味。装上了Momentum后，打开新的Tab页面，展现在你眼前的是一张漂亮的风景照片，不由让人觉得耳目一新，心情也随之振奋起来。&lt;/p&gt;
&lt;p&gt;Momentum每天换一张图，装上了Momentum的Chrome的新页面长这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-7f16b6ae262f5cf2c923883ca0167779_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;除了漂亮的背景图片、时间显示，这款插件还提供了天气预报、收藏夹、待办事项的功能，像下面&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-0343afc26e38eff1a405792cb662d241_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-f33d26707fc672c409c444ee61b4618e_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-490c725d5f2f168fcb096c40366442e1_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;自从装上了这款插件，感觉工作效率也比以前有了提升。&lt;/p&gt;
&lt;p&gt;Momentum的官方地址是&lt;a href="http://link.zhihu.com/?target=https%3A//momentumdash.com/"&gt;Momentum Dashboard&lt;/a&gt;。通过Chrome应用商店安装这款插件需要科学上网。&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>知乎Live数据面面观</title><link href="http://www.shenzhongqiang.com/zhihu-live-data-analysis.html" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-23:/zhihu-live-data-analysis.html</id><summary type="html">&lt;p&gt;从2016年5月第一场知乎Live开播，到今天，知乎Live已走过将近两个年头。有别于传统的文字、音频 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;从2016年5月第一场知乎Live开播，到今天，知乎Live已走过将近两个年头。有别于传统的文字、音频、视频的知识分享途径，知乎Live以直播的方式分享知识，给用户一种全新的体验。&lt;/p&gt;
&lt;p&gt;最近爬取了所有成功举办的知乎Live。从2016年知乎Live开播以来，知乎共计举办了5707场Live。通过数据分析，本文将会告诉你知乎Live的发展情况如何，覆盖哪些专业领域，有哪些奇特的Live，哪些Live最受欢迎，哪些Live最受好评，哪些Live最吸金等有趣的答案。&lt;/p&gt;
&lt;h4&gt;每月新开Live数量&lt;/h4&gt;
&lt;p&gt;下图为从2016年5月至今的每月新开播的Live数量统计（横轴是月份，看不清可以放大图片）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-d91d22f820cbcd13df7f301bf43f9cb8_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;2016年5月知乎Live上线后，每月新开播的知乎Live数量就一路上升，至2017年5月达到顶峰，随后逐渐下降。这里值得一提的是，在2017年1月和2月Live数量出现明显的下降，这应该和那段时间过春节有关，2017年的春节在一月底二月初。春节到了，主讲人也要回家过年的，开播的Live数量自然就少了。&lt;/p&gt;
&lt;h4&gt;各领域Live分布&lt;/h4&gt;
&lt;p&gt;知乎Live按照专业领域分类。下图是每个领域的知乎Live数量分布情况&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-942cf49cb275b4509772c13b1703a58b_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到大多数的Live的都集中于教育、职业、互联网、金融与经济、生活方式这几个领域，这几个领域也都是知乎上关注度比较高的领域，相关话题的关注度都超过了8百万。&lt;/p&gt;
&lt;h4&gt;Live类型分布&lt;/h4&gt;
&lt;p&gt;知乎Live有视频和音频两种类型，下图为其分布情况&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-bf1761913d6a28654ba35fda3a9facc3_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到除了极少部分的视频形式的Live，大多数Live是音频形式的。这或许是由于音频Live对于主讲人来说有更大的自由度，不像视频主讲人需要考虑讲授的环境，视频中拍到的背景之类的因素。&lt;/p&gt;
&lt;h4&gt;最贵Live&lt;/h4&gt;
&lt;p&gt;知乎Live价格的中位数是19元，90%分位数是39.9元，超过39.9元的Live就进入前10%最贵Live的列表了。&lt;/p&gt;
&lt;p&gt;按价格区间划分，统计每个区间的Live数量，如下图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-ec6b9b4f5b76476918657c4808ab4172_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看出，大部分Live的价格集中在0-10元和10-100元两个区间，只有少数Live在100元以上，100元以上的Live共有34场。&lt;/p&gt;
&lt;p&gt;我们来看下最贵的5场知乎Live&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/893842955469721600"&gt;如何避免股市中的各种坑？&lt;/a&gt;  499.99元&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/865921682613891072"&gt;在中国做期货高频交易的日子&lt;/a&gt;  499.99元&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/890544211793956865"&gt;作者摄影Lv1.5：摄影中的光照与材质分析&lt;/a&gt;  549.00元&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/890546314826379264"&gt;作者摄影Lv1.7：建设你的专业暗房工作室&lt;/a&gt;  598.00元&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/890542532243652608"&gt;作者摄影Lv1.6：学不会的区域曝光法，这次解决&lt;/a&gt;  698.00元&lt;/p&gt;
&lt;p&gt;之前APP端给我推荐过 &lt;a href="https://www.zhihu.com/lives/865921682613891072"&gt;在中国做期货高频交易的日子&lt;/a&gt; ，当时着实被500大洋的价格吓到了，但没想到统计发现还有比这更贵的。&lt;/p&gt;
&lt;h4&gt;时间最长Live&lt;/h4&gt;
&lt;p&gt;对于音频类型的Live，时间长度就是Live的语音时间；对于视频类型的Live，时间长度就是视频的长度。知乎Live时间长度的中位数是62分钟，90%分位数是112分钟，超过112分钟的Live就进入前10%最长Live的列表了。&lt;/p&gt;
&lt;p&gt;按照时间长度划分区间，不同区间的Live数量如下图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-eff8d48ce62c2fc5f92b3c3e404ac9cc_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到，大部分的Live时长都集中在10-100分钟的区间。&lt;/p&gt;
&lt;p&gt;来看下最长的5场知乎Live&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/805891453787176960"&gt;装修及家具造成甲醛等污染的防控&lt;/a&gt;  302分钟&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/935181446809792512"&gt;【考研那些坑】 二本如何高分考入北航&lt;/a&gt;  333分钟&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/815217146249494528"&gt;普通学生，从审计到投行&lt;/a&gt;  357分钟&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/919153088173056000"&gt;英菲尼迪走「芯」全拆解&lt;/a&gt;  378分钟&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/789872613613633536"&gt;LED 照明设计如何避坑&lt;/a&gt;  692分钟&lt;/p&gt;
&lt;p&gt;非常有趣，场场都超过了5个小时。注意看最后一场，是的，你没有看错，最长的一场居然超过了11个小时。能够坚持听完11个小时的同学，应该也是主讲人的真爱了吧。&lt;/p&gt;
&lt;h4&gt;最受欢迎Live&lt;/h4&gt;
&lt;p&gt;知乎Live的参与人数中位数是247人，90%分位数是1673人，参与人数大于1673的Live就跻身前10%受欢迎的Live了。&lt;/p&gt;
&lt;p&gt;按照参与人数划分区间，统计每个区间的Live数量，如下图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a24b524ffee7f26733a1a4aef8f5134e_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到，大部分Live的参与人数在0-10万人之间，有少数Live的参与人数超过了10万人。&lt;/p&gt;
&lt;p&gt;我们来看下参与人数最多的5场Live&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/757587093366009856"&gt;我的读书经验&lt;/a&gt;  48423 人参与&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/889162560450990080"&gt;知乎 2018 校园招聘空中宣讲会&lt;/a&gt;  50676 人参与&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/778982517263843328"&gt;如何在短时间内掌握一项技能&lt;/a&gt;  55566 人参与&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/772120076848467968"&gt;人人都能用英语&lt;/a&gt;  56481 人参与&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/763851343583547392"&gt;一小时建立终生受用的阅读操作系统&lt;/a&gt;  121678 人参与&lt;/p&gt;
&lt;p&gt;注意看最后一场Live，有超过12万人参与。我国最大的体育场能容纳9万多人，可以说这场Live的热门程度超过了绝大多数体育赛事、演唱会的现场参与人数。&lt;/p&gt;
&lt;h4&gt;最受好评Live&lt;/h4&gt;
&lt;p&gt;用户听完Live可以对Live进行评分。知乎Live评分的平均值是3.56分，90%分位数是4.88分，评分大于4.88的Live就跻身前10%的优质Live了。&lt;/p&gt;
&lt;p&gt;Live的评分最低0分，最高5分。按照评分划分区间，不同区间的Live数量如下图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-d888f73ab923a97189e95c3735e35909_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;非常有意思，大多数知乎Live的评分都在3-4分和4-5分这两个区间，可以看出来，知乎用户在评分上还是很nice的。&lt;/p&gt;
&lt;p&gt;我们来看一下参与人数在100人以上的最受好评的5场Live&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/893139172620140544"&gt;留学文书：讲一个故事打动名校&lt;/a&gt;  5.0         &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/866307074416599040"&gt;加密数字货币 ICO 入门及前景&lt;/a&gt;  5.0         &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/918546107322212352"&gt;从零学会数据分析：数据分析的基本过程&lt;/a&gt;  5.0         &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/818491503964987392"&gt;春季日本樱花之旅的正确打开方式&lt;/a&gt;  5.0         &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/880788993145475072"&gt;游戏设计：易用性&lt;/a&gt;  5.0   &lt;/p&gt;
&lt;p&gt;这5场Live都是满分Live，不知是不是名副其实。&lt;/p&gt;
&lt;h4&gt;最吸金Live&lt;/h4&gt;
&lt;p&gt;这里用 &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.zhihu.com/equation?tex=%E6%94%B6%E5%85%A5+%3D+Live%E4%BB%B7%E6%A0%BC+%5Ctimes+%E5%8F%82%E4%B8%8E%E4%BA%BA%E6%95%B0"&gt; &lt;/p&gt;
&lt;p&gt;来估算Live的收入情况。由于知乎Live会搞促销活动，实际收入可能会低于此数值。知乎Live收入的中位数是4168元，90%分位数是33953元，收入大于33953元的Live就跻身前10%最吸金行列了。&lt;/p&gt;
&lt;p&gt;按照Live收入划分区间，不同区间的Live数量如下图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a0b4b7b46a176466f3d77ea930b04530_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到，大多数Live的收入在10万以下。&lt;/p&gt;
&lt;p&gt;我们来看下最吸金的5场Live&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/772120076848467968"&gt;人人都能用英语&lt;/a&gt;  1129055.19元&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/752228199001247744"&gt;正装入门：先穿对，再穿贵&lt;/a&gt;  1704708.99元&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/795679158356312064"&gt;从月球回来这 48 年&lt;/a&gt;  2386296.00元&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/823888660779892736"&gt;诺贝尔经济学奖得主：特朗普上台，中国该往何处去&lt;/a&gt;  3499353.00元&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/lives/763851343583547392"&gt;一小时建立终生受用的阅读操作系统&lt;/a&gt;  12167800.00元&lt;/p&gt;
&lt;p&gt;非常震惊，上面的每场Live都超过了百万收入，最后一场 &lt;a href="http://www.zhihu.com/people/e8e1b3c9f41a0528399733b96005db69"&gt;@李笑来&lt;/a&gt; 老师的Live更是超过了千万收入。仔细阅读本文的同学可以发现，这场Live除了是最吸金的Live之外，还是最受欢迎（参与人数最多）的Live。&lt;/p&gt;
&lt;p&gt;以上是本次统计的所有图表和数据。本人还是非常喜欢Live这种知识分享的模式，收听的几场Live质量都很高，给了我很多启发。知乎Live还在不断发展中，也期待将来能够有越来越多高质量的Live出现。&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="数据分析"></category><category term="爬虫"></category><category term="数据分析"></category></entry><entry><title>用Python给图片加上抖音效果</title><link href="http://www.shenzhongqiang.com/douyin-effect-image.html" rel="alternate"></link><published>2018-06-15T00:00:00+08:00</published><updated>2018-06-15T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-15:/douyin-effect-image.html</id><summary type="html">&lt;p&gt;前一篇 &lt;a href="https://zhuanlan.zhihu.com/p/37951669"&gt;Python实现抖音体&lt;/a&gt; 给文字加上抖音效果，这一篇我们来用Python给图片加上抖音效果。原理其实是类似的 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;前一篇 &lt;a href="https://zhuanlan.zhihu.com/p/37951669"&gt;Python实现抖音体&lt;/a&gt; 给文字加上抖音效果，这一篇我们来用Python给图片加上抖音效果。原理其实是类似的，这里我们详细地讲解一下过程，并且给出代码实现。&lt;/p&gt;
&lt;h4&gt;准备工作&lt;/h4&gt;
&lt;p&gt;程序用到Pillow，numpy，需要安装这些库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install Pillow
pip3 install numpy
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;基本原理&lt;/h4&gt;
&lt;p&gt;我们来观察一下抖音的logo&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-291e75da28f3d0ada7a7e719a908df44_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;上面这张图其实就是一张蓝绿色的图片和一张红色的图片略微错开后叠加在一起。这就是生成抖音效果的基本原理。&lt;/p&gt;
&lt;p&gt;我们来做一个简单的实验，这里有一张蓝绿色的正方形&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-ba2b80b203b1c867309f052ca1f2fee9_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;和一张红色的正方形&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-7216e62eef417aae12af4444e441cd59_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;两张图片已错开一定位置，所以不完全重叠。&lt;/p&gt;
&lt;p&gt;现在我们将两张图片相加&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-edc2486a68d32c73ef66df3894c0f9c7_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;得到的效果和上面抖音的logo是类似的，这正是我们想要的效果。&lt;/p&gt;
&lt;p&gt;那用程序怎样实现上面的效果呢？&lt;/p&gt;
&lt;p&gt;其实很简单。计算机里的每张图片都是由一系列的像素组成。对于RGB模式的图片，每个像素点都是一个三元组 (r, g, b)，分别对应红色、绿色和蓝色通道的值。每一张图片都是一个三维数组，保存了了每行每列上的每个像素点的信息。&lt;/p&gt;
&lt;p&gt;下面是一张图片的三维数组&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[
  [[ 90  88 110], [ 76  73  94], [ 63  60  79], ..., [ 24  26  21], [ 23  25  20], [ 22  24  19]],
  [[131 132 153], [119 120 141], [112 110 131], ..., [ 23  25  20], [ 22  24  19], [ 22  24  19]],
  ...
]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每个三元组都是一个像素点，三元组中的值分别代表R，G，B三个通道的值。&lt;/p&gt;
&lt;p&gt;前面蓝绿色正方形和红色正方形叠加的过程其实就是两张图片对应的三维数组相加的过程。蓝绿色正方形的每个像素点的值都是 (0, 255, 255)，红色正方形每个像素点的值是 (255, 0, 0)，不重叠的地方就是两张图片各自原来的颜色，重叠的地方就是 (0, 255, 255) + (255, 0, 0) = (255, 255, 255)，也就是我们看到的白色。&lt;/p&gt;
&lt;p&gt;理解了上面的原理，要生成抖音效果的图片，我们只需要基于原图生成一张R通道的图片和一张GB通道的图片，略微错开后，生成两个三维数组，然后将两个数组相加就可以了。&lt;/p&gt;
&lt;h4&gt;代码实现&lt;/h4&gt;
&lt;p&gt;我们使用Pillow库和numpy库来把图片转换成三维数组。&lt;/p&gt;
&lt;p&gt;首先打开图片，假设原图的路径存在filepath中，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;img_orig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将图片转化成三维数组&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;array_orig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_orig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;复制原图的三维数组，将G和B通道的值设为0，只剩下R通道的值非0，这样操作后就生成了只包含R通道的图片&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;array_r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array_orig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;array_r&lt;/span&gt;&lt;span class="p"&gt;[:,:,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;image_r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array_r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样的，生成GB通道的图片，只需要把R通道的值设为0，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;array_gb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array_orig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;array_gb&lt;/span&gt;&lt;span class="p"&gt;[:,:,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;image_gb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array_gb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来，生成一张黑色背景的画布，把R通道的图片贴在画布上，这里粘贴的位置设成 (5, 5) 是为了与GB通道的图片错开位置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;canvas_r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;RGB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img_orig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;canvas_r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;image_r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于GB通道的图片也是类似，贴在另一张画布上，粘贴的位置设成 (0, 0)，与上面R通道的图片错开一定位置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;canvas_gb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;RGB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img_orig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;canvas_gb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_gb&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;image_gb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将两张画布的三维数组相加，合成效果并显示&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvas_r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvas_gb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;测试&lt;/h4&gt;
&lt;p&gt;好了，令人兴奋的时刻到来了，我们来检验一下我们的成果~&lt;/p&gt;
&lt;p&gt;这是原图，一直贱贱的小柴犬&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-51b2328f8356a0725b8ae1772d01e21f_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这是程序生成的图片&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-810b2350884291749317a744d8dfac04_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;加上特效后仿佛看到了动图的效果。是不是很有趣~ &lt;/p&gt;
&lt;p&gt;完整代码已上传GitHub。公众号【&lt;strong&gt;Python与数据分析&lt;/strong&gt;】后台回复“抖音”可获取代码地址。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-ea99d43d4233dc22bca1718b50db60c2_b.jpg"&gt;&lt;/p&gt;</content><category term="图像处理"></category><category term="Python"></category><category term="图像处理"></category></entry><entry><title>Python实现抖音体</title><link href="http://www.shenzhongqiang.com/douyin-effect-text" rel="alternate"></link><published>2018-06-11T00:00:00+08:00</published><updated>2018-06-11T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-11:/douyin-effect-text</id><summary type="html">&lt;p&gt;周末在家沉迷抖音。看完抖音，索性用Python写了个程序实现抖音效果的字体。&lt;/p&gt;
&lt;p&gt;程序的名字就叫&lt;strong&gt;&lt;em&gt;douyinti …&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;周末在家沉迷抖音。看完抖音，索性用Python写了个程序实现抖音效果的字体。&lt;/p&gt;
&lt;p&gt;程序的名字就叫&lt;strong&gt;&lt;em&gt;douyinti&lt;/em&gt;&lt;/strong&gt;，代码已发布到PYPI，直接运行下面的命令即可安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install douyinti
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装完后，命令行可以直接运行douyinti这个命令。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ douyinti --help
usage: douyinti &lt;span class="o"&gt;[&lt;/span&gt;-h&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--text TEXT&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--out OUT&lt;span class="o"&gt;]&lt;/span&gt;

optional arguments:
  -h, --help   show this &lt;span class="nb"&gt;help&lt;/span&gt; message and &lt;span class="nb"&gt;exit&lt;/span&gt;
  --text TEXT  text to add effect
  --out OUT    path of output image
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有了&lt;strong&gt;&lt;em&gt;douyinti&lt;/em&gt;&lt;/strong&gt;这个命令后，我们就可以生成我们想要的抖音体文字了（中英文都支持哦）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;douyinti --text 带我飞 --out fly.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-4af0e7e34f8cff3a54972f372d84bb98_b.jpg"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;douyinti --text &amp;quot;Let&amp;#39;s rock&amp;quot; --out rock.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-f6b1b8bd663971f1c6367025f1ed0ec3_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;是不是很酷~&lt;/p&gt;
&lt;p&gt;程序的原理也很简单，就是基于原图生成两张图片，一张红色，一张绿色，略微错开后，叠加在一起，就有了抖音的效果。&lt;/p&gt;
&lt;p&gt;对源码感兴趣的同学可以参见github，源码已上传&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=https%3A//github.com/pythonml/douyinti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果觉得有趣，欢迎点赞~&lt;/p&gt;</content><category term="图像处理"></category><category term="Python"></category><category term="图像处理"></category></entry><entry><title>用Python算24点</title><link href="http://www.shenzhongqiang.com/python-calc-24.html" rel="alternate"></link><published>2018-06-02T00:00:00+08:00</published><updated>2018-06-02T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-06-02:/python-calc-24.html</id><summary type="html">&lt;p&gt;小外甥女的课后作业是算24点，看了一下题目，发现都挺难的，像下面这些：&lt;/p&gt;
&lt;p&gt;7 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;小外甥女的课后作业是算24点，看了一下题目，发现都挺难的，像下面这些：&lt;/p&gt;
&lt;p&gt;7  7  3  3&lt;/p&gt;
&lt;p&gt;8  8  3  3&lt;/p&gt;
&lt;p&gt;5  5  5  1&lt;/p&gt;
&lt;p&gt;1  5  7  10&lt;/p&gt;
&lt;p&gt;2  5  5  10&lt;/p&gt;
&lt;p&gt;只能用加减乘除，算出24点。&lt;/p&gt;
&lt;p&gt;发现心算不容易，于是突发奇想，用Python写了一个程序来算。&lt;/p&gt;
&lt;h4&gt;基本思路&lt;/h4&gt;
&lt;p&gt;枚举4个数字可以组成的所有的算式，找到其中等于24的式子。&lt;/p&gt;
&lt;p&gt;对于每一个算式，我们用一棵二叉树来存取。根节点保存运算符（+,-,*,/），左子树保存运算符左侧的子算式，右子树保存运算符右侧的子算式，运算结果也存在根节点中。如下图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-76bec4dc034124082b813a71e333e030_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这棵二叉树对应的算式就是 (4 + 10) + (2 * 5) 。非常简单直观。&lt;/p&gt;
&lt;p&gt;有了二叉树后，对于给定的一组数字，我们就可以递归地列出这组数字组成的所有可能的算式。&lt;/p&gt;
&lt;h4&gt;具体实现&lt;/h4&gt;
&lt;p&gt;首先定义二叉树。对于树中的每一个节点，我们用一个Node类来保存&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left_node&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right_node&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;
        &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{} {} {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_operator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;Node operator=&amp;quot;{}&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;Node value=&amp;quot;{}&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Node类中，如果 _operator 是None，则 _result 就是数字本身，如果 _operator 不为None，则 _result 表示的是左右两棵子树运算的结果。&lt;/p&gt;
&lt;p&gt;对于一组给定顺序的数字，我们用递归的方式获取所有可能的算式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_all_trees&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;treelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;left_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;right_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="n"&gt;left_trees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build_all_trees&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;right_trees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build_all_trees&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;left_tree&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;left_trees&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;right_tree&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;right_trees&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;combined_trees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build_tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;treelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combined_trees&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;treelist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面函数的输入是一组数字，第一层for循环中将这组数字，拆成左右两部分，分别对应左右两棵子树的部分，输出的 treelist 是所有可能的算式。&lt;/p&gt;
&lt;p&gt;对于给定的左子树和右子树，build_tree 函数用加减乘除把它们连接在一起，组成新的二叉树。build_tree 函数如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_tree&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;treelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;tree1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tree1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;treelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tree2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tree2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;treelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tree4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tree4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;treelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;right_tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_result&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tree5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;tree5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;treelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;treelist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;build_tree 中会枚举所有的运算方式，组成新的二叉树并返回所有可能的组合。&lt;/p&gt;
&lt;p&gt;这里需要注意的是，如果运算方式是除法，除数也就是右侧子算式的结果不能为0。&lt;/p&gt;
&lt;p&gt;罗列出所有的算式后，我们就来找一找有没有算式的结果是24。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_24&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;perms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;perms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;treelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build_all_trees&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;treelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rel_tol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{} - {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上就实现了我们的算法。&lt;/p&gt;
&lt;h4&gt;测试&lt;/h4&gt;
&lt;p&gt;下面是令人兴奋的时刻。我们用文章开始的几个例子来测一下我们的算法。&lt;/p&gt;
&lt;p&gt;运行结果如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(7, 7, 3, 3)     - (7 * ((3 / 7) + 3))
(8, 8, 3, 3)     - (8 / (3 - (8 / 3)))
(5, 5, 5, 1)     - ((5 - (1 / 5)) * 5)
(1, 5, 7, 10)    - ((1 + (7 / 5)) * 10)
(2, 5, 5, 10)    - ((5 - (2 / 10)) * 5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;哈哈，都用到了小数运算，怪不得心算这么难呢~ 是不是很有趣？&lt;/p&gt;
&lt;p&gt;算法中有一些重复的计算，有关于优化算法的建议，欢迎留言~&lt;/p&gt;
&lt;p&gt;完整代码已上传GitHub。公众号【Python与数据分析】后台回复“&lt;strong&gt;二十四&lt;/strong&gt;”可获取代码地址。&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>推荐一款提升web开发效率的利器</title><link href="http://www.shenzhongqiang.com/chrome-json-view.html" rel="alternate"></link><published>2018-05-30T00:00:00+08:00</published><updated>2018-05-30T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-05-30:/chrome-json-view.html</id><summary type="html">&lt;p&gt;今天要推荐的是一款Chrome插件，名叫JSONView。&lt;/p&gt;
&lt;p&gt;在做web开发的时候，api接口一般是返回json格式的。而在调试api接口的时候 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;今天要推荐的是一款Chrome插件，名叫JSONView。&lt;/p&gt;
&lt;p&gt;在做web开发的时候，api接口一般是返回json格式的。而在调试api接口的时候，我们经常需要在浏览器里查看api的返回结果。&lt;/p&gt;
&lt;p&gt;没有JSONView的时候，Chrome显示的json是这样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-114cd53cd898decf0cd936a1440c7bf9_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;各种各样的字段密密麻麻挤在一起，看都看不清楚，每次调试起来都非常痛苦。&lt;/p&gt;
&lt;p&gt;有了JSONView之后，Chrome显示的json就变成了这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c85e25e8e6aadf3f9bcdabcd90fccfaf_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;一下子清楚了很多有没有？Debug效率大大提升了有没有？安装了这款插件后，心情都变好了呢~&lt;/p&gt;
&lt;p&gt;通过Chrome应用商店安装这款插件需科学上网。&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>用yield实现协程</title><link href="http://www.shenzhongqiang.com/implement-coroutine-with-yield.html" rel="alternate"></link><published>2018-05-28T00:00:00+08:00</published><updated>2018-05-28T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-05-28:/implement-coroutine-with-yield.html</id><summary type="html">&lt;p&gt;上一篇 &lt;a href="https://zhuanlan.zhihu.com/p/37257918"&gt;理解python中的yield关键字&lt;/a&gt; 介绍了使用yeld实现生成器函数，这一篇我们来继续深入的了解一下yield，用yield实现协程 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;上一篇 &lt;a href="https://zhuanlan.zhihu.com/p/37257918"&gt;理解python中的yield关键字&lt;/a&gt; 介绍了使用yeld实现生成器函数，这一篇我们来继续深入的了解一下yield，用yield实现协程。&lt;/p&gt;
&lt;p&gt;先来解答一下上一篇留下的问题：下面的代码为什么第二次调用next打印None呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;事实是这样的，yield语句默认返回None。当第一次调用next方法时，生成器函数开始执行，执行到yield表达式为止，但此时赋值操作并为执行。上面的代码中，在第一次调用next的时候，echo生成了1。第二次调用next的时候，yield表达式的值赋给了n，n此时变成None了，再次yield n的时候就自然生成None了。&lt;/p&gt;
&lt;p&gt;好了，接下来开始本文的主题。&lt;/p&gt;
&lt;h4&gt;什么是协程&lt;/h4&gt;
&lt;p&gt;引用官方的说法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与线程相比，协程更轻量。一个Python线程大概占用8M内存，而一个协程只占用1KB不到内存。协程更适用于IO密集型的应用。&lt;/p&gt;
&lt;p&gt;在讲述协程的实现前，我们有必要先来看一下send方法。&lt;/p&gt;
&lt;h4&gt;send方法&lt;/h4&gt;
&lt;p&gt;yield表达式有一个返回值，send方法的作用就是控制这个返回值，send的参数就是yield表达式的返回值。我们来看一下官方文档上关于send的定义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;generate.send(&lt;em&gt;value&lt;/em&gt;)：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;生成器的send(value)方法会将value值“发送”给生成器中的方法。value参数变成当前yield表达式的值。send()方法会返回生成器生成的下一个yield值或者StopIteration异常（如果生成器没有生成下一个yield值就退出了）。当通过调用send()启动生成器时，value值必须为None，因为当前还没有yield表达式可以接收参数。&lt;/p&gt;
&lt;p&gt;是不是看晕了？我们来看一个例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;before yield&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;after yield:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 程序运行到yield并停在该处,等待下一个next&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 给yield发送值1,这个值被赋值给了x，并且打印出来,然后继续下一次循环停在yield处&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 给yield发送值2,这个值被赋值给了x，并且打印出来,然后继续下一次循环停在yield处&lt;/span&gt;
&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 没有给x赋值，执行print语句，打印出None,继续循环停在yield处&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;before yield
after yield: 1
before yield
after yield: 2
before yield
after yield: None
before yield
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一次调用next的时候，程序从函数最开始处运行，打印出&lt;/p&gt;
&lt;p&gt;before yield&lt;/p&gt;
&lt;p&gt;执行到yield处，停在该处。&lt;/p&gt;
&lt;p&gt;接下来，向生成器send(1)。send在这里起到两个作用，一个是将参数值赋给yield的返回值，然后该返回值赋给了变量x；一个是继续程序的执行，直到下一次遇到yield停下来。第二个功能和next类似。其实，next 就相当于 send(None) 。&lt;/p&gt;
&lt;p&gt;执行了 send(1) 后，x被赋值给yield的返回值，即send的参数1，并继续往下执行，打印出了&lt;/p&gt;
&lt;p&gt;after yield: 1&lt;/p&gt;
&lt;p&gt;继续执行，回到循环的开始，向下执行，打印出&lt;/p&gt;
&lt;p&gt;before yield&lt;/p&gt;
&lt;p&gt;再次遇到yield，停在该处，等待下一次send或next的调用。&lt;/p&gt;
&lt;p&gt;向生成器send(2)。这里的步骤和 send(1) 相同，打印出下面两条后，在yield处停住。&lt;/p&gt;
&lt;p&gt;after yield: 2&lt;/p&gt;
&lt;p&gt;before yield&lt;/p&gt;
&lt;p&gt;执行 next(g)，x被赋值为yield表达式的返回值，也就是None，继续向下执行，打印出&lt;/p&gt;
&lt;p&gt;after yield: None&lt;/p&gt;
&lt;p&gt;再次回到循环的开始，向下执行，打印出&lt;/p&gt;
&lt;p&gt;before yield&lt;/p&gt;
&lt;p&gt;程序运行结束。&lt;/p&gt;
&lt;p&gt;现在是不是有点理解send了？&lt;/p&gt;
&lt;h4&gt;yield和send实现Python协程&lt;/h4&gt;
&lt;p&gt;我们来用协程实现一个生产者/消费者的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[consumer] consuming &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;...&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;well received&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[producer] producing &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;...&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[producer] consumer return: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行上面的程序，会输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[producer] producing 1...
[consumer] consuming 1...
[producer] consumer return: well received
[producer] producing 2...
[consumer] consuming 2...
[producer] consumer return: well received
[producer] producing 3...
[consumer] consuming 3...
[producer] consumer return: well received
[producer] producing 4...
[consumer] consuming 4...
[producer] consumer return: well received
[producer] producing 5...
[consumer] consuming 5...
[producer] consumer return: well received
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;produce函数负责生产数据，consume函数负责消费数据。具体执行过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;首先调用consume函数，consume函数的返回是一个生成器，把这个生成器传入produce函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;produce函数中调用next(c)启动生成器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;计算 n = n+1 生成数据，一旦生产了数据，调用 c.send(n) 切换到consume执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;consume函数中拿到数据后赋值给n，继续执行yield后面的语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;consume函数中打印消费的数据，并设置返回值r，又回到循环的开始，通过yield把结果传回。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;produce拿到consume返回的值，继续生产下一个数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;5个数据生产完毕后，循环结束，通过c.close()关闭consume，结束全过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;produce和consume函数在一个线程内执行，通过调用send方法和yield互相切换，实现协程的功能。&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>理解python中的yield关键字</title><link href="http://www.shenzhongqiang.com/understand-yield-in-python.html" rel="alternate"></link><published>2018-05-26T00:00:00+08:00</published><updated>2018-05-26T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-05-26:/understand-yield-in-python.html</id><summary type="html">&lt;p&gt;想必大家都看到过这样的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;i …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;想必大家都看到过这样的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的这段代码会计算0-9的平方并打印出来。&lt;/p&gt;
&lt;p&gt;那么问题来了，这段代码和下面的这段代码有什么区别呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的关键点是，前一段代码使用了yield关键字。那么yield是什么呢？要理解yield，还得从容器开始说起。&lt;/p&gt;
&lt;h4&gt;容器（container）&lt;/h4&gt;
&lt;p&gt;像列表（list）、集合（set）、序列（tuple）、字典（dict）都是容器。简单的说，容器是一种把多个元素组织在一起的数据结构，可以逐个迭代获取其中的元素。容器可以用in来判断容器中是否包含某个元素，如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# 输出 True&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# 输出 True&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 输出 True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大多数的容器都是可迭代对象，可以使用某种方式访问容器中的每一个元素。&lt;/p&gt;
&lt;h4&gt;迭代器（iterator）&lt;/h4&gt;
&lt;p&gt;实现了__iter__和__next__方法的对象都称为迭代器。迭代器是一个有状态的对象，在调用next() 的时候返回下一个值，如果容器中没有更多元素了，则抛出StopIteration异常。&lt;/p&gt;
&lt;p&gt;看下面的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a
b
c
Traceback (most recent call last):
  File &amp;quot;/tmp/a.py&amp;quot;, line 19, in &amp;lt;module&amp;gt;
    print(next(it))
StopIteration
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为更好地理解迭代器的内部运行机制，我们再来看一个斐波那契数列的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__next__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;

&lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1
1
2
3
5
8
13
21
34
55
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要不断地调用next() 方法，上面的生成器可以生成一个无限长的斐波那契数列。&lt;/p&gt;
&lt;p&gt;迭代器是一种Lasy Load的模式，只有在调用时才生成值，没有调用的时候就等待下一次调用。&lt;/p&gt;
&lt;h4&gt;生成器和yield&lt;/h4&gt;
&lt;p&gt;生成器其实是一种特殊的迭代器，但是不需要像迭代器一样实现__iter__和__next__方法，只需要使用关键字yield就可以。&lt;/p&gt;
&lt;p&gt;我们来实现一个同样的斐波那契数列，但这次使用的是生成器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;
        &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1
1
2
3
5
8
13
21
34
55
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的 fib 函数中没有 return 关键字。当运行 f = fib() 的时候，它返回的是一个生成器对象。在调用 fib() 的时候并不会运行 fib 函数中的代码，只有在调用 next() 的时候才会真正运行其中的代码。&lt;/p&gt;
&lt;p&gt;回到文章最开始的问题，两种方式实现的generate_square函数，一个使用了yield关键字，一个使用了列表保存所有的值并返回列表，两者的区别在什么地方？&lt;/p&gt;
&lt;p&gt;对于前一种实现方式，使用了生成器，在调用函数的时候不会一次性生成所有的元素，而是在每次调用 next() 才生成一个元素；而后一种方式，在调用函数的时候就生成了所有元素，相比之下，更耗费内存和CPU。&lt;/p&gt;
&lt;p&gt;看到这里，大家是不是理解了yield关键字呢？&lt;/p&gt;
&lt;p&gt;那么给大家出一个思考题：下面的代码为什么第二次调用next打印None呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案下期揭晓~&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号【Python与数据分析】，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>520用Python画一颗特别的♥送给她</title><link href="http://www.shenzhongqiang.com/special-heart-for-beloved.html" rel="alternate"></link><published>2018-05-20T00:00:00+08:00</published><updated>2018-05-20T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-05-20:/special-heart-for-beloved.html</id><summary type="html">&lt;p&gt;今天520，大家有没有和心爱的女生在一起呢？&lt;/p&gt;
&lt;p&gt;今天我们来用Python画一颗特别的爱心，送给那个特别的她，给她一份浪漫的惊喜吧 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;今天520，大家有没有和心爱的女生在一起呢？&lt;/p&gt;
&lt;p&gt;今天我们来用Python画一颗特别的爱心，送给那个特别的她，给她一份浪漫的惊喜吧~&lt;/p&gt;
&lt;p&gt;还记得那个心形曲线的公式吗？&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.zhihu.com/equation?tex=%28x%5E%7B2%7D%2By%5E%7B2%7D-1%29%5E%7B3%7D-x%5E%7B2%7Dy%5E%7B3%7D%3D0"&gt; &lt;/p&gt;
&lt;p&gt;我们用Python基于上面的公式来画一画爱心吧~&lt;/p&gt;
&lt;h4&gt;准备工作&lt;/h4&gt;
&lt;p&gt;代码中用到numpy和matplotlib，需要先安装这两个库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install numpy
pip3 install matplotlib
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;爱心基本款&lt;/h4&gt;
&lt;p&gt;我们先来画一颗最朴素的爱心&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="n"&gt;x_coords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y_coords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;y_coords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x_coords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.03&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.03&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.03&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.03&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;heart_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;heart_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heart_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;heart_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行后上面的代码会显示下面的图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-84fbd1170f8691f40c30590575cd2a08_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;爱心的形状有了，接下来我们来解锁高级定制款，给爱心填充不同的颜色。&lt;/p&gt;
&lt;h4&gt;爱心高级定制款&lt;/h4&gt;
&lt;p&gt;给爱心填充不同的颜色，只需在上面代码的scatter函数中指定cmap参数即可，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heart_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;heart_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heart_x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面是不同色系的定制款&lt;/p&gt;
&lt;p&gt;&lt;cmap="autumn"&gt; 橙色的爱心送给热情洋溢的她&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-b53db16256d7c9fd8b4274195efebdd2_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;cmap="cool"&gt; 紫色的爱心送给优雅宁静的她&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-62bfdd9c5e2fe5b1639b825f47009320_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;cmap="magma"&gt; 晚霞般的爱心送给醇厚脱俗的她&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-88d2cf35d938685cafac388f389cf6b3_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;cmap="rainbow"&gt; 彩虹般的爱心送给充满绚丽幻想的她&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-48f56ffc60082dcfab467d8371bf6fbc_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;cmap="Reds"&gt; 炽热的爱心送给热烈奔放的她&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c6ecaa9f7e5e5b645caeedbf3d52021d_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;cmap="spring"&gt; 青春的爱心送给充满朝气的她&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-885690905761323f5e0d9959066e42e2_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;cmap="viridis"&gt; 翡翠色的爱心送给平静柔和的她&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e88092fb87f9e2e465026611128615b3_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;cmap="gist\_rainbow"&gt; 五彩缤纷的爱心送给多姿多彩的她&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-4110f68d43f8dfa8272a496500c65946_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;大家是不是学会了呢 ？&lt;/p&gt;
&lt;p&gt;最后祝大家520快乐！&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号，欢迎扫一扫关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>酷酷的format</title><link href="http://www.shenzhongqiang.com/understand-python-keyword-format.html" rel="alternate"></link><published>2018-05-20T00:00:00+08:00</published><updated>2018-05-20T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-05-20:/understand-python-keyword-format.html</id><summary type="html">&lt;p&gt;以前格式化字符串一直用的%，最近认识了一下format。format是Python中新的格式化字符串的方式（相较于%而言 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;以前格式化字符串一直用的%，最近认识了一下format。format是Python中新的格式化字符串的方式（相较于%而言），用起来非常方便，可以实现不少%不能实现的功能。本文就来介绍一下酷酷的format。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本用法&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Peppa Pig&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 引用第一个参数&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;Hello Peppa Pig&amp;#39;&lt;/span&gt;

&lt;span class="s2"&gt;&amp;quot;{} is cute&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Peppa Pig&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 引用第一个参数&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;Peppa Pig is cute&amp;#39;&lt;/span&gt;

&lt;span class="s2"&gt;&amp;quot;My name is {name}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Peppa Pig&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 引用名字为name的参数&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;My name is Peppa Pig&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;类型转换&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Peppa pig is a cute {0!s}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;baby&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# !s 相当于对于参数调用str()&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;Peppa pig is a cute baby&amp;#39;&lt;/span&gt;

&lt;span class="s2"&gt;&amp;quot;Peppa pig is a cute {0!r}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;baby&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# !r 相当于对于参数调用repr()&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;quot;Peppa pig is a cute &amp;#39;baby&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;format中进行进制转换&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{0} in HEX is {0:#x}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;16 in HEX is 0x10&amp;#39;&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;{0} is OCT is {0:#o}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;16 is OCT is 0o20&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;对齐字符串&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{:&amp;gt;5}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 设置宽度为5，右对齐&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;{:&amp;gt;5}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;{:&amp;gt;5}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;{:&amp;gt;5}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 输出下面的结果&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;    1&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;   10&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;  100&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39; 1000&amp;#39;&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;{:_&amp;lt;10}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 左对齐，并且指定&amp;quot;_&amp;quot;填充空白部分&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;test______&amp;#39;&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;{:_^10}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 居中对齐，并且指定&amp;quot;_&amp;quot;填充两侧&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;___test___&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# 注意：用%格式化字符串不支持居中对齐&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;截断字符串&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{:.5}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello Peppa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 截取前5个字符&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;Hello&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;时间格式化&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;{:%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; %H:%M}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;2018-05-19 21:00&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# 注意：用%格式化字符串不支持此功能&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;访问对象属性&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;Pig name=&amp;quot;{0}&amp;quot; age={1}&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Peppa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Peppa is {0.age} years old, {0.weight} kilograms&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# 输出 Peppa is 5 years old, 30 kilograms&lt;/span&gt;
&lt;span class="c1"&gt;# 注意：用%格式化字符串不支持此功能&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;访问元组中的元素&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;X: {0[0]};  Y: {0[1]}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;X: 1;  Y: 2&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# 注意：用%格式化字符串不支持此功能&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;访问字典中的元素&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;peppa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Peppa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;My name is {pig[name]} and my age is {pig[age]}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pig&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;peppa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;My name is Peppa and my age is 5&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# 注意：用%格式化字符串不支持此功能&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;参数指定格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;format支持传入参数指定格式，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{:{char}{align}{width}}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;align&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;___test___&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# 注意：用%格式化字符串不支持此功能&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;{:{dfmt} {tfmt}}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dfmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tfmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%H:%M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 &amp;#39;2018-05-19 21:00&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# 注意：用%格式化字符串不支持此功能&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先整理了这一些，欢迎补充~&lt;/p&gt;
&lt;p&gt;本文已更新同名公众号&lt;strong&gt;【Python与数据分析】 &lt;/strong&gt;(ID: PythonML)，这里分享有趣的 Python 知识，用 Python 做有趣的数据分析。欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c6367761654e55126b5bca1a6a69a755_r.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>Python面试之with与上下文管理器</title><link href="http://www.shenzhongqiang.com/understand-with-context-manager.html" rel="alternate"></link><published>2018-05-09T00:00:00+08:00</published><updated>2018-05-09T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-05-09:/understand-with-context-manager.html</id><summary type="html">&lt;h4&gt;With基本语法&lt;/h4&gt;
&lt;p&gt;Python老司机应该对下面的语法不陌生&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h4&gt;With基本语法&lt;/h4&gt;
&lt;p&gt;Python老司机应该对下面的语法不陌生&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码往output文件写入了Hello world字符串，with语句会在执行完代码块后自动关闭文件。这里无论写文件的操作成功与否，是否有异常抛出，with语句都会保证文件被关闭。&lt;/p&gt;
&lt;p&gt;如果不用with，我们可能要用下面的代码实现类似的功能&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到使用了with的代码比上面的代码简洁许多。&lt;/p&gt;
&lt;p&gt;上面的with代码背后发生了些什么？我们来看下它的执行流程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;首先执行open('output', 'w')，返回一个文件对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;调用这个文件对象的__enter__方法，并将__enter__方法的返回值赋值给变量f&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;执行with语句体，即with语句包裹起来的代码块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;不管执行过程中是否发生了异常，执行文件对象的__exit__方法，在__exit__方法中关闭文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里的关键在于open返回的文件对象实现了__enter__和__exit__方法。一个实现了__enter__和__exit__方法的对象就称之为&lt;strong&gt;上下文管理器&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;上下文管理器&lt;/h4&gt;
&lt;p&gt;上下文管理器定义执行 with 语句时要建立的运行时上下文，负责执行 with 语句块上下文中的进入与退出操作。__enter__方法在语句体执行之前进入运行时上下文，__exit__在语句体执行完后从运行时上下文退出。&lt;/p&gt;
&lt;p&gt;在实际应用中，__enter__一般用于资源分配，如打开文件、连接数据库、获取线程锁；__exit__一般用于资源释放，如关闭文件、关闭数据库连接、释放线程锁。&lt;/p&gt;
&lt;h4&gt;自定义上下文管理器&lt;/h4&gt;
&lt;p&gt;既然上下文管理器就是实现了__enter__和__exit__方法的对象，我们能不能定义自己的上下文管理器呢？答案是肯定的。&lt;/p&gt;
&lt;p&gt;我们先来看下__enter__和__exit__方法的定义：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__enter__() &lt;/strong&gt;- 进入上下文管理器的运行时上下文，在语句体执行前调用。如果有as子句，with语句将该方法的返回值赋值给 as 子句中的 target。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__exit__(exception_type, exception_value, traceback) &lt;/strong&gt;- 退出与上下文管理器相关的运行时上下文，返回一个布尔值表示是否对发生的异常进行处理。如果with语句体中没有异常发生，则__exit__的3个参数都为None，即调用 __exit__(None, None, None)，并且__exit__的返回值直接被忽略。如果有发生异常，则使用 sys.exc_info 得到的异常信息为参数调用__exit__(exception_type, exception_value, traceback)。出现异常时，如果__exit__(exception_type, exception_value, traceback)返回 False，则会重新抛出异常，让with之外的语句逻辑来处理异常；如果返回 True，则忽略异常，不再对异常进行处理。&lt;/p&gt;
&lt;p&gt;理解了__enter__和__exit__方法后，我们来自己定义一个简单的上下文管理器。这里不做实际的资源分配和释放，而用打印语句来表明当前的操作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContextManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[in __enter__] acquiring resources&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[in __exit__] releasing resources&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;exception_type&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[in __exit__] Exited without exception&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[in __exit__] Exited with exception: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;exception_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ContextManager&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[in with-body] Testing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行上面的代码，会得到如下的输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[in __enter__] acquiring resources
[in with-body] Testing
[in __exit__] releasing resources
[in __exit__] Exited without exception
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们在with语句体中人为地抛出一个异常&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ContextManager&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[in with-body] Testing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;something wrong&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会得到如下的输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[in __enter__] acquiring resources
[in with-body] Testing
[in __exit__] releasing resources
[in __exit__] Exited with exception: something wrong
Traceback (most recent call last):
  File &amp;quot;/tmp/a.py&amp;quot;, line 15, in &amp;lt;module&amp;gt;
    raise(Exception(&amp;quot;something wrong&amp;quot;))
Exception: something wrong
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如我们所期待，with语句体中抛出异常，__exit__方法中exception_type不为None，__exit__方法返回False，异常被重新抛出。&lt;/p&gt;
&lt;p&gt;以上，我们通过实现__enter__和__exit__方法来实现了一个自定义的上下文管理器。&lt;/p&gt;
&lt;h4&gt;contextlib库&lt;/h4&gt;
&lt;p&gt;除了上面的方法，我们也可以使用contextlib库来自定义上下文管理器。如果用contextlib来实现，可以用下面的代码来实现类似的上下文管理器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;contextmanager&lt;/span&gt;

&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[in __enter__] acquiring resources&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[in __exit__] releasing resources&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[in with-body] Testing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;something wrong&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码涉及到装饰器（@contextmanager），生成器（yield），有点难读。这里yield之前的代码相当于__enter__方法，在进入with语句体之前执行，yield之后的代码相当于__exit__方法，在退出with语句体的时候执行。&lt;/p&gt;
&lt;p&gt;接下来的几篇文章，我们来逐一介绍一下，什么是装饰器，什么是生成器，@contextmanager是如何实现上下文管理器的。敬请期待~&lt;/p&gt;
&lt;p&gt;本文已更新微信同名公众号，欢迎扫一扫关注~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b0b9b9584ccdd3ff4c96b7ecfd8a56_r.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>263本知乎书店的免费图书</title><link href="http://www.shenzhongqiang.com/free-books-in-zhihu-bookstore.html" rel="alternate"></link><published>2018-04-12T00:00:00+08:00</published><updated>2018-04-12T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-04-12:/free-books-in-zhihu-bookstore.html</id><summary type="html">&lt;p&gt;不知道大家是否发现，知乎书店有很多免费的书，像知乎周刊、知乎日报年度精选、以及一些大V编写的书 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;不知道大家是否发现，知乎书店有很多免费的书，像知乎周刊、知乎日报年度精选、以及一些大V编写的书。最近写了个爬虫，爬了下知乎书店上所有免费的图书，整理出来分享给大家。&lt;/p&gt;
&lt;p&gt;下面是所有知乎书店里免费的图书，一共263本，按评分从高到低排序&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550387"&gt;牙齿保卫战&lt;/a&gt;    评分：9.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551198"&gt;大发明家&lt;/a&gt;    评分：9.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551074"&gt;2015 年度 300 问（第三辑）：科学&lt;/a&gt;    评分：9.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550382"&gt;日常经济学 2&lt;/a&gt;    评分：9.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551030"&gt;探索地下铁&lt;/a&gt;    评分：9.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550422"&gt;美食笔谈&lt;/a&gt;    评分：9.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119555722"&gt;生活要点糖：这是一本有甜味的书&lt;/a&gt;    评分：9.7&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119553777"&gt;2016：知乎日报最受欢迎的故事精选&lt;/a&gt;    评分：9.7&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119552639"&gt;喵星人行为心理学&lt;/a&gt;    评分：9.7&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550555"&gt;在家好好玩&lt;/a&gt;    评分：9.7&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550522"&gt;带你去听古典音乐会&lt;/a&gt;    评分：9.7&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551012"&gt;设计我们的世界（知乎编辑版）&lt;/a&gt;    评分：9.7&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119555068"&gt;一夜长大&lt;/a&gt;    评分：9.7&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550491"&gt;哈哈哈哈哈哈哈（愚人节特辑）&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554784"&gt;员工权益知多少&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551045"&gt;权力的游戏&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550857"&gt;艾泽拉斯之春&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119555998"&gt;XXOO 那些事 2：非人类篇&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119557948"&gt;新手爸妈的岗前培训&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119556676"&gt;建筑我们的世界&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119553738"&gt;雾霾天生存防护指南&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119558094"&gt;玩世界，享不同：怎样的旅行称得上「会玩」？&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119553980"&gt;医院故事集&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554430"&gt;走，进非洲！&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551136"&gt;四大名著还可以这样读&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551124"&gt;Hello，公共汽车&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551120"&gt;重返刑侦现场&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550435"&gt;明明白白花钱&lt;/a&gt;    评分：9.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119555358"&gt;台前幕后&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119556437"&gt;向儿童性侵说「不」&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550416"&gt;家庭心理学&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554207"&gt;三月也是读书天&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554995"&gt;烘焙的美好时光&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119556976"&gt;大口吃肉&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554957"&gt;脑洞大开！奇奇怪怪问题们&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554736"&gt;我的中学时代&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550945"&gt;如果水知道&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550507"&gt;读懂食品安全&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550429"&gt;广告狂人&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119557774"&gt;年轻人的忽视与焦虑：健康餐桌的 15 个秘密&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550511"&gt;编程小白学 Python&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550910"&gt;2013 年度 300 问 第五辑&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550519"&gt;走，吃火锅&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119559236"&gt;相见恨晚的英语学习方法&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550863"&gt;给世界生个孩子&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550868"&gt;枯燥无味的心理学&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550896"&gt;国漫奇遇&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550539"&gt;2015：知乎日报年度精选&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550386"&gt;NASA 忙什么&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119552712"&gt;安全用好信用卡&lt;/a&gt;    评分：9.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550861"&gt;读书这件小事&lt;/a&gt;    评分：9.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554612"&gt;拍出好照片！一看就会的手机摄影技巧&lt;/a&gt;    评分：9.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550389"&gt;同志亦凡人&lt;/a&gt;    评分：9.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551050"&gt;善待我们的屁股&lt;/a&gt;    评分：9.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119558634"&gt;走出焦虑&lt;/a&gt;    评分：9.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119555119"&gt;打造自己的房间&lt;/a&gt;    评分：9.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119560412"&gt;刺杀骑士团长（试读本）&lt;/a&gt;    评分：9.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119555166"&gt;大话西游&lt;/a&gt;    评分：9.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119561794"&gt;实用健康管理手册&lt;/a&gt;    评分：9.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119557013"&gt;100 个 iOS 11 实用技巧&lt;/a&gt;    评分：9.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550810"&gt;樱花之语&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119558291"&gt;开创者：人类智慧闪耀时&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550418"&gt;爱情的 36 个秘密&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550464"&gt;啤酒新世界&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550878"&gt;中国人的美剧&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550523"&gt;增肌塑形指南&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119559918"&gt;说走就走的出国游：免签新玩法&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550935"&gt;写一个故事&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550773"&gt;深夜惊奇（春节特刊）&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551061"&gt;2015 年度 300 问（第一辑）：心理&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550914"&gt;新技能 get✓&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550849"&gt;敲个开市钟&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554690"&gt;爸爸和我&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554666"&gt;见字不如见面：我们身边的通讯史&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550406"&gt;想创业，求组团&lt;/a&gt;    评分：9.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119557311"&gt;我有一个炫酷的隐藏技能&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19552308"&gt;他们老了&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119563223"&gt;知乎观影团&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119560667"&gt;解码西方名画&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119560605"&gt;独居，见证自己的生活&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119560091"&gt;家乡味 中国胃&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550844"&gt;告别抑郁&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551026"&gt;你可能错过的 10 本榜单好书&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119553705"&gt;被忽视的校园暴力&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550816"&gt;生而有幸&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554814"&gt;数学妙啊！妙！&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119558855"&gt;课本之外：原来这么有趣啊&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554171"&gt;如果你也听民谣&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119558179"&gt;新商业时代&lt;/a&gt;    评分：9.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19552101"&gt;日本有意思&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119559414"&gt;直到成为母亲&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550976"&gt;游戏人间&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119553652"&gt;2016：知乎日报年度精选&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119553948"&gt;爱情的 48 个秘密&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550425"&gt;你在怕什么&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554452"&gt;请回答，九十年代&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551105"&gt;大学学前班&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119553373"&gt;XXOO 那些事&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119560601"&gt;人间情爱（2017 知乎日报故事精选）&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550537"&gt;二胎，生不生？&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119552899"&gt;减脂吃什么&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119555717"&gt;这不是一本简单的美食书&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550490"&gt;像大侦探一样思考&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119556521"&gt;大秦帝国进阶手册&lt;/a&gt;    评分：9.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550486"&gt;花样下厨房之工具篇&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550484"&gt;花样下厨房之手艺篇&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550396"&gt;妖怪，哪里跑！&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550471"&gt;2014 年度 300 问：人生四点半&lt;/a&gt;    评分：9.0&lt;a href="https://www.zhihu.com/pub/book/19550792"&gt;2013 年度 300 问 第一辑&lt;/a&gt;&lt;a href="https://www.zhihu.com/pub/book/19550471"&gt;2014 年度 300 问：人生四点半&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550439"&gt;脖子疼，要断了&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554119"&gt;原来你是这样的日剧&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554041"&gt;职业倦怠怎么办&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119557764"&gt;我的品质生活提案&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551128"&gt;睡个好觉&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550877"&gt;从存钱罐到财务自由&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119552676"&gt;一点都不恐怖的恐怖电影手册&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119552690"&gt;怪诞心理学&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119553544"&gt;改善你的驾驶&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550563"&gt;单身会上瘾&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554913"&gt;不上班的理想生活&lt;/a&gt;    评分：9.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550920"&gt;红楼索隐&lt;/a&gt;    评分：8.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119563216"&gt;好仪态，日常生活练出来&lt;/a&gt;    评分：8.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119557700"&gt;知乎好照片：我们所处的时代与世界&lt;/a&gt;    评分：8.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550494"&gt;好好对待月经&lt;/a&gt;    评分：8.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119555018"&gt;我们都爱汪星人&lt;/a&gt;    评分：8.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551042"&gt;记忆的 21 个秘密&lt;/a&gt;    评分：8.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550493"&gt;二次元特别演出&lt;/a&gt;    评分：8.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550982"&gt;心的问题&lt;/a&gt;    评分：8.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119553629"&gt;未来生活：2016 科技盘点&lt;/a&gt;    评分：8.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551183"&gt;玩转方便面&lt;/a&gt;    评分：8.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551112"&gt;科学穿越指南&lt;/a&gt;    评分：8.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550379"&gt;家宴（春节特辑）&lt;/a&gt;    评分：8.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550918"&gt;买买买！（双十一特辑）&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550865"&gt;也谈情说爱&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550880"&gt;买买买！&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550776"&gt;北上广深的年轻人&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550769"&gt;星球大战&lt;/a&gt;   评分：8.8&lt;a href="https://www.zhihu.com/pub/book/19550769"&gt;星球大战&lt;/a&gt;&lt;a href="https://www.zhihu.com/pub/book/19550769"&gt;星球大战&lt;/a&gt;   评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551213"&gt;iPhone 十年&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119559444"&gt;孤独经济：脉脉职业数据白皮书（2017 年终特辑）&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550957"&gt;概率的概率&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119560982"&gt;速食的诱惑&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119560841"&gt;那些尴尬又不得不回答的面试题&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119557485"&gt;化繁为简的生活整理术&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119555603"&gt;摇滚在中国&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119555587"&gt;日常经济学 3：我为什么这么穷&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554222"&gt;没钱也要理财&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551203"&gt;上班族 24 小时健康指南&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551032"&gt;我为什么爱迪士尼&lt;/a&gt;    评分：8.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550453"&gt;三月不减肥&lt;/a&gt;    评分：8.7&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554723"&gt;上瘾怕什么&lt;/a&gt;    评分：8.7&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550949"&gt;真的睡不着啊！&lt;/a&gt;    评分：8.7&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550936"&gt;商业的细节&lt;/a&gt;    评分：8.7&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119552567"&gt;梦的解析&lt;/a&gt;    评分：8.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119559533"&gt;我买故我在：消费升级启示录&lt;/a&gt;    评分：8.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119560367"&gt;医院故事集 II&lt;/a&gt;    评分：8.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550467"&gt;不以儿童为玩物！&lt;/a&gt;    评分：8.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551115"&gt;说学逗唱&lt;/a&gt;    评分：8.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551034"&gt;发现香港美食&lt;/a&gt;    评分：8.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550870"&gt;无力拖延&lt;/a&gt;    评分：8.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119559007"&gt;啤酒「择」学课&lt;/a&gt;    评分：8.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119553457"&gt;导演李安&lt;/a&gt;    评分：8.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550941"&gt;走，去拿 10 亿美金&lt;/a&gt;    评分：8.5&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550798"&gt;医生说&lt;/a&gt;    评分：8.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551029"&gt;人工智能：像人一样思考？&lt;/a&gt;    评分：8.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119560566"&gt;2017：知乎日报年度精选&lt;/a&gt;    评分：8.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550830"&gt;吃好吃的&lt;/a&gt;    评分：8.4&lt;a href="https://www.zhihu.com/pub/book/19550830"&gt;吃好吃的&lt;/a&gt;    评分：8.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119558687"&gt;人最好能颓一点儿（理想国人文讲谈录）&lt;/a&gt;    评分：8.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119559070"&gt;你不知道的神操作&lt;/a&gt;    评分：8.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550828"&gt;日常经济学&lt;/a&gt;    评分：8.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119557281"&gt;95 后与职场：脉脉职业数据白皮书（2017 秋季号）&lt;/a&gt;    评分：8.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550876"&gt;车车车车&lt;/a&gt;    评分：8.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550404"&gt;好好炒股&lt;/a&gt;    评分：8.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550847"&gt;香港电影浮沉录&lt;/a&gt;    评分：8.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550966"&gt;社交网络&lt;/a&gt;    评分：8.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550975"&gt;讲道理&lt;/a&gt;    评分：8.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550932"&gt;为人子女&lt;/a&gt;    评分：8.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550837"&gt;职场生存狂&lt;/a&gt;    评分：8.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551149"&gt;超级英雄&lt;/a&gt;    评分：8.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550990"&gt;不开玩笑&lt;/a&gt;    评分：8.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550400"&gt;你早就该拒绝我&lt;/a&gt;    评分：8.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550832"&gt;去他的经理&lt;/a&gt;    评分：8.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554848"&gt;iPhone 就该这样用&lt;/a&gt;    评分：8.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550907"&gt;生活家养成&lt;/a&gt;    评分：8.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550951"&gt;光辉岁月&lt;/a&gt;    评分：7.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551143"&gt;请回答，八十年代&lt;/a&gt;    评分：7.9&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550972"&gt;程序人生&lt;/a&gt;    评分：7.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550840"&gt;无基础健身&lt;/a&gt;    评分：7.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550438"&gt;租房也是家&lt;/a&gt;    评分：7.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550884"&gt;远方的旅行家&lt;/a&gt;    评分：7.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550827"&gt;跳槽有术&lt;/a&gt;    评分：7.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550958"&gt;你不是你的性别&lt;/a&gt;    评分：7.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119558461"&gt;设计，无处不在&lt;/a&gt;    评分：7.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550795"&gt;黑科技&lt;/a&gt;    评分：7.2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119554255"&gt;走，带你轻松户外游&lt;/a&gt;    评分：6.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551232"&gt;朕的日常生活&lt;/a&gt;    评分：6.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550906"&gt;我想有个家&lt;/a&gt;    评分：6.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551028"&gt;如果你也听摇滚&lt;/a&gt;    评分：6.6&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550835"&gt;乔布斯往事&lt;/a&gt;    评分：6.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550446"&gt;送你一把勺子&lt;/a&gt;    评分：6.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550376"&gt;苦乐咖啡&lt;/a&gt;    评分：6.4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550943"&gt;小白理财&lt;/a&gt;    评分：6.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550813"&gt;风陵渡&lt;/a&gt;    评分：5.8&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550451"&gt;女权即人权&lt;/a&gt;    评分：5.1&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550872"&gt;正义女神不睁眼&lt;/a&gt;    评分：5.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550961"&gt;猫奴手册&lt;/a&gt;    评分：3.7&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550790"&gt;2013 年度 300 问 第二辑&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550411"&gt;安全养老&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550432"&gt;时差旅行&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550940"&gt;白日梦的生意&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550946"&gt;爆米花之梦&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550954"&gt;2013 年度 300 问 第四辑&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119560595"&gt;MIDO 瑞士美度表（1918-2018）：百年价值，始终如一&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550420"&gt;2014 年度 300 问：就爱电影&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550419"&gt;爱情天使轮&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550964"&gt;2013 年度 300 问 第三辑&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550421"&gt;解剖真人秀&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550970"&gt;化险为夷&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550415"&gt;人人都爱共享经济？&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550408"&gt;2014 年度 300 问：生活那么大&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550978"&gt;坍缩&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550928"&gt;看个球&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550983"&gt;给人生一部纪录片&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550407"&gt;花样 Party&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550987"&gt;公共梦境&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550392"&gt;年终奖&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550984"&gt;向自由逃避&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551062"&gt;2015 年度 300 问（第二辑）：经济&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551064"&gt;2015 年度 300 问（第四辑）：生活&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551080"&gt;2015 年度 300 问（第五辑）：娱乐&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551090"&gt;2015 年度 300 问（第六辑）：职业&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19551096"&gt;2015 年度 300 问（第七辑）：商业&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550377"&gt;2014：知乎日报年度回顾&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550373"&gt;带你去逛博物馆&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550442"&gt;夏日大作战&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550926"&gt;完全不像处女座&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550792"&gt;2013 年度 300 问 第一辑&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550887"&gt;2013 年度 300 问 第六辑&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550799"&gt;设计了不起&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550807"&gt;美利坚&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550803"&gt;冬夜读诗&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550818"&gt;春节返乡一本通&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550821"&gt;宝宝去哪儿&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550824"&gt;建什么筑&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550499"&gt;爱上滑雪的 22 个理由&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550825"&gt;2013&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550852"&gt;家有儿女&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550856"&gt;去那花花世界&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550853"&gt;耳膜战争&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550482"&gt;理解慈善&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550891"&gt;真人秀江湖&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550925"&gt;商场后台&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550476"&gt;2014 年度 300 问：社会七分熟&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550479"&gt;2014 年度 300 问：在商言商&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550893"&gt;读万里书&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550899"&gt;2013 年度 300 问 第七辑&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550474"&gt;2014 年度 300 问：职人说梦&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550460"&gt;2014 年度 300 问：科学说&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550902"&gt;2013 年度 300 问 第八辑&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550452"&gt;认识雾霾&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550919"&gt;2013 年度 300 问 第九辑&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550457"&gt;2014 年度 300 问：看上去很高级&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550922"&gt;笑场的雷雨&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/19550448"&gt;见笑了&lt;/a&gt;    评分：0.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/pub/book/119564750"&gt;原生家庭：爱与痛的起点&lt;/a&gt;    评分：0.0&lt;/p&gt;</content><category term="爬虫"></category><category term="Python"></category><category term="爬虫"></category></entry><entry><title>Python面试之交换变量值</title><link href="http://www.shenzhongqiang.com/swap-value.html" rel="alternate"></link><published>2018-04-02T00:00:00+08:00</published><updated>2018-04-02T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-04-02:/swap-value.html</id><summary type="html">&lt;p&gt;平时时不时会面面实习生，大多数的同学在学校里都已经掌握了Python。面试的时候要求同学们实现一个简单的函数，交换两个变量的值，大多数的同学给出的都是如下的答案 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;平时时不时会面面实习生，大多数的同学在学校里都已经掌握了Python。面试的时候要求同学们实现一个简单的函数，交换两个变量的值，大多数的同学给出的都是如下的答案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上，Python中还有更简洁的更具Python风格的实现，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相比前一种方法，后一种方法节省一个中间变量，在性能上也优于前一种方法。&lt;/p&gt;
&lt;p&gt;我们从Python的字节码来深入分析一下原因。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;timeit&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swap1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; 
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; 
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swap2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; 
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; 
    &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; 
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; 
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; 

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;================= swap1 =================&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swap1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;================= swap2 =================&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swap2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dis是个反汇编工具，将Python代码翻译成字节码指令。这里的输出如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;================= swap1 =================
  5           0 LOAD_CONST               1 (5)
              3 STORE_FAST               0 (x)

  6           6 LOAD_CONST               2 (6)
              9 STORE_FAST               1 (y)

  7          12 LOAD_FAST                1 (y)
             15 LOAD_FAST                0 (x)
             18 ROT_TWO             
             19 STORE_FAST               0 (x)
             22 STORE_FAST               1 (y)
             25 LOAD_CONST               0 (None)
             28 RETURN_VALUE        
None
================= swap2 =================
 10           0 LOAD_CONST               1 (5)
              3 STORE_FAST               0 (x)

 11           6 LOAD_CONST               2 (6)
              9 STORE_FAST               1 (y)

 12          12 LOAD_FAST                0 (x)
             15 STORE_FAST               2 (tmp)

 13          18 LOAD_FAST                1 (y)
             21 STORE_FAST               0 (x)

 14          24 LOAD_FAST                2 (tmp)
             27 STORE_FAST               1 (y)
             30 LOAD_CONST               0 (None)
             33 RETURN_VALUE        
None
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过字节码可以看到，swap1和swap2最大的区别在于，swap1中通过ROT_TWO交换栈顶的两个元素实现x和y值的互换，swap2中引入了tmp变量，多了一次LOAD_FAST, STORE_FAST的操作。执行一个ROT_TWO指令比执行一个LOAD_FAST+STORE_FAST的指令快，这也是为什么swap1比swap2性能更好的原因。&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>豆瓣最受好评的20本Python图书</title><link href="http://www.shenzhongqiang.com/douban-python-books-top-20.html" rel="alternate"></link><published>2018-03-22T00:00:00+08:00</published><updated>2018-03-22T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-03-22:/douban-python-books-top-20.html</id><summary type="html">&lt;p&gt;用豆瓣API爬取了豆瓣上的Python图书，筛选了评分人数&amp;gt;80的书，按照评分高低排序，删除了些中英文版本重复的书 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;用豆瓣API爬取了豆瓣上的Python图书，筛选了评分人数&amp;gt;80的书，按照评分高低排序，删除了些中英文版本重复的书，整理出了下面这张最受好评的20本Python图书榜单，书名包含豆瓣链接，点击直达豆瓣书的详情页面。&lt;/p&gt;
&lt;p&gt;No.1 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/26278021/"&gt;Fluent Python&lt;/a&gt;（&lt;strong&gt;豆瓣评分：9.6&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c851d6aa7b2705589a785b4fc5b81992_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.2 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/26840215/"&gt;Hands-On Machine Learning with Scikit-Learn and TensorFlow&lt;/a&gt;（&lt;strong&gt;豆瓣评分：9.4&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-61ed524ef0df98adbd9cc3f73ae05789_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过具体的例子、很少的理论以及两款成熟的Python框架：Scikit-Learn和TensorFlow，作者AurélieGéron会帮助你掌握构建智能系统所需要的概念和工具。你将会学习到各种技术，从简单的线性回归及发展到深度神经网络。每章的练习有助于你运用所学到的知识，你只需要有一些编程经验就行了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.3 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/26836700/"&gt;Python编程快速上手&lt;/a&gt;（&lt;strong&gt;豆瓣评分：9.2&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-3afd56a27f7418bfd16a4a2ab71d5df0_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.4 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/20491078/"&gt;Python Cookbook&lt;/a&gt;（&lt;strong&gt;豆瓣评分：9.2&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-35701bcde6b2aa48a654185996a602e0_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Portable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications. Completely updated for Python 3, the recipes in this book include: Data structures and algorithms Strings and text Dates and times Metaprogramming Testing With scores of practical examples and pertinent background information, the Python Cookbook, 3rd Edition is the one source you need if you're looking to build efficient, flexible, scalable, and well-integrated systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.5 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/26829016/"&gt;Python编程：从入门到实践&lt;/a&gt;（&lt;strong&gt;豆瓣评分：9.2&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5a481dd89ac317cb48a3e4dcba55f291_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本书是一本针对所有层次的Python 读者而作的Python 入门书。全书分两部分：第一部分介绍用Python 编程所必须了解的基本概念，包括matplotlib、NumPy 和Pygal 等强大的Python 库和工具介绍，以及列表、字典、if 语句、类、文件与异常、代码测试等内容；第二部分将理论付诸实践，讲解如何开发三个项目，包括简单的Python 2D 游戏开发如何利用数据生成交互式的信息图，以及创建和定制简单的Web 应用，并帮读者解决常见编程问题和困惑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.6 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/3617254/"&gt;The Definitive Guide to Django, 2nd Edition&lt;/a&gt;&lt;strong&gt;（豆瓣评分：9.0）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-39861577e3c030fb3a95dccca9a4b604_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Definitive Guide to Django is broken into three parts, with the first introducing Django fundamentals such as installation and configuration, and creating the components that together power a Django–driven web site. The second part delves into the more sophisticated features of Django, including outputting non–HTML content such as RSS feeds and PDFs, caching, and user management. The appendixes serve as a detailed reference to Django’s many configuration options and commands.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.7 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/2209702/"&gt;Programming Collective Intelligence&lt;/a&gt;&lt;strong&gt;（豆瓣评分：8.9）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-dff42530e7abdbe8aca4768cb5c05e3a_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Want to tap the power behind search rankings, product recommendations, social bookmarking, and online matchmaking? 
This fascinating book demonstrates how you can build Web 2.0 applications to mine the enormous amount of data created by people on the Internet. With the sophisticated algorithms in this book, you can write smart programs to access interesting datasets from other web sites, collect data from users of your own applications, and analyze and understand the data once you've found it. Programming Collective Intelligence takes you into the world of machine learning and statistics, and explains how to draw conclusions about user experience, marketing, personal tastes, and human behavior in general -- all from information that you and others collect every day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.8 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/26709315/"&gt;Effective Python&lt;/a&gt;&lt;strong&gt;（豆瓣评分：8.8）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-91b972ec281872571f61a14ee63874f8_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本书作者Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.9 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/5948760/"&gt;A Byte of Python&lt;/a&gt;（&lt;strong&gt;豆瓣评分：8.8&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a04e89173183251427d01c1df31046cf_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;'A Byte of Python' is a book on programming using the Python language. It serves as a tutorial or guide to the Python language for a beginner audience. If all you know about computers is how to save text files, then this is the book for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.10 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/3142908/"&gt;Python Tutorial&lt;/a&gt;（&lt;strong&gt;豆瓣评分：8.7&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e41d10f6327896c404052bc327649b5c_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.11 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/3117898/"&gt;Python源码剖析&lt;/a&gt;（&lt;strong&gt;豆瓣评分：8.7&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-ca14494fa0d051aba8ad91f4c8756ae1_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.12 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/26005639/"&gt;父与子的编程之旅&lt;/a&gt;（&lt;strong&gt;豆瓣评分：8.7&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-00a655eaabd7358cfa5c4904103ad8ba_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本书是一本家长与孩子共同学习编程的入门书。作者是一对父子，他们以Python语言为例，详尽细致地介绍了Python如何安装、字符串和操作符等程序设计的基本概念，介绍了条件语句、函数、模块等进阶内容，最后讲解了用Python实现游戏编程。书中的语言生动活泼，叙述简单明了。 为了让学习者觉得编程有趣，本书编排了很多卡通人物及场景对话，让学习者在轻松愉快之中跨入计算机编程的大门。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.13 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/26274202/"&gt;Flask Web开发：基于Python的Web应用开发实战&lt;/a&gt;（&lt;strong&gt;豆瓣评分：8.7&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-bc0099615e44d7a7d7d4bb03e0302d54_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本书不仅适合初级Web开发人员学习阅读，更是Python程序员用来学习高级Web开发技术的优秀参考书。本书的内容包括：
学习Flask应用的基本结构，编写示例应用；
使用必备的组件，包括模板、数据库、Web表单和电子邮件支持；
使用包和模块构建可伸缩的大型应用；
实现用户认证、角色和个人资料；
在博客网站中重用模板、分页显示列表以及使用富文本；
使用基于Flask的REST式API，在智能手机、平板电脑和其他第三方客户端上实现可用功能；
学习运行单元测试以及提升性能；
将Web应用部署到生产服务器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.14 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/25892709/"&gt;Python for Informatics&lt;/a&gt;（&lt;strong&gt;豆瓣评分：8.7&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-3a3583b11d7e182b85e285a6ceacb999_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This book is designed to introduce students to programming and computational thinking through the lens of exploring data. You can think of Python as your tool to solve problems that are far beyond the capability of a spreadsheet. It is an easy-to-use and easy-to learn programming language that is freely available on Windows, Macintosh, and Linux computers. There are free downloadable copies of this book in various electronic formats and a self-paced free online course where you can explore the course materials. All the supporting materials for the book are available under open and remixable licenses. This book is designed to teach people to program even if they have no prior experience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.15 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/3628911/"&gt;Dive Into Python 3&lt;/a&gt;（&lt;strong&gt;豆瓣评分：8.6&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-19617d6ee3fea026755c636c10ba8676_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mark Pilgrim's Dive Into Python 3 is a hands-on guide to Python 3 (the latest version of the Python language) and its differences from Python 2. As in the original book, Dive Into Python, each chapter starts with a real, complete code sample, proceeds to pick it apart and explain the pieces, and then puts it all back together in a summary at the end.
This book includes:
Example programs completely rewritten to illustrate powerful new concepts now available in Python 3: sets, iterators, generators, closures, comprehensions, and much more
A detailed case study of porting a major library from Python 2 to Python 3
A comprehensive appendix of all the syntactic and semantic changes in Python 3
This is the perfect resource for you if you need to port applications to Python 3, or if you like to jump into languages fast and get going right away.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.16 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/6962285/"&gt;Machine Learning in Action&lt;/a&gt;（&lt;strong&gt;豆瓣评分：8.5&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a9e1c03d29efb57363acb5fce2a13247_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Machine Learning in Action is a unique book that blends the foundational theories of machine learning with the practical realities of building tools for everyday data analysis. In it, you'll use the flexible Python programming language to build programs that implement algorithms for data classification, forecasting, recommendations, and higher-level features like summarization and simplification.
As you work through the numerous examples, you'll explore key topics like classification, numeric prediction, and clustering. Along the way, you'll be introduced to important established algorithms, such as Apriori, through which you identify association patterns in large datasets and Adaboost, a meta-algorithm that can increase the efficiency of many machine learning tasks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.17 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/25779298/"&gt;利用Python进行数据分析&lt;/a&gt;（&lt;strong&gt;豆瓣评分：8.5&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-f22f2ffe613ea20bb89465c7603c8362_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还在苦苦寻觅用Python控制、处理、整理、分析结构化数据的完整课程？本书含有大量的实践案例，你将学会如何利用各种Python库（包括NumPy、pandas、matplotlib以及IPython等）高效地解决各式各样的数据分析问题。
由于作者Wes McKinney是pandas库的主要作者，所以本书也可以作为利用Python实现数据密集型应用的科学计算实践指南。本书适合刚刚接触Python的分析人员以及刚刚接触科学计算的Python程序员。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.18 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/1481058/"&gt;How to Think Like a Computer Scientist: Learning with Python&lt;/a&gt;（&lt;strong&gt;豆瓣评分：8.5&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-ecbfefaa307d6110cb4dec52bed37225_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"How to Think Like a Computer Scientist" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.19 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/26675127/"&gt;Python语言及其应用&lt;/a&gt;（&lt;strong&gt;豆瓣评分：8.5&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-874a7178121bf64ce6f33540b5350103_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No.20 &lt;a href="http://link.zhihu.com/?target=https%3A//book.douban.com/subject/11941213/"&gt;Learn Python the Hard Way&lt;/a&gt;（&lt;strong&gt;豆瓣评分：8.4&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a4075e6b3e876e56827f56080ed46303_b.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Master Python and become a programmer-even if you never thought you could! This breakthrough book and CD can help practically anyone get started in programming. It's called "The Hard Way," but it's really quite simple. What's "hard" is this: it requires discipline, practice, and persistence. Zed A. Shaw teaches the Python programming language through a series of 52 brilliantly-crafted exercises-all formatted consistently, and most no longer than two pages (including "extra credit"). Just read each exercise, type in its sample code precisely (no copy-and-paste!), and make the programs run. As you read, type, fix your mistakes, and watch the results, you'll learn how software works, how programming works, what good programs look like, and how to read, write, and see code. You'll discover how to spot crucial differences that fundamentally affect program behavior, and you'll learn everything you need to know about Python logic, input/output, variables, and functions. Above all, you'll learn the attention to detail that is indispensable to successful programming (and so much else in life). At first, yes, it can be difficult. But it gets easier. And Shaw offers plenty of extra guidance and insight through 5+ full hours of teaching video on the accompanying CD. As Shaw's thousands of online readers and fans will attest, the moment will come when you just "get it"-and that moment feels great. Nothing important comes without discipline, practice, and persistence. But, with Learn Python the Hard Way, readers who bring those qualities to programming will master it-and they will reap the rewards, both personally and in their careers.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="爬虫"></category><category term="Python"></category><category term="爬虫"></category></entry><entry><title>Kafka入门简介</title><link href="http://www.shenzhongqiang.com/kafka-intro.html" rel="alternate"></link><published>2018-03-22T00:00:00+08:00</published><updated>2018-03-22T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-03-22:/kafka-intro.html</id><summary type="html">&lt;p&gt;本文简单的介绍下kafka，主要包含以下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是Kafka&lt;/li&gt;
&lt;li&gt;Kafka的基本概念&lt;/li&gt;
&lt;li&gt;Kafka分布式架构 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;本文简单的介绍下kafka，主要包含以下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是Kafka&lt;/li&gt;
&lt;li&gt;Kafka的基本概念&lt;/li&gt;
&lt;li&gt;Kafka分布式架构&lt;/li&gt;
&lt;li&gt;配置单机版Kafka&lt;/li&gt;
&lt;li&gt;实验一：kafka-python实现生产者消费者&lt;/li&gt;
&lt;li&gt;实验二：消费组实现容错性机制&lt;/li&gt;
&lt;li&gt;实验三：offset管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;什么是Kafka&lt;/h4&gt;
&lt;p&gt;Kafka是一个分布式流处理系统，流处理系统使它可以像消息队列一样publish或者subscribe消息，分布式提供了容错性，并发处理消息的机制。&lt;/p&gt;
&lt;h4&gt;Kafka的基本概念&lt;/h4&gt;
&lt;p&gt;kafka运行在集群上，集群包含一个或多个服务器。kafka把消息存在topic中，每一条消息包含键值（key），值（value）和时间戳（timestamp）。&lt;/p&gt;
&lt;p&gt;kafka有以下一些基本概念：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Producer &lt;/strong&gt;- 消息生产者，就是向kafka broker发消息的客户端。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consumer &lt;/strong&gt;- 消息消费者，是消息的使用方，负责消费Kafka服务器上的消息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Topic &lt;/strong&gt;- 主题，由用户定义并配置在Kafka服务器，用于建立Producer和Consumer之间的订阅关系。生产者发送消息到指定的Topic下，消息者从这个Topic下消费消息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Partition&lt;/strong&gt; - 消息分区，一个topic可以分为多个 partition，每个
partition是一个有序的队列。partition中的每条消息都会被分配一个有序的
id（offset）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Broker &lt;/strong&gt;- 一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consumer Group&lt;/strong&gt; - 消费者分组，用于归组同类消费者。每个consumer属于一个特定的consumer group，多个消费者可以共同消息一个Topic下的消息，每个消费者消费其中的部分消息，这些消费者就组成了一个分组，拥有同一个分组名称，通常也被称为消费者集群。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Offset &lt;/strong&gt;- 消息在partition中的偏移量。每一条消息在partition都有唯一的偏移量，消息者可以指定偏移量来指定要消费的消息。&lt;/p&gt;
&lt;h4&gt;Kafka分布式架构&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-f04083507c2860e62a686c3e868c719a_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，kafka将topic中的消息存在不同的partition中。如果存在键值（key），消息按照键值（key）做分类存在不同的partiition中，如果不存在键值（key），消息按照轮询（Round Robin）机制存在不同的partition中。默认情况下，键值（key）决定了一条消息会被存在哪个partition中。&lt;/p&gt;
&lt;p&gt;partition中的消息序列是有序的消息序列。kafka在partition使用偏移量（offset）来指定消息的位置。一个topic的一个partition只能被一个consumer group中的一个consumer消费，多个consumer消费同一个partition中的数据是不允许的，但是一个consumer可以消费多个partition中的数据。&lt;/p&gt;
&lt;p&gt;kafka将partition的数据复制到不同的broker，提供了partition数据的备份。每一个partition都有一个broker作为leader，若干个broker作为follower。所有的数据读写都通过leader所在的服务器进行，并且leader在不同broker之间复制数据。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e9b8513d58089eee6a131278ea949502_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;上图中，对于Partition 0，broker 1是它的leader，broker 2和broker 3是follower。对于Partition 1，broker 2是它的leader，broker 1和broker 3是follower。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a247b3d0f9fc622224f69bbdda1ab933_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;在上图中，当有Client（也就是Producer）要写入数据到Partition 0时，会写入到leader Broker 1，Broker 1再将数据复制到follower Broker 2和Broker 3。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-9f15b48732fb965a8ed0644cc902bd67_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;在上图中，Client向Partition 1中写入数据时，会写入到Broker 2，因为Broker 2是Partition 1的Leader，然后Broker 2再将数据复制到follower Broker 1和Broker 3中。&lt;/p&gt;
&lt;p&gt;上图中的topic一共有3个partition，对每个partition的读写都由不同的broker处理，因此总的吞吐量得到了提升。&lt;/p&gt;
&lt;h4&gt;配置单机版Kafka&lt;/h4&gt;
&lt;p&gt;这里我们使用kafka 0.10.0.0版本。&lt;/p&gt;
&lt;p&gt;第一步：下载并解压包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://archive.apache.org/dist/kafka/0.10.0.0/kafka_2.11-0.10.0.0.tgz
$ tar -xzf kafka_2.11-0.10.0.0.tgz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; kafka_2.11-0.10.0.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二步：启动Kafka&lt;/p&gt;
&lt;p&gt;kafka需要用到zookeeper，所以需要先启动zookeeper。我们这里使用下载包里自带的单机版zookeeper。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/zookeeper-server-start.sh config/zookeeper.properties
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2013&lt;/span&gt;-04-22 &lt;span class="m"&gt;15&lt;/span&gt;:01:37,495&lt;span class="o"&gt;]&lt;/span&gt; INFO Reading configuration from: config/zookeeper.properties &lt;span class="o"&gt;(&lt;/span&gt;org.apache.zookeeper.server.quorum.QuorumPeerConfig&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后启动kafka&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/kafka-server-start.sh config/server.properties
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2013&lt;/span&gt;-04-22 &lt;span class="m"&gt;15&lt;/span&gt;:01:47,028&lt;span class="o"&gt;]&lt;/span&gt; INFO Verifying properties &lt;span class="o"&gt;(&lt;/span&gt;kafka.utils.VerifiableProperties&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2013&lt;/span&gt;-04-22 &lt;span class="m"&gt;15&lt;/span&gt;:01:47,051&lt;span class="o"&gt;]&lt;/span&gt; INFO Property socket.send.buffer.bytes is overridden to &lt;span class="m"&gt;1048576&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;kafka.utils.VerifiableProperties&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三步：创建topic&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor &lt;span class="m"&gt;1&lt;/span&gt; --partitions &lt;span class="m"&gt;1&lt;/span&gt; --topic &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看创建的topic&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/kafka-topics.sh --list --zookeeper localhost:2181
&lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第四步：向topic中发送消息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test
This is a message
This is another message
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第五步：从topicc中消费消息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic &lt;span class="nb"&gt;test&lt;/span&gt; --from-beginning
This is a message
This is another message
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;实验一：kafka-python实现生产者消费者&lt;/h4&gt;
&lt;p&gt;kafka-python是一个python的Kafka客户端，可以用来向kafka的topic发送消息、消费消息。&lt;/p&gt;
&lt;p&gt;这个实验会实现一个producer和一个consumer，producer向kafka发送消息，consumer从topic中消费消息。结构如下图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-198d01ebb230395234999a3b8ac07502_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;producer代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# producer.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kafka&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KafkaProducer&lt;/span&gt;

&lt;span class="n"&gt;producer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KafkaProducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bootstrap_servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:9092&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;timestamp_ms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;consumer代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# consumer.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kafka&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KafkaConsumer&lt;/span&gt;

&lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KafkaConsumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bootstrap_servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:9092&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来创建test topic&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor &lt;span class="m"&gt;1&lt;/span&gt; --partitions &lt;span class="m"&gt;1&lt;/span&gt; --topic &lt;span class="nb"&gt;test&lt;/span&gt;
Created topic &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开两个窗口中，我们在window1中运行producer，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# window1&lt;/span&gt;
$ python producer.py
&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在window2中运行consumer，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# window2&lt;/span&gt;
$ python consumer.py
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512554839806&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;128&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;128&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1439508774, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;129&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512554840827&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;129&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;129&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1515993224&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;130&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512554841834&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;130&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;130&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;453490213&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;131&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512554842841&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;131&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;131&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-632119731, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到window2中的consumer成功的读到了producer写入的数据&lt;/p&gt;
&lt;h4&gt;实验二：消费组实现容错性机制&lt;/h4&gt;
&lt;p&gt;这个实验将展示消费组的容错性的特点。这个实验中将创建一个有2个partition的topic，和2个consumer，这2个consumer共同消费同一个topic中的数据。结构如下所示&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c13a7ea159c44df872a5845c3cd3f6c6_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;producer部分代码和实验一相同，这里不再重复。consumer需要指定所属的consumer group，代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# consumer.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kafka&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KafkaConsumer&lt;/span&gt;

&lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KafkaConsumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bootstrap_servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:9092&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;group_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;testgoup&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来我们创建topic，名字test，设置partition数量为2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 2 --topic test
Created topic &amp;quot;test&amp;quot;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开三个窗口，一个窗口运行producer，还有两个窗口运行consumer。&lt;/p&gt;
&lt;p&gt;运行consumer的两个窗口的输出如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# window1&lt;/span&gt;
$ python consumer.py
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512556619298&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;15&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;15&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1492440752, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512556621308&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;17&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;17&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1029407634, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512556622316&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;18&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;18&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1544755853&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512556624326&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;20&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;20&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2130557725&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
...


&lt;span class="c1"&gt;# window2&lt;/span&gt;
$ python consumer.py
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512556617287&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;13&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;13&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1494513008, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512556618293&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;14&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;14&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1499251221, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512556620303&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;16&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;16&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-783427375, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512556623321&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;19&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;19&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1902514040, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512556626337&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;22&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;22&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;782849423&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到两个consumer同时运行的情况下，它们分别消费不同partition中的数据。window1中的consumer消费partition 0中的数据，window2中的consumer消费parition 1中的数据。&lt;/p&gt;
&lt;p&gt;我们尝试关闭window1中的consumer，可以看到如下结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# window2&lt;/span&gt;

ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;105&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512557514410&lt;/span&gt;,                                                                                                     &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;46&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;46&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1821060627, serialized_key_siz                                                                                                    &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;106&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512557518428&lt;/span&gt;,                                                                                                     &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;50&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;50&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;281004575&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;                                                                                                    &lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;107&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512557521442&lt;/span&gt;,                                                                                                     &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;53&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;53&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1245067939&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;                                                                                                    &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;108&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512557525461&lt;/span&gt;,                                                                                                     &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;57&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;57&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1003840299, serialized_key_siz                                                                                                    &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;98&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512557494325&lt;/span&gt;, t                                                                                                    &lt;span class="nv"&gt;imestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;26&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;26&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1576244323, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;                                                                                                    &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512557495329&lt;/span&gt;, t                                                                                                    &lt;span class="nv"&gt;imestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;27&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;27&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;510530536&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;                                                                                                    , &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512557502360&lt;/span&gt;,                                                                                                     &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;34&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;34&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1781705793&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;                                                                                                    &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;101&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512557504368&lt;/span&gt;,                                                                                                     &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;36&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;36&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2142677730&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;                                                                                                    &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;102&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512557505372&lt;/span&gt;,                                                                                                     &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;37&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;37&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1376259357, serialized_key_siz                                                                                                    &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;刚开始window2中的consumer只消费partition1中的数据，当window1中的consumer退出后，window2中的consumer中也开始消费partition 0中的数据了。&lt;/p&gt;
&lt;h4&gt;实验三：offset管理&lt;/h4&gt;
&lt;p&gt;kafka允许consumer将当前消费的消息的offset提交到kafka中，这样如果consumer因异常退出后，下次启动仍然可以从上次记录的offset开始向后继续消费消息。&lt;/p&gt;
&lt;p&gt;这个实验的结构和实验一的结构是一样的，使用一个producer，一个consumer，test topic的partition数量设为1。&lt;/p&gt;
&lt;p&gt;producer的代码和实验一中的一样，这里不再重复。consumer的代码稍作修改，这里consumer中打印出下一个要被消费的消息的offset。consumer代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kafka&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KafkaConsumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TopicPartition&lt;/span&gt;

&lt;span class="n"&gt;tp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TopicPartition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KafkaConsumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bootstrap_servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:9092&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;group_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;testgoup&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auto_offset_reset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;earliest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enable_auto_commit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;starting offset is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在一个窗口中启动producer，在另一个窗口并且启动consumer。consumer的输出如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python consumer.py
start offset is &lt;span class="m"&gt;98&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;98&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512558902904&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;98&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;98&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-588818519, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512558903909&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;99&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;99&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1042712647&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512558904915&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-838622723, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;101&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512558905920&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;101&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;101&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-2020362485, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;102&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512558906926&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;102&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;102&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-345378749, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以尝试退出consumer，再启动consumer。每一次重新启动，consumer都是从offset=98的消息开始消费的。&lt;/p&gt;
&lt;p&gt;修改consumer的代码如下，在consumer消费每一条消息后将offset提交回kafka&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kafka&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KafkaConsumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TopicPartition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OffsetAndMetadata&lt;/span&gt;

&lt;span class="n"&gt;tp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TopicPartition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KafkaConsumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bootstrap_servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:9092&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;group_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;testgoup&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auto_offset_reset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;earliest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enable_auto_commit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;start offset is &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动consumer&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python consumer.py
start offset is 98
ConsumerRecord(topic=u&amp;#39;test&amp;#39;, partition=0, offset=98, timestamp=1512559632153, timestamp_type=0, key=&amp;#39;824&amp;#39;, value=&amp;#39;824&amp;#39;, checksum=828849435, serialized_key_size=3, serialized_value_size=3)
...
ConsumerRecord(topic=u&amp;#39;test&amp;#39;, partition=0, offset=827, timestamp=1512559635164, timestamp_type=0, key=&amp;#39;827&amp;#39;, value=&amp;#39;827&amp;#39;, checksum=442222330, serialized_key_size=3, serialized_value_size=3)
ConsumerRecord(topic=u&amp;#39;test&amp;#39;, partition=0, offset=828, timestamp=1512559636169, timestamp_type=0, key=&amp;#39;828&amp;#39;, value=&amp;#39;828&amp;#39;, checksum=-267344764, serialized_key_size=3, serialized_value_size=3)
ConsumerRecord(topic=u&amp;#39;test&amp;#39;, partition=0, offset=829, timestamp=1512559637173, timestamp_type=0, key=&amp;#39;829&amp;#39;, value=&amp;#39;829&amp;#39;, checksum=1225853586, serialized_key_size=3, serialized_value_size=3)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到consumer从offset=98的消息开始消费，到offset=829时，我们Ctrl+C退出consumer。&lt;/p&gt;
&lt;p&gt;我们再次启动consumer&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python consumer.py
start offset is 830
ConsumerRecord(topic=u&amp;#39;test&amp;#39;, partition=0, offset=830, timestamp=1512559638177, timestamp_type=0, key=&amp;#39;830&amp;#39;, value=&amp;#39;830&amp;#39;, checksum=1003305652, serialized_key_size=3, serialized_value_size=3)
ConsumerRecord(topic=u&amp;#39;test&amp;#39;, partition=0, offset=831, timestamp=1512559639181, timestamp_type=0, key=&amp;#39;831&amp;#39;, value=&amp;#39;831&amp;#39;, checksum=-361607666, serialized_key_size=3, serialized_value_size=3)
ConsumerRecord(topic=u&amp;#39;test&amp;#39;, partition=0, offset=832, timestamp=1512559640185, timestamp_type=0, key=&amp;#39;832&amp;#39;, value=&amp;#39;832&amp;#39;, checksum=-345891932, serialized_key_size=3, serialized_value_size=3)
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到重新启动后，consumer从上一次记录的offset开始继续消费消息。之后每一次consumer重新启动，consumer都会从上一次停止的地方继续开始消费。&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;本文主要介绍了一下kafka的基本概念，并结合一些实验帮助理解kafka中的一些难点，如多个consumer的容错性机制，offset管理。&lt;/p&gt;
&lt;h4&gt;引用资料&lt;/h4&gt;
&lt;p&gt;kafka-python在线文档 - &lt;a href="http://link.zhihu.com/?target=http%3A//kafka-python.readthedocs.io/en/master/"&gt;kafka-python - kafka-python 1.3.6.dev documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;kafka官方文档 - &lt;a href="http://link.zhihu.com/?target=https%3A//kafka.apache.org/0100/documentation.html"&gt;Apache Kafka&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Numpy的结构化数组</title><link href="http://www.shenzhongqiang.com/numpy-structured-array.html" rel="alternate"></link><published>2018-03-22T00:00:00+08:00</published><updated>2018-03-22T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-03-22:/numpy-structured-array.html</id><summary type="html">&lt;p&gt;numpy可以创建包含同类型数据的数组，底层用C实现，效率非常高。我们可以用如下的方式创建一个numpy数组：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;numpy可以创建包含同类型数据的数组，底层用C实现，效率非常高。我们可以用如下的方式创建一个numpy数组：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面创建了一个int64的数组a，每个元素都是相同的int64类型。&lt;/p&gt;
&lt;p&gt;除了创建简单类型的数组，numpy也支持创建更复杂的结构化数组，底层其实就是C中的结构体，每个元素可以包含不同类型的数据。&lt;/p&gt;
&lt;p&gt;举个例子，比如我们要存取一组人事信息，包括每个人的名字、年龄、级别，可以用numpy创建如下的结构化数组&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;grade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;formats&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;U10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Xiao Lin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Xiao Pan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Xiao Shen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Xiao Zhou&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="c1"&gt;# output&lt;/span&gt;
&lt;span class="c1"&gt;# [(u&amp;#39;Xiao Lin&amp;#39;, 28, 25) (u&amp;#39;Xiao Pan&amp;#39;, 33, 26) (u&amp;#39;Xiao Shen&amp;#39;, 34, 27)&lt;/span&gt;
&lt;span class="c1"&gt;# (u&amp;#39;Xiao Zhou&amp;#39;, 29, 24)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dtype指定了key的名称和类型，这里U10表示最大长度为10的unicode字符串，i4表示4字节的整数。&lt;/p&gt;
&lt;p&gt;有了上面的定义，我们可以很方便的通过下标来获得对应位置的数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# output&lt;/span&gt;
&lt;span class="c1"&gt;# (u&amp;#39;Xiao Lin&amp;#39;, 28, 25)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以获得指定key的所有值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# output&lt;/span&gt;
&lt;span class="c1"&gt;# array([u&amp;#39;Xiao Lin&amp;#39;, u&amp;#39;Xiao Pan&amp;#39;, u&amp;#39;Xiao Shen&amp;#39;, u&amp;#39;Xiao Zhou&amp;#39;], dtype=&amp;#39;&amp;lt;U10&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以根据key做过滤&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# output&lt;/span&gt;
&lt;span class="c1"&gt;# array([u&amp;#39;Xiao Shen&amp;#39;], dtype=&amp;#39;&amp;lt;U10&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除了结构化数组，numpy还支持一种record数组，和结构化数组唯一的区别就是，record数组不需要通过字典的key的方式来获取数据，直接通过属性就可以。举个例子就很清楚了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data_rec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recarray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;data_rec&lt;/span&gt;
&lt;span class="c1"&gt;# output&lt;/span&gt;
&lt;span class="c1"&gt;# rec.array([(u&amp;#39;Xiao Lin&amp;#39;, 28, 25), (u&amp;#39;Xiao Pan&amp;#39;, 33, 26),&lt;/span&gt;
&lt;span class="c1"&gt;#           (u&amp;#39;Xiao Shen&amp;#39;, 34, 27), (u&amp;#39;Xiao Zhou&amp;#39;, 29, 24)],&lt;/span&gt;
&lt;span class="c1"&gt;#           dtype=[(&amp;#39;name&amp;#39;, &amp;#39;&amp;lt;U10&amp;#39;), (&amp;#39;age&amp;#39;, &amp;#39;&amp;lt;i4&amp;#39;), (&amp;#39;grade&amp;#39;, &amp;#39;&amp;lt;i4&amp;#39;)])&lt;/span&gt;

&lt;span class="n"&gt;data_rec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="c1"&gt;# array([u&amp;#39;Xiao Lin&amp;#39;, u&amp;#39;Xiao Pan&amp;#39;, u&amp;#39;Xiao Shen&amp;#39;, u&amp;#39;Xiao Zhou&amp;#39;], dtype=&amp;#39;&amp;lt;U10&amp;#39;)&lt;/span&gt;

&lt;span class="n"&gt;data_rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# array([u&amp;#39;Xiao Lin&amp;#39;, u&amp;#39;Xiao Pan&amp;#39;, u&amp;#39;Xiao Shen&amp;#39;, u&amp;#39;Xiao Zhou&amp;#39;], dtype=&amp;#39;&amp;lt;U10&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看到这里，大家可能会有疑问，numpy的结构化数组中的每个元素似乎就是Python的字典，我们为什么还要用numpy呢？&lt;/p&gt;
&lt;p&gt;事实是这样的，numpy的结构化数组底层就是C的结构体，占用一块连续的内存区域，并且numpy底层是C实现，numpy数组中的类型都是静态类型的，性能比Python的的字典列表不知道高到哪儿去了。&lt;/p&gt;
&lt;p&gt;我们来做一下性能比较。对上面的程序，我们来实现一个用Python字典的版本。快过年了，我们给每个人都长一岁&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="c1"&gt;# numpy版本长一岁&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addage_numpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# python循环长一岁&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addage_python&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Xiao Lin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Xiao Pan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Xiao Shen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Xiao Zhou&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;grades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;data_np&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;grade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;formats&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;U10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;data_np&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;
&lt;span class="n"&gt;data_np&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ages&lt;/span&gt;
&lt;span class="n"&gt;data_np&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grades&lt;/span&gt;

&lt;span class="n"&gt;data_py&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grades&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
    &lt;span class="n"&gt;data_py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在ipython中加载上面的代码，并比较两个函数的性能&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="n"&gt;addage_numpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_np&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.76&lt;/span&gt; &lt;span class="err"&gt;µ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="n"&gt;addage_python&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_py&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;451&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，两者性能差了250多倍。&lt;/p&gt;</content><category term="Numpy"></category><category term="Python"></category><category term="Numpy"></category></entry><entry><title>Numpy二元运算的broadcasting机制</title><link href="http://www.shenzhongqiang.com/numpy-binary-op-broadcasting" rel="alternate"></link><published>2018-03-22T00:00:00+08:00</published><updated>2018-03-22T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-03-22:/numpy-binary-op-broadcasting</id><summary type="html">&lt;p&gt;Numpy中有一个非常方便的特性：broadcasting。当我们对两个不同长度的numpy数组作二元计算（如相加，相乘 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Numpy中有一个非常方便的特性：broadcasting。当我们对两个不同长度的numpy数组作二元计算（如相加，相乘）的时候，broadcasting就在背后默默地工作。本文我们就来介绍下numpy的broadcasting。&lt;/p&gt;
&lt;h4&gt;什么是broadcasting&lt;/h4&gt;
&lt;p&gt;我们通过一个简单的例子来认识一下broadcasting，考虑下面的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;a+b其实是把数组a和数组b中同样位置的每对元素相加。这里a和b是相同长度的数组。&lt;/p&gt;
&lt;p&gt;那如果是不同长度的数组呢？考虑下面的情况&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里就用到了broadcasting。broadcasting会把5扩展成[5, 5, 5]，然后上面的代码就变成了对两个同样长度的数组相加。用图画出来，是这样的一个过程（半透明的方块表示被扩展出来的数值）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-0be61eb588d42912151a3d7feb70020d_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，broadcasting不会分配额外的内存来存取被复制的数据，这里为了描述方便作了简化。&lt;/p&gt;
&lt;p&gt;接下来我们扩展一下上面的例子，看一下多维数组的情况&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# e is &lt;/span&gt;
&lt;span class="c1"&gt;# array(&lt;/span&gt;
&lt;span class="c1"&gt;#   [[ 1., 1., 1.],&lt;/span&gt;
&lt;span class="c1"&gt;#    [ 1., 1., 1.],&lt;/span&gt;
&lt;span class="c1"&gt;#    [ 1., 1., 1.]])&lt;/span&gt;

&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="c1"&gt;# array([&lt;/span&gt;
&lt;span class="c1"&gt;#   [ 1., 2., 3.],&lt;/span&gt;
&lt;span class="c1"&gt;#    [ 1., 2., 3.],&lt;/span&gt;
&lt;span class="c1"&gt;#    [ 1., 2., 3.]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里一维数组a被扩展成了二维数组，和e的shape相同。用图的形式表示，是这样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-95cf74a482e41f8350f37e024cf730a6_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我们再来考虑一个更复杂的情况，需要对两个数组都做broadcasting的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# b is&lt;/span&gt;
&lt;span class="c1"&gt;# array([&lt;/span&gt;
&lt;span class="c1"&gt;#    [0],&lt;/span&gt;
&lt;span class="c1"&gt;#    [1],&lt;/span&gt;
&lt;span class="c1"&gt;#    [2]])&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="c1"&gt;# array([&lt;/span&gt;
&lt;span class="c1"&gt;#    [0, 1, 2],&lt;/span&gt;
&lt;span class="c1"&gt;#    [1, 2, 3],&lt;/span&gt;
&lt;span class="c1"&gt;#    [2, 3, 4]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里a和b都被扩展成相同shape的二维数组。用图的形式表示这个过程，如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-f7d7beef96b1adc5ac21948d3c9ed3ca_r.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;broadcasting的规则&lt;/h4&gt;
&lt;p&gt;对两个numpy数组之间的作二元计算，broadcasting须遵循一下规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;如果两个数组维数不相等，维数较低的数组的shape会从左开始填充1，直到和高维数组的维数匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;如果两个数组维数相同，但某些维度的长度不同，那么长度为1的维度会被扩展，和另一数组的同维度的长度匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;如果两个数组维数相同，但有任一维度的长度不同且不为1，则报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们来举例说明一下上面的规则&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例1&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这两个数组的shape分别是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a.shape = (3,)
b.shape = (2, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对这两个数组作二元计算，根据规则1，数组会被填充成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a.shape -&amp;gt; (1, 3)
b.shape -&amp;gt; (2, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据规则2，第一个维度不等，所以我们对维度作扩展&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a.shape -&amp;gt; (2, 3)
b.shape -&amp;gt; (2, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在两个数组的shape一致了，可以相加得到下面的结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; 
&lt;span class="c1"&gt;# array([&lt;/span&gt;
&lt;span class="c1"&gt;#    [ 1., 2., 3.],&lt;/span&gt;
&lt;span class="c1"&gt;#    [ 1., 2., 3.]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;例2&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;两个数组的shape分别是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a.shape = (3, 1)
b.shape = (3,)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据规则1，b的shape要被填充&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a.shape -&amp;gt; (3, 1)
b.shape -&amp;gt; (1, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据规则2，维数相等，但维度内的长度不等，所以需要进一步扩展&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a.shape -&amp;gt; (3, 3)
b.shape -&amp;gt; (3, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在两者shape一致了，作相加计算可以得到如下结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; 
&lt;span class="c1"&gt;# array([&lt;/span&gt;
&lt;span class="c1"&gt;#    [0, 1, 2],&lt;/span&gt;
&lt;span class="c1"&gt;#    [1, 2, 3],&lt;/span&gt;
&lt;span class="c1"&gt;#    [2, 3, 4]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;例3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们再来看一个broadcasting报错的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;两个数组的shape分别是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;b.shape = (3, 2)
a.shape = (3,)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据规则1，a的shape会被填充&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;b.shape -&amp;gt; (3, 2)
a.shape -&amp;gt; (1, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据规则2，数组a的第一个维度会被扩展&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;b.shape -&amp;gt; (3, 2)
a.shape -&amp;gt; (3, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里我们满足规则3的条件了，维数相等，但第二个维度的长度不等，且不为1，因此这两个数组相加会报错，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="c1"&gt;# output&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;                                &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="n"&gt;a3d2288d92&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;operands&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;broadcast&lt;/span&gt; &lt;span class="n"&gt;together&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;shapes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;broadcasting在numpy数组的计算中无处不在，任何二元运算的ufunc都实现了broadcasting机制。broadcasting也很方便，很多时候我们甚至感知不到它的存在，但深入地理解它背后的工作机制，可以帮助我们避开一些陷阱。&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category><category term="Numpy"></category></entry><entry><title>数据告诉你新股上市能涨多久</title><link href="http://www.shenzhongqiang.com/how-much-can-ipo-stock-go-up.html" rel="alternate"></link><published>2018-03-22T00:00:00+08:00</published><updated>2018-03-22T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-03-22:/how-much-can-ipo-stock-go-up.html</id><summary type="html">&lt;p&gt;涨停打开的那一天卖掉股票，获利了结。但又不少股票涨停打开后，经过一番盘整后，继而冲上更高的高峰 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;涨停打开的那一天卖掉股票，获利了结。但又不少股票涨停打开后，经过一番盘整后，继而冲上更高的高峰。提前抛掉股票的股民只能惋惜自己卖得太早，错过了行情。&lt;/p&gt;
&lt;p&gt;本文旨在通过对历史数据的分析，预测新股上市后短期内的上涨幅度，给出更精准的抛售时机。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.zhihu.com/?target=http%3A//data.eastmoney.com/xg/xg/default.html"&gt;新股申购与中签查询 _ 数据中心 _ 东方财富网&lt;/a&gt; 里可以看到所有的新股数据，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-3df950e5fd4b98a45337e47a8d297a1d_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这里我们关心的是&lt;strong&gt;发行价格&lt;/strong&gt;、&lt;strong&gt;中签率&lt;/strong&gt;、&lt;strong&gt;发行市盈率&lt;/strong&gt;和&lt;strong&gt;行业市盈率&lt;/strong&gt;。我们爬取2017年10月前上市的500只股票做分析，整理得到下面的数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;股票代码   发行市盈率  行业市盈率   发行价     中签率                                            
sz002915  22.959999   43.860001    6.430000  0.02286
sh603917  22.990000   64.949997   14.220000  0.02512
sz300729  22.990000   48.150002   16.059999  0.02273
sz002913  22.990000   54.029999   30.379999  0.02516
sh603848  22.980000   49.410000    7.890000  0.03506
sh603711  22.990000   43.740002   14.180000  0.03825
sh603809  22.990000   20.639999   22.389999  0.02747
sh603685  22.990000   32.020000   21.040001  0.02406
sz300727  22.980000   44.000000    8.340000  0.02392
sz300726  22.980000   53.020000   11.160000  0.03335
sh603661  22.980000   47.590000   56.880001  0.02360
...             ...         ...         ...      ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对上面的500只股票，我们找到每一只股票在上市3个月内的最高价，并计算最高价对应的收益率，发现一些很有趣的现象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三点都比较容易解释。发行价越高，股票能涨到的最高价当然也越高了。股票的估值受行业市盈率影响，行业市盈率越高，股票发行市盈率越低，那股票上涨的空间也就越大。&lt;/p&gt;
&lt;p&gt;根据上面的分析，不难想到可以用下面的公式来预测新股上市后能涨到的最高价：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.zhihu.com/equation?tex=%E6%9C%80%E9%AB%98%E4%BB%B7+%3D+%E5%8F%91%E8%A1%8C%E4%BB%B7+%5Ctimes+%28%E8%A1%8C%E4%B8%9A%E5%B8%82%E7%9B%88%E7%8E%87+%5Cdiv+%E5%8F%91%E8%A1%8C%E5%B8%82%E7%9B%88%E7%8E%87%29"&gt; &lt;/p&gt;
&lt;p&gt;对于之前的500只股票，按上述公式计算预测价格，可以&lt;strong&gt;发现95.8%的股票都能涨到预测的价格以上&lt;/strong&gt;。我们如果去除10元以下的低价股，也&lt;strong&gt;有94.1%的股票能涨到预测的价格以上&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们来实际检验一下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;亿联网络（300628），发行价88.67，史上第一高，预测能涨到315，实际涨到378。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-0a5c6fd17866a8c88d49bac657c0169d_r.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;电连技术（300679），发行价67.72，预测能涨到140，实际涨到130.96。没有涨到预测价格，但已接近。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-fe7c598b5ccfaf662bae7506374e2778_r.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;深圳新星（603978），发行价29.93，预测能涨到106.72，实际涨到118。可以看到，这只股票在涨停打开的时候只有60不到，如果涨停打开当天抛售就错失了后面的一大波行情。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-5cf620c4ab7c2308ca835bdc2240ead1_r.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;欧派家居（603833），发行价50.08，预测能涨到102.38，实际涨到125.18，比较接近。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-3f134fbfd79f5a85ed2dda3b1c2bfd17_r.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;弘亚数控（002833），发行价10.11，预测能涨到52.56，实际涨到62.7。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c9d94e93a64cfc4caa5548b9c2b2b3bc_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;接下来我们来预测下最近将要上市的几只新股&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;养元饮品（603156），发行价78.73，发行市盈率17.74，行业市盈率50.09，预计可以涨到222.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;今创集团（603680），发行价32.69，发行市盈率22.99，行业市盈率47.50，预计可以涨到67.54&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;润建通信（002929），发行价23.95，发行市盈率22.99，行业市盈率44.99，预计可以涨到46.87&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这几只新股还未上市，等上市后可以验证一下，看是否能涨到预测的价格。&lt;/p&gt;
&lt;p&gt;总结一下，本文主要给出了一种方法用于预测新股上涨到的最高价。不同于传统的涨停打开就卖出的策略，本文对于价格的预测能给出更精确的卖出建议。&lt;/p&gt;</content><category term="数据分析"></category><category term="Python"></category><category term="数据分析"></category></entry><entry><title>用Cython和PyPy提升Python性能</title><link href="http://www.shenzhongqiang.com/improve-performance-by-cython.html" rel="alternate"></link><published>2018-03-22T00:00:00+08:00</published><updated>2018-03-22T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2018-03-22:/improve-performance-by-cython.html</id><summary type="html">&lt;p&gt;最近在比较Python和Java的性能。Python在做科学计算方面的性能的确蛮弱的，但网上查阅了一些文档，发现有很多方法可以优化Python的性能。这里以一个简单的积分程序为例 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近在比较Python和Java的性能。Python在做科学计算方面的性能的确蛮弱的，但网上查阅了一些文档，发现有很多方法可以优化Python的性能。这里以一个简单的积分程序为例，尝试用几种方法优化Python性能，并将优化的结果做个比较。&lt;/p&gt;
&lt;p&gt;这里计算的积分如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.zhihu.com/equation?tex=%5Cint_%7Ba%7D%5E%7Bb%7De%5E%7B-x%5E%7B2%7D%7D"&gt; &lt;/p&gt;
&lt;p&gt;未作优化的Python代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;integrate_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;2.71828182846&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;integrate_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在自己的机器上执行这段代码，耗时46.33s&lt;/p&gt;
&lt;p&gt;同样功能的Java代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.lang.Math&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;integrate_f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.71828182846&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;integrate_f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100000000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编译后执行，耗时8.58s&lt;/p&gt;
&lt;p&gt;下面用几种方法优化上面的Python的代码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. PyPy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般说Python都是指CPython解释器，CPython是广泛接受的Python标准。PyPy是另一个解释器，使用了JIT编译，和CPython高度兼容。不过PyPy的缺点是不支持C扩展模块，所以如果程序中用到Numpy，Scipy，就没法用PyPy优化了。&lt;/p&gt;
&lt;p&gt;用PyPy执行上面的python程序，耗时8.16s。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Numba&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Numba是一个加速Python执行的库，可以用其中的JIT编译加速代码的执行。使用Numba JIT的代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jit&lt;/span&gt;
&lt;span class="nd"&gt;@jit&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;integrate_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;2.71828182846&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;integrate_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用numba的代码执行耗时14.41s。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Cython&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cython将Python代码编译成C源码，再把C源码转换成Python扩展模块。用Cython改写Python代码，将动态类型用Cython中的静态类型声明后，可以大大提升执行的效率。&lt;/p&gt;
&lt;p&gt;不过用Cython优化的步骤有点复杂。需要先生成Python扩展模块，然后在另外一个程序里import这个模块并调用模块中的方法。&lt;/p&gt;
&lt;p&gt;Cython改写的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;integrate_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cdef&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;cdef&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="n"&gt;cdef&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;2.71828182846&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;integrate_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行Cython优化的代码，耗时7.36s。&lt;/p&gt;
&lt;p&gt;下图展示了上述优化前和优化后的性能比较：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-2192bca03dcb5a441ed5aece94dea038_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到，三种优化方式对性能都有很大的提升，其中Cython优化代码后对性能的提升最大。用Cython优化后的执行时间（7.36s）差不多比未经优化的CPython代码（46.33s）少了一个数量级，和Java版本（8.58s）的性能相当。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在涉及大量科学计算的项目中，通过优化Python还是有希望达到非常不错的性能的。Python自带了很多做科学计算的库，如Numpy，Scipy等，底层都是用C实现的，性能上已经做了很大的优化。如果需要自己实现算法，也可以用Cython做优化，将耗费CPU的部分编译成高效的C代码来达到性能的提升。&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>Python告诉你iPhone X有多热卖</title><link href="http://www.shenzhongqiang.com/iphonex-sales.html" rel="alternate"></link><published>2017-12-14T00:00:00+08:00</published><updated>2017-12-14T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2017-12-14:/iphonex-sales.html</id><summary type="html">&lt;p&gt;老婆最近生气了，说强哥不肯给她买iPhone X。强哥觉得挺委屈的，强哥是小气的人么 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;老婆最近生气了，说强哥不肯给她买iPhone X。强哥觉得挺委屈的，强哥是小气的人么。老婆要买iPhone X，强哥当然支持了。强哥立刻转了一笔巨款给老婆&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-4b784f72b1964ddcaa68408337f6ebbd_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;发完转账，老婆就把强哥给拉黑了。强哥当时的心情是这样的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-497886754145e37caf08601d2123bece_b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;强哥挺郁闷的，强哥到底做错了什么，老婆要这样对我。&lt;/p&gt;
&lt;p&gt;带着沉重的心情，强哥决定深入了解一下老婆为什么这么喜欢iPhone X，于是强哥&lt;strong&gt;用Python爬取淘宝店铺的数据分析了一下iPhone X到底有多热卖&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们先来看下淘宝上的销量数据长什么样。&lt;/p&gt;
&lt;p&gt;淘宝上的销量数据有两种方式估算，一种方式是用&lt;strong&gt;累计付款人数&lt;/strong&gt;近似销量，像下面这种&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-d583f86f36fb991a3059c9da9f05b1ba_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;显示在这个数字里的每个人都至少购买了一部手机，所以总销量一定大于等于累计付款人数。&lt;/p&gt;
&lt;p&gt;淘宝上并不是每一家店铺都显示累计付款人数，对于下面这种只显示&lt;strong&gt;评论数&lt;/strong&gt;的情况&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-63785e0be453175fb564f9e869a68d61_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;就只能用评论数来估算销量了。具体怎么估算后面会提到。&lt;/p&gt;
&lt;p&gt;知道怎么获得销量数据，接下类我们就开始爬数据了。&lt;/p&gt;
&lt;p&gt;我们要爬的数据藏在下面高亮的URL里&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-a0ce2622a4799f346c4802abdc92bd77_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我们用Python的Scrapy框架来实现一个爬虫，爬取不同搜索页的URL&lt;/p&gt;
&lt;p&gt;爬虫代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymongo&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_param&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/param&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/param&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QuotesSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;iphonex&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;url_patt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://s.taobao.com/search?data-key=s&amp;amp;data-value=&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;ajax=true&amp;amp;_ksTS=1513178695257_1962&amp;amp;callback=jsonp1963&amp;amp;q=iphone+x&amp;amp;imgfile=&amp;amp;commend=all&amp;amp;ssid=s5-e&amp;amp;search_type=item&amp;amp;sourceId=tb.index&amp;amp;spm=a21bo.2017.201856-taobao-item.1&amp;amp;ie=utf8&amp;amp;initiative_id=tbindexz_20170306&amp;amp;app=detailproduct&amp;amp;through=1&amp;amp;bcoffset=4&amp;amp;p4ppushleft=6&lt;/span&gt;&lt;span class="si"&gt;%%&lt;/span&gt;&lt;span class="s1"&gt;2C48&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_requests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_param&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_patt&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;
        &lt;span class="n"&gt;patt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jsonp\d+\((.*)\);&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;matched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MULTILINE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mods&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;itemlist&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;auctions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iphonex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;new_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert_many&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;
        &lt;span class="n"&gt;save_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_patt&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们爬得温柔点，这里设了爬完一次休息2秒再爬。&lt;/p&gt;
&lt;p&gt;爬完的数据存入了mongodb，接下来我们将数据从mongodb中读出来，去除不相关的产品和重复的产品，估算一下缺失累计付款人数商品的销量数据，然后统计总的销量和销售额。&lt;/p&gt;
&lt;p&gt;这里重点讲述一下怎么用评论数来估算商品销量。&lt;/p&gt;
&lt;p&gt;淘宝上的商品的评论只有在购买成功后才能添加，一次购买行为最多对应一条评论（首评，追评都会归结到一条）。按常理分析，商品累计付款人数和评论数应该呈正相关的关系。&lt;/p&gt;
&lt;p&gt;我们提取mongodb里累计付款人数大于0并且评论数大于200的商品。销量太少的商品的评论数量可能会存在一定随机性，因此我们限定用于分析的商品的评论数必须大于200。&lt;/p&gt;
&lt;p&gt;用散点图画出累计付款人数和评论数的关系，如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-64181e8a446b612a10b30d7d7d6d3a67_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;上图横轴是评论数，纵轴是累计付款人数，&lt;strong&gt;累计付款人数和评论数还是呈现很明显的正相关关系的&lt;/strong&gt;。我们用线性来拟合这个关系，对于那些只有评论数的商品，&lt;strong&gt;我们用拟合出来的公式来推算该商品的累计付款人数，由此来估算销量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据分析部分的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_iphonex&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iphonex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;prices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;sales&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;com_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;titles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;nids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;raw_title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iphonex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
            &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iphone x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
            &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iphone 8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
            &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iphone8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="n"&gt;nids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;detail_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;view_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;view_price&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view_price&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;comment_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;comment_count&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;comment_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;comment_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;comment_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;com_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;view_sales&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;view_sales&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;matched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(\d+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view_sales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;view_sales_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view_sales_num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;display.max_colwidth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sales&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;urls&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;titles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nids&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;comment_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;com_counts&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_duplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nids&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;last&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;df_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;6000&lt;/span&gt;&lt;span class="p"&gt;][(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comment_count&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;df_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_test&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comment_count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;df_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;reg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sklearn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LinearRegression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit_intercept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_train&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;comment_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;df_train&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sales&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;df_tofill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_test&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;df_tofill&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sales&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tofill&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;comment_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
    &lt;span class="n"&gt;df_test&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_tofill&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;iPhone X sold number:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;iPhone X sold money:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;df_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;get_iphonex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面这段代码有如下的输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;iPhone X sold number: &lt;span class="m"&gt;194037&lt;/span&gt;.766983
iPhone X sold money: &lt;span class="m"&gt;1605100188&lt;/span&gt;.36
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，至今为止，&lt;strong&gt;iPhone X在淘宝上共卖出了19万部，销售额达到了16亿多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个销售量到底什么水平呢？我们可以统计一下差不多同期上市的几款手机的销量，做个比较。&lt;/p&gt;
&lt;p&gt;用同样的方法，我们从淘宝上爬取了iPhone 8，华为Mate 10，小米Mix 2的销量数据，将它们和iPhone X放在一起做比较，有如下的数据&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-d6ed7aa37ad1427363cc99edbcacc0cd_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-c525d7955bc4d3c097485d71c319bb88_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到&lt;strong&gt;iPhone X无论在销量还是销售额上都遥遥领先，远远超过其他手机&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当然淘宝只是iPhone X的一个销售平台，同样在销售iPhone X的还有京东，苏宁，苹果线上和线下的实体商店等。由于很多大平台并不公开销量数据，要统计iPhone X总的销售量还有很大的难度。但根据之前新闻报道iPhone X开卖2小时招行销售额破20亿、双十一京东购机预约数量破200万、苹果商店门前排起长队、黄牛将一部手机价格炒到2万等这些来判断，这次的iPhone X一定是大受好评的。&lt;/p&gt;
&lt;p&gt;至此，强哥算是明白老婆为什么这么喜欢iPhone X了。强哥知道错了，强哥这就给老婆买iPhone X去。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-e0028b21e1882896d138de10d641b5fe_b.jpg"&gt;&lt;/p&gt;</content><category term="数据分析"></category><category term="Python"></category><category term="数据分析"></category><category term="爬虫"></category></entry><entry><title>Docker初体验</title><link href="http://www.shenzhongqiang.com/docker-intro.html" rel="alternate"></link><published>2017-11-30T00:00:00+08:00</published><updated>2017-11-30T00:00:00+08:00</updated><author><name>Zhongqiang Shen</name></author><id>tag:www.shenzhongqiang.com,2017-11-30:/docker-intro.html</id><summary type="html">&lt;p&gt;最近的项目中用到了Docker，感觉超级好用。写下这篇文章作为自己学习的一个小结，也作为一篇Docker的入门介绍。&lt;/p&gt;
&lt;p&gt;本文由以下内容组成 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近的项目中用到了Docker，感觉超级好用。写下这篇文章作为自己学习的一个小结，也作为一篇Docker的入门介绍。&lt;/p&gt;
&lt;p&gt;本文由以下内容组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是Docker&lt;/li&gt;
&lt;li&gt;Docker基本概念&lt;/li&gt;
&lt;li&gt;容器和传统VM的区别&lt;/li&gt;
&lt;li&gt;安装Docker&lt;/li&gt;
&lt;li&gt;Docker命令简介&lt;/li&gt;
&lt;li&gt;创建Docker镜像&lt;/li&gt;
&lt;li&gt;多容器部署&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;什么是Docker&lt;/h4&gt;
&lt;p&gt;Docker用Go语言开发实现，基于Linux内核的cgroup，namespace，和AUFS类的Union FS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。&lt;/p&gt;
&lt;h4&gt;Docker基本概念&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;镜像（image）&lt;/strong&gt;- 一个独立的文件系统，类似虚拟机里的镜像，包含运行时需要的系统、软件、代码、库、环境变量、配置文件等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器（container）&lt;/strong&gt;- 由镜像（image）创建的运行实例，类似虚拟机，可以对它执行启动、停止、删除等操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;仓库（repository）&lt;/strong&gt;- 提供集中存储、镜像分发的服务，类似github。用户可以从仓库（repository）上传或下载镜像&lt;/p&gt;
&lt;h4&gt;容器和传统VM的区别&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;传统VM架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-7ee61067dfb9eac458ced806d2bd4fa6_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.shenzhongqiang.com/images/v2-f211aa72def9826fb7050944bdd5c108_r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;每个虚拟机都有自己独立的操作系统，而不同的容器可以共享同一个操作系统。虚拟机面向操作系统，而Docker是面向应用的。容器一般被设计为运行一个主要进程，而不是管理多个进程集合。&lt;/p&gt;
&lt;h4&gt;安装Docker&lt;/h4&gt;
&lt;p&gt;以ubuntu为例，运行以下命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-get install docker
$ apt-get install docker.io
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试docker是否安装成功，运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run hello-world

Hello from Docker.
This message shows that your installation appears to be working correctly.
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Docker命令简介&lt;/h4&gt;
&lt;p&gt;以busybox镜像为例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下载镜像&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker pull busybox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这条命令从docker hub上下载busybox镜像存在本地&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;列出本地的镜像&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker images
REPOSITORY
busybox                                     latest              6ad733544a63        3 weeks ago         1.129 MB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;基于镜像创建容器&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run busybox
$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里没有任何输出，容器被创建后并没有运行任何命令，所以创建后就退出了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在容器中执行命令&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run busybox &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello from busybox&amp;quot;&lt;/span&gt;
hello from busybox 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;echo命令退出，容器也随即退出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;显示所有的容器&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker ps -a 
CONTAINER ID        IMAGE                                       COMMAND                  CREATED             STATUS                     PORTS               NAMES
0f6621b18dbe        busybox                                     &lt;span class="s2"&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;                     &lt;span class="m"&gt;3&lt;/span&gt; minutes ago       Exited &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; minutes ago                       desperate_torvalds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;显示正在运行的容器&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -d busybox top &lt;span class="c1"&gt;# 启动一个容器，容器中运行top命令，这里-d表示detach模式&lt;/span&gt;
$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
27c2844e3a5d        busybox             &lt;span class="s2"&gt;&amp;quot;top&amp;quot;&lt;/span&gt;               &lt;span class="m"&gt;5&lt;/span&gt; minutes ago       Up &lt;span class="m"&gt;5&lt;/span&gt; minutes                            sleepy_wilson
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;在容器中运行命令&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -it busybox &lt;span class="c1"&gt;# -it表示连接到容器中的tty&lt;/span&gt;
/ &lt;span class="c1"&gt;# ls&lt;/span&gt;
bin   dev   etc   home  proc  root  sys   tmp   usr   var
/ &lt;span class="c1"&gt;# echo &amp;quot;hello&amp;quot;&lt;/span&gt;
hello
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;删除容器&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker rm  0f6621b18dbe
0f6621b18dbe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;删除镜像&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker rmi busybox
Untagged: busybox:latest
Untagged: busybox@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0
Deleted: sha256:6ad733544a6317992a6fac4eb19fe1df577d4dec7529efec28a5bd0edad0fd30
Deleted: sha256:0271b8eebde3fa9a6126b1f2335e170f902731ab4942f9f1914e77016540c7bb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;在Docker Hub上搜索镜像&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker search busybox &lt;span class="c1"&gt;# 搜索image名字包含busybox的镜像&lt;/span&gt;
NAME                        DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
busybox                     Busybox base image.                             &lt;span class="m"&gt;1149&lt;/span&gt;      &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
progrium/busybox                                                            &lt;span class="m"&gt;66&lt;/span&gt;                   &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
hypriot/rpi-busybox-httpd   Raspberry Pi compatible Docker Image with ...   &lt;span class="m"&gt;39&lt;/span&gt;
radial/busyboxplus          Full-chain, Internet enabled, busybox made...   &lt;span class="m"&gt;16&lt;/span&gt;                   &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
hypriot/armhf-busybox       Busybox base image &lt;span class="k"&gt;for&lt;/span&gt; ARM.                     &lt;span class="m"&gt;8&lt;/span&gt;
armhf/busybox               Busybox base image.                             &lt;span class="m"&gt;4&lt;/span&gt;
arm32v7/busybox             Busybox base image.                             &lt;span class="m"&gt;3&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;检查容器中的命令输出&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -d busybox top &lt;span class="c1"&gt;# 启动一个容器&lt;/span&gt;
$ docker logs 10b72de4bd77 &lt;span class="c1"&gt;# 查看容器中top的输出&lt;/span&gt;
Mem: 8700192K used, 15989388K free, 247764K shrd, 299432K buff, 6261884K cached
CPU:  &lt;span class="m"&gt;0&lt;/span&gt;.0% usr  &lt;span class="m"&gt;0&lt;/span&gt;.1% sys  &lt;span class="m"&gt;0&lt;/span&gt;.0% nic &lt;span class="m"&gt;99&lt;/span&gt;.7% idle  &lt;span class="m"&gt;0&lt;/span&gt;.0% io  &lt;span class="m"&gt;0&lt;/span&gt;.0% irq  &lt;span class="m"&gt;0&lt;/span&gt;.0% sirq
Load average: &lt;span class="m"&gt;0&lt;/span&gt;.16 &lt;span class="m"&gt;0&lt;/span&gt;.09 &lt;span class="m"&gt;0&lt;/span&gt;.11 &lt;span class="m"&gt;1&lt;/span&gt;/363 &lt;span class="m"&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;创建Docker镜像&lt;/h4&gt;
&lt;p&gt;Dockerfile可用来自动化Docker镜像的创建，它包含一系列指令来描述如何创建一个镜像。&lt;/p&gt;
&lt;p&gt;这里我们来展示如何用Dockerfile创建一个zookeeper的镜像。&lt;/p&gt;
&lt;p&gt;首先需要在Dockerfile中指定base镜像，FROM关键字用于指定base镜像。因为zookeeper要用到java，我们的镜像使用openjdk作为base&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; openjdk&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MAINTAINER关键字描述镜像的创建者&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;MAINTAINER&lt;/span&gt;&lt;span class="s"&gt; Zhongqiang Shen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;WORKDIR设置容器内的当前工作目录，如果不存在则创建目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动zookeeper服务需要从官网下载zookeeper包，撰写conf/zoo.cfg，并启动zookeeper进程。ADD关键字将URL中的内容下载到指定目录中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; http://apache.osuosl.org/zookeeper/stable/zookeeper-3.4.10.tar.gz /tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;RUN关键字可以在容器中运行命令。在容器中解压zookeeper包，并将加压后的包移到/opt/zookeeper位置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; tar -xzf zookeeper-3.4.10.tar.gz
&lt;span class="k"&gt;RUN&lt;/span&gt; mv zookeeper-3.4.10 /opt/zookeeper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置zookeeper的路径为当前的工作目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /opt/zookeeper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;撰写conf/zoo.cfg&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tickTime=2000&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; conf/zoo.cfg
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dataDir=/var/lib/zookeeper&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; conf/zoo.cfg
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;clientPort=2181&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; conf/zoo.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;暴露容器的2181端口，使用expose关键字&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 2181&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动zookeeper进程，使用CMD关键字。start-foreground参数让zookeeper在前台运行，如果没有这个参数，.sh脚本退出后会导致容器也退出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [&amp;quot;/opt/zookeeper/bin/zkServer.sh&amp;quot;, &amp;quot;start-foreground&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里需要注意RUN和CMD的区别，RUN用于创建镜像的时候执行命令，每次执行命令都会创建新的镜像层。CMD用于指定容器启动后默认执行的命令和参数。&lt;/p&gt;
&lt;p&gt;完整的Dockerfile是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; openjdk&lt;/span&gt;
&lt;span class="k"&gt;MAINTAINER&lt;/span&gt;&lt;span class="s"&gt; Zhongqiang Shen&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /tmp&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; http://apache.osuosl.org/zookeeper/stable/zookeeper-3.4.10.tar.gz /tmp&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; tar -xzf zookeeper-3.4.10.tar.gz
&lt;span class="k"&gt;RUN&lt;/span&gt; mv zookeeper-3.4.10 /opt/zookeeper
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /opt/zookeeper&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tickTime=2000&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; conf/zoo.cfg
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dataDir=/var/lib/zookeeper&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; conf/zoo.cfg
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;clientPort=2181&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; conf/zoo.cfg
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 2181&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [&amp;quot;/opt/zookeeper/bin/zkServer.sh&amp;quot;, &amp;quot;start-foreground&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建完Dockerfile，就可以用下面的命令来创建镜像了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker build -t zookeeper .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
Step &lt;span class="m"&gt;1&lt;/span&gt;/12 : FROM openjdk
latest: Pulling from library/openjdk
3e17c6eae66c: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
fdfb54153de7: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
a4ca6e73242a: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
93bd198d0a5f: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
ca4d78fb08d6: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
ad3d1bdcab4b: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
4853d1e6d0c1: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
49e4624ad45f: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
bcbcd4c3ef93: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
Digest: sha256:b89826260c9f5ebb94ebff7ef23720f2b6de9f879df52e91afd112f53f5f7531
Status: Downloaded newer image &lt;span class="k"&gt;for&lt;/span&gt; openjdk:latest
 ---&amp;gt; 377371113dab
Step &lt;span class="m"&gt;2&lt;/span&gt;/12 : MAINTAINER zhongqiang Shen
 ---&amp;gt; Running in 03bf1c8ef563
 ---&amp;gt; 7cd7ffa57b0c
Removing intermediate container 03bf1c8ef563
Step &lt;span class="m"&gt;3&lt;/span&gt;/12 : WORKDIR /tmp
 ---&amp;gt; b180924d0413
Removing intermediate container 1461e2b93f70
Step &lt;span class="m"&gt;4&lt;/span&gt;/12 : ADD http://apache.osuosl.org/zookeeper/stable/zookeeper-3.4.10.tar.gz /tmp
Downloading &lt;span class="o"&gt;[==================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;35&lt;/span&gt;.04MB/35.04MB
 ---&amp;gt; c2858e418073
Step &lt;span class="m"&gt;5&lt;/span&gt;/12 : RUN tar -xzf zookeeper-3.4.10.tar.gz
 ---&amp;gt; Running in 0cb7b253c12f
 ---&amp;gt; 0f7afb29ae74
Removing intermediate container 0cb7b253c12f
Step &lt;span class="m"&gt;6&lt;/span&gt;/12 : RUN mv zookeeper-3.4.10 /opt/zookeeper
 ---&amp;gt; Running in 68ce7228ca7e
 ---&amp;gt; 65d309c5340a
Removing intermediate container 68ce7228ca7e
Step &lt;span class="m"&gt;7&lt;/span&gt;/12 : WORKDIR /opt/zookeeper
 ---&amp;gt; b2dbec2aed3c
Removing intermediate container 8ac9df07f732
Step &lt;span class="m"&gt;8&lt;/span&gt;/12 : RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tickTime=2000&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; conf/zoo.cfg
 ---&amp;gt; Running in ef1d9dd5269a
 ---&amp;gt; 0c20dd205282
Removing intermediate container ef1d9dd5269a
Step &lt;span class="m"&gt;9&lt;/span&gt;/12 : RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dataDir=/var/lib/zookeeper&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; conf/zoo.cfg
 ---&amp;gt; Running in 7dcdb7eb07b1
 ---&amp;gt; a0a0a7341dba
Removing intermediate container 7dcdb7eb07b1
Step &lt;span class="m"&gt;10&lt;/span&gt;/12 : RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;clientPort=2181&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; conf/zoo.cfg
 ---&amp;gt; Running in c2b0127e5cca
 ---&amp;gt; 6f7564eeaf4f
Removing intermediate container c2b0127e5cca
Step &lt;span class="m"&gt;11&lt;/span&gt;/12 : EXPOSE &lt;span class="m"&gt;2181&lt;/span&gt;
 ---&amp;gt; Running in cd97242108e5
 ---&amp;gt; eb91473e8a4c
Removing intermediate container cd97242108e5
Step &lt;span class="m"&gt;12&lt;/span&gt;/12 : CMD /opt/zookeeper/bin/zkServer.sh start-foreground
 ---&amp;gt; Running in 665686b5ec56
 ---&amp;gt; c4515a39ff83
Removing intermediate container 665686b5ec56
Successfully built c4515a39ff83
Successfully tagged zk:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样一个docker镜像就创建好了。可以用下面的命令来启动它&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run zookeeper
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;多容器部署&lt;/h4&gt;
&lt;p&gt;一个应用通常由多个服务构成，将这些服务运行在容器中，就涉及到多个容器的部署。使用Docker Compose可以实现复杂的多容器应用的部署运行。&lt;/p&gt;
&lt;p&gt;Docker Compose使用docker-compose.yml来定义服务。在docker-compose.yml中，所有的容器通过services来定义。&lt;/p&gt;
&lt;p&gt;这里以kafka为例，kafka下层使用zookeeper作协调，因此这里需要定义zookeeper和kafka两个服务，先启动zookeeper，后启动kafka。&lt;/p&gt;
&lt;p&gt;首先安装Docker Compose&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-get install docker-compose
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;定义docker-compose.yml，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  zookeeper:
    container_name: iop-zookeeper
    image: jplock/zookeeper
    ports:
      - &lt;span class="s2"&gt;&amp;quot;2181:2181&amp;quot;&lt;/span&gt;
  kafka:
    container_name: iop-kafka
    image: wurstmeister/kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: iop-zookeeper:2181
      KAFKA_CREATE_TOPICS: &lt;span class="s2"&gt;&amp;quot;metrics&amp;quot;&lt;/span&gt;
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_BROKER_ID: &lt;span class="m"&gt;1&lt;/span&gt;
    ports:
      - &lt;span class="s2"&gt;&amp;quot;9092:9092&amp;quot;&lt;/span&gt;
    links:
      - zookeeper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;version指定Docker Compose的版本&lt;/p&gt;
&lt;p&gt;container_name指定容器的名字&lt;/p&gt;
&lt;p&gt;image指定使用的镜像的名字，这里使用了docker hub上现有的Dockerfile来创建zookeeper和kafka的镜像&lt;/p&gt;
&lt;p&gt;ports定义端口映射&lt;/p&gt;
&lt;p&gt;environment设置环境变量&lt;/p&gt;
&lt;p&gt;links定义容器之间的关联关系和依赖关系，这里kafka依赖于zookeeper，定义了这个依赖关系后，kafka启动前会先启动zookeeper&lt;/p&gt;
&lt;p&gt;定义了docker-compose.yml文件后，就可以通过如下命令来一键启动服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose up -d &lt;span class="c1"&gt;# -d表示后台模式运行服务&lt;/span&gt;
Pulling zookeeper &lt;span class="o"&gt;(&lt;/span&gt;jplock/zookeeper:latest&lt;span class="o"&gt;)&lt;/span&gt;...
latest: Pulling from jplock/zookeeper
b56ae66c2937: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
81cebc5bcaf8: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
3b27fd892ecb: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
40bb2918284a: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
Digest: sha256:5fe911a016393439a963bcab2f1cc03d107816ce2c6977bfa77bfb45edef5ad0
Status: Downloaded newer image &lt;span class="k"&gt;for&lt;/span&gt; jplock/zookeeper:latest
Pulling kafka &lt;span class="o"&gt;(&lt;/span&gt;wurstmeister/kafka:latest&lt;span class="o"&gt;)&lt;/span&gt;...
latest: Pulling from wurstmeister/kafka
90f4dba627d6: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
11dbde1d93a0: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
c89218b0f06c: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
134279c08227: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
341b4d59b9c3: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
2ce0b628d981: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
82b065c991b8: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
d4f3b865c0e2: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
af829f3a4ec8: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
Digest: sha256:2aa183fd201d693e24d4d5d483b081fc2c62c198a7acb8484838328c83542c96
Status: Downloaded newer image &lt;span class="k"&gt;for&lt;/span&gt; wurstmeister/kafka:latest
Creating iop-zookeeper ...
Creating iop-zookeeper ... &lt;span class="k"&gt;done&lt;/span&gt;
Creating iop-kafka ...
Creating iop-kafka ... &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行下列命令可以看到容器已启动&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker ps
CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS                             PORTS                                        NAMES
08a14f1c462a        wurstmeister/kafka   &lt;span class="s2"&gt;&amp;quot;start-kafka.sh&amp;quot;&lt;/span&gt;         &lt;span class="m"&gt;28&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;26&lt;/span&gt; seconds                      &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:9092-&amp;gt;9092/tcp                       iop-kafka
f47d27f80aac        jplock/zookeeper     &lt;span class="s2"&gt;&amp;quot;/opt/zookeeper/bi...&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;28&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;27&lt;/span&gt; seconds &lt;span class="o"&gt;(&lt;/span&gt;health: starting&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="m"&gt;2888&lt;/span&gt;/tcp, &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:2181-&amp;gt;2181/tcp, &lt;span class="m"&gt;3888&lt;/span&gt;/tcp   iop-zookeeper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们用python写个程序来测试一下启动的kafka服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;optparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kafka&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KafkaConsumer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kafka&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KafkaProducer&lt;/span&gt;

&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;store&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;produce&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;consume&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;choice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;produce&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;producer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KafkaProducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bootstrap_servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:9092&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;consume&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KafkaConsumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bootstrap_servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:9092&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;auto_offset_reset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;earliest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码包含两个功能：向kafka队列生产数据和从kafka队列消费数据。&lt;/p&gt;
&lt;p&gt;我们先向kafka队列生产数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test.py --action&lt;span class="o"&gt;=&lt;/span&gt;produce
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;随后从kafka队列中消费数据，并打印出数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test.py --action&lt;span class="o"&gt;=&lt;/span&gt;consume
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1511934733036&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1395146535&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1511934733045&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-7035501, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1511934733047&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1650992148&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1511934733049&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;195437617&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1511934733051&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1858641489, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1511934733053&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-349298306, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1511934733055&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;6&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1993515257&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1511934733057&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;7&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-824249467, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1511934733059&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;8&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1519664681&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ConsumerRecord&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;, &lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1511934733061&lt;/span&gt;, &lt;span class="nv"&gt;timestamp_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;546143992&lt;/span&gt;, &lt;span class="nv"&gt;serialized_key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1, &lt;span class="nv"&gt;serialized_value_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到之前插入的数据被成功的读取到。&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;本文对Docker做了个简单介绍，包括Docker的基本概念、基本命令、如何创建Docker镜像、以及如何部署多容器。&lt;/p&gt;
&lt;p&gt;除以上内容，Kubernetes也是Docker生态圈中的重要一员。Kubernetes是一个开源的容器集群管理系统，提供资源调度、均衡容灾、服务注册、动态扩缩容等功能，可以作为下一步学习的内容。&lt;/p&gt;</content><category term="misc"></category></entry></feed>